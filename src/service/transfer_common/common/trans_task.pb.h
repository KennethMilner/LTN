// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trans_task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trans_5ftask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trans_5ftask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trans_5ftask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trans_5ftask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trans_5ftask_2eproto;
class db_net_entity;
class db_net_entityDefaultTypeInternal;
extern db_net_entityDefaultTypeInternal _db_net_entity_default_instance_;
class db_trans_cli_usr_download_task;
class db_trans_cli_usr_download_taskDefaultTypeInternal;
extern db_trans_cli_usr_download_taskDefaultTypeInternal _db_trans_cli_usr_download_task_default_instance_;
class db_trans_cli_usr_task;
class db_trans_cli_usr_taskDefaultTypeInternal;
extern db_trans_cli_usr_taskDefaultTypeInternal _db_trans_cli_usr_task_default_instance_;
class db_trans_cli_usr_upload_task;
class db_trans_cli_usr_upload_taskDefaultTypeInternal;
extern db_trans_cli_usr_upload_taskDefaultTypeInternal _db_trans_cli_usr_upload_task_default_instance_;
class db_trans_progress;
class db_trans_progressDefaultTypeInternal;
extern db_trans_progressDefaultTypeInternal _db_trans_progress_default_instance_;
class trans_cli_download_task;
class trans_cli_download_taskDefaultTypeInternal;
extern trans_cli_download_taskDefaultTypeInternal _trans_cli_download_task_default_instance_;
class trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse;
class trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUseDefaultTypeInternal;
extern trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUseDefaultTypeInternal _trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_;
class trans_cli_upload_task;
class trans_cli_upload_taskDefaultTypeInternal;
extern trans_cli_upload_taskDefaultTypeInternal _trans_cli_upload_task_default_instance_;
class trans_svr_download_task;
class trans_svr_download_taskDefaultTypeInternal;
extern trans_svr_download_taskDefaultTypeInternal _trans_svr_download_task_default_instance_;
class trans_svr_upload_task;
class trans_svr_upload_taskDefaultTypeInternal;
extern trans_svr_upload_taskDefaultTypeInternal _trans_svr_upload_task_default_instance_;
class trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse;
class trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUseDefaultTypeInternal;
extern trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUseDefaultTypeInternal _trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::db_net_entity* Arena::CreateMaybeMessage<::db_net_entity>(Arena*);
template<> ::db_trans_cli_usr_download_task* Arena::CreateMaybeMessage<::db_trans_cli_usr_download_task>(Arena*);
template<> ::db_trans_cli_usr_task* Arena::CreateMaybeMessage<::db_trans_cli_usr_task>(Arena*);
template<> ::db_trans_cli_usr_upload_task* Arena::CreateMaybeMessage<::db_trans_cli_usr_upload_task>(Arena*);
template<> ::db_trans_progress* Arena::CreateMaybeMessage<::db_trans_progress>(Arena*);
template<> ::trans_cli_download_task* Arena::CreateMaybeMessage<::trans_cli_download_task>(Arena*);
template<> ::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse* Arena::CreateMaybeMessage<::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse>(Arena*);
template<> ::trans_cli_upload_task* Arena::CreateMaybeMessage<::trans_cli_upload_task>(Arena*);
template<> ::trans_svr_download_task* Arena::CreateMaybeMessage<::trans_svr_download_task>(Arena*);
template<> ::trans_svr_upload_task* Arena::CreateMaybeMessage<::trans_svr_upload_task>(Arena*);
template<> ::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse* Arena::CreateMaybeMessage<::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class db_net_entity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_net_entity) */ {
 public:
  db_net_entity();
  virtual ~db_net_entity();

  db_net_entity(const db_net_entity& from);
  db_net_entity(db_net_entity&& from) noexcept
    : db_net_entity() {
    *this = ::std::move(from);
  }

  inline db_net_entity& operator=(const db_net_entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_net_entity& operator=(db_net_entity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_net_entity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_net_entity* internal_default_instance() {
    return reinterpret_cast<const db_net_entity*>(
               &_db_net_entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(db_net_entity* other);
  friend void swap(db_net_entity& a, db_net_entity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline db_net_entity* New() const final {
    return CreateMaybeMessage<db_net_entity>(nullptr);
  }

  db_net_entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_net_entity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_net_entity& from);
  void MergeFrom(const db_net_entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_net_entity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_net_entity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);

  // string port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);

  // string protocol = 3;
  void clear_protocol();
  static const int kProtocolFieldNumber = 3;
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);

  // @@protoc_insertion_point(class_scope:db_net_entity)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trans_5ftask_2eproto;
};
// -------------------------------------------------------------------

class db_trans_progress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_trans_progress) */ {
 public:
  db_trans_progress();
  virtual ~db_trans_progress();

  db_trans_progress(const db_trans_progress& from);
  db_trans_progress(db_trans_progress&& from) noexcept
    : db_trans_progress() {
    *this = ::std::move(from);
  }

  inline db_trans_progress& operator=(const db_trans_progress& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_trans_progress& operator=(db_trans_progress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_trans_progress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_trans_progress* internal_default_instance() {
    return reinterpret_cast<const db_trans_progress*>(
               &_db_trans_progress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(db_trans_progress* other);
  friend void swap(db_trans_progress& a, db_trans_progress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline db_trans_progress* New() const final {
    return CreateMaybeMessage<db_trans_progress>(nullptr);
  }

  db_trans_progress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_trans_progress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_trans_progress& from);
  void MergeFrom(const db_trans_progress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_trans_progress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_trans_progress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string trans_session_id = 1;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 1;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // string remote_path = 5;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 5;
  const std::string& remote_path() const;
  void set_remote_path(const std::string& value);
  void set_remote_path(std::string&& value);
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  std::string* mutable_remote_path();
  std::string* release_remote_path();
  void set_allocated_remote_path(std::string* remote_path);

  // double progress = 2;
  void clear_progress();
  static const int kProgressFieldNumber = 2;
  double progress() const;
  void set_progress(double value);

  // int32 trans_size = 3;
  void clear_trans_size();
  static const int kTransSizeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_size() const;
  void set_trans_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 total_size = 4;
  void clear_total_size();
  static const int kTotalSizeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 total_size() const;
  void set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:db_trans_progress)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_path_;
  double progress_;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trans_5ftask_2eproto;
};
// -------------------------------------------------------------------

class db_trans_cli_usr_task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_trans_cli_usr_task) */ {
 public:
  db_trans_cli_usr_task();
  virtual ~db_trans_cli_usr_task();

  db_trans_cli_usr_task(const db_trans_cli_usr_task& from);
  db_trans_cli_usr_task(db_trans_cli_usr_task&& from) noexcept
    : db_trans_cli_usr_task() {
    *this = ::std::move(from);
  }

  inline db_trans_cli_usr_task& operator=(const db_trans_cli_usr_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_trans_cli_usr_task& operator=(db_trans_cli_usr_task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_trans_cli_usr_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_trans_cli_usr_task* internal_default_instance() {
    return reinterpret_cast<const db_trans_cli_usr_task*>(
               &_db_trans_cli_usr_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(db_trans_cli_usr_task* other);
  friend void swap(db_trans_cli_usr_task& a, db_trans_cli_usr_task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline db_trans_cli_usr_task* New() const final {
    return CreateMaybeMessage<db_trans_cli_usr_task>(nullptr);
  }

  db_trans_cli_usr_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_trans_cli_usr_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_trans_cli_usr_task& from);
  void MergeFrom(const db_trans_cli_usr_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_trans_cli_usr_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_trans_cli_usr_task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .db_net_entity addr = 5;
  int addr_size() const;
  void clear_addr();
  static const int kAddrFieldNumber = 5;
  ::db_net_entity* mutable_addr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_net_entity >*
      mutable_addr();
  const ::db_net_entity& addr(int index) const;
  ::db_net_entity* add_addr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_net_entity >&
      addr() const;

  // string trans_id = 2;
  void clear_trans_id();
  static const int kTransIdFieldNumber = 2;
  const std::string& trans_id() const;
  void set_trans_id(const std::string& value);
  void set_trans_id(std::string&& value);
  void set_trans_id(const char* value);
  void set_trans_id(const char* value, size_t size);
  std::string* mutable_trans_id();
  std::string* release_trans_id();
  void set_allocated_trans_id(std::string* trans_id);

  // string direction = 3;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  const std::string& direction() const;
  void set_direction(const std::string& value);
  void set_direction(std::string&& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  std::string* mutable_direction();
  std::string* release_direction();
  void set_allocated_direction(std::string* direction);

  // string local_path = 6;
  void clear_local_path();
  static const int kLocalPathFieldNumber = 6;
  const std::string& local_path() const;
  void set_local_path(const std::string& value);
  void set_local_path(std::string&& value);
  void set_local_path(const char* value);
  void set_local_path(const char* value, size_t size);
  std::string* mutable_local_path();
  std::string* release_local_path();
  void set_allocated_local_path(std::string* local_path);

  // .db_trans_progress progress = 1;
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 1;
  const ::db_trans_progress& progress() const;
  ::db_trans_progress* release_progress();
  ::db_trans_progress* mutable_progress();
  void set_allocated_progress(::db_trans_progress* progress);

  // int32 file_or_dir = 4;
  void clear_file_or_dir();
  static const int kFileOrDirFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir() const;
  void set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:db_trans_cli_usr_task)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_net_entity > addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_path_;
  ::db_trans_progress* progress_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trans_5ftask_2eproto;
};
// -------------------------------------------------------------------

class db_trans_cli_usr_upload_task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_trans_cli_usr_upload_task) */ {
 public:
  db_trans_cli_usr_upload_task();
  virtual ~db_trans_cli_usr_upload_task();

  db_trans_cli_usr_upload_task(const db_trans_cli_usr_upload_task& from);
  db_trans_cli_usr_upload_task(db_trans_cli_usr_upload_task&& from) noexcept
    : db_trans_cli_usr_upload_task() {
    *this = ::std::move(from);
  }

  inline db_trans_cli_usr_upload_task& operator=(const db_trans_cli_usr_upload_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_trans_cli_usr_upload_task& operator=(db_trans_cli_usr_upload_task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_trans_cli_usr_upload_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_trans_cli_usr_upload_task* internal_default_instance() {
    return reinterpret_cast<const db_trans_cli_usr_upload_task*>(
               &_db_trans_cli_usr_upload_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(db_trans_cli_usr_upload_task* other);
  friend void swap(db_trans_cli_usr_upload_task& a, db_trans_cli_usr_upload_task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline db_trans_cli_usr_upload_task* New() const final {
    return CreateMaybeMessage<db_trans_cli_usr_upload_task>(nullptr);
  }

  db_trans_cli_usr_upload_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_trans_cli_usr_upload_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_trans_cli_usr_upload_task& from);
  void MergeFrom(const db_trans_cli_usr_upload_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_trans_cli_usr_upload_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_trans_cli_usr_upload_task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string upload_file = 4;
  int upload_file_size() const;
  void clear_upload_file();
  static const int kUploadFileFieldNumber = 4;
  const std::string& upload_file(int index) const;
  std::string* mutable_upload_file(int index);
  void set_upload_file(int index, const std::string& value);
  void set_upload_file(int index, std::string&& value);
  void set_upload_file(int index, const char* value);
  void set_upload_file(int index, const char* value, size_t size);
  std::string* add_upload_file();
  void add_upload_file(const std::string& value);
  void add_upload_file(std::string&& value);
  void add_upload_file(const char* value);
  void add_upload_file(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& upload_file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_upload_file();

  // string remote_path = 2;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 2;
  const std::string& remote_path() const;
  void set_remote_path(const std::string& value);
  void set_remote_path(std::string&& value);
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  std::string* mutable_remote_path();
  std::string* release_remote_path();
  void set_allocated_remote_path(std::string* remote_path);

  // string root_path = 3;
  void clear_root_path();
  static const int kRootPathFieldNumber = 3;
  const std::string& root_path() const;
  void set_root_path(const std::string& value);
  void set_root_path(std::string&& value);
  void set_root_path(const char* value);
  void set_root_path(const char* value, size_t size);
  std::string* mutable_root_path();
  std::string* release_root_path();
  void set_allocated_root_path(std::string* root_path);

  // .db_trans_cli_usr_task cli_usr_task = 1;
  bool has_cli_usr_task() const;
  void clear_cli_usr_task();
  static const int kCliUsrTaskFieldNumber = 1;
  const ::db_trans_cli_usr_task& cli_usr_task() const;
  ::db_trans_cli_usr_task* release_cli_usr_task();
  ::db_trans_cli_usr_task* mutable_cli_usr_task();
  void set_allocated_cli_usr_task(::db_trans_cli_usr_task* cli_usr_task);

  // uint64 uploaded_received_file_size = 5;
  void clear_uploaded_received_file_size();
  static const int kUploadedReceivedFileSizeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 uploaded_received_file_size() const;
  void set_uploaded_received_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 uploading_received_file_szie = 6;
  void clear_uploading_received_file_szie();
  static const int kUploadingReceivedFileSzieFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 uploading_received_file_szie() const;
  void set_uploading_received_file_szie(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:db_trans_cli_usr_upload_task)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> upload_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_path_;
  ::db_trans_cli_usr_task* cli_usr_task_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uploaded_received_file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uploading_received_file_szie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trans_5ftask_2eproto;
};
// -------------------------------------------------------------------

class db_trans_cli_usr_download_task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:db_trans_cli_usr_download_task) */ {
 public:
  db_trans_cli_usr_download_task();
  virtual ~db_trans_cli_usr_download_task();

  db_trans_cli_usr_download_task(const db_trans_cli_usr_download_task& from);
  db_trans_cli_usr_download_task(db_trans_cli_usr_download_task&& from) noexcept
    : db_trans_cli_usr_download_task() {
    *this = ::std::move(from);
  }

  inline db_trans_cli_usr_download_task& operator=(const db_trans_cli_usr_download_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_trans_cli_usr_download_task& operator=(db_trans_cli_usr_download_task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_trans_cli_usr_download_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const db_trans_cli_usr_download_task* internal_default_instance() {
    return reinterpret_cast<const db_trans_cli_usr_download_task*>(
               &_db_trans_cli_usr_download_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(db_trans_cli_usr_download_task* other);
  friend void swap(db_trans_cli_usr_download_task& a, db_trans_cli_usr_download_task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline db_trans_cli_usr_download_task* New() const final {
    return CreateMaybeMessage<db_trans_cli_usr_download_task>(nullptr);
  }

  db_trans_cli_usr_download_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_trans_cli_usr_download_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_trans_cli_usr_download_task& from);
  void MergeFrom(const db_trans_cli_usr_download_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_trans_cli_usr_download_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "db_trans_cli_usr_download_task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string remote_path = 2;
  int remote_path_size() const;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 2;
  const std::string& remote_path(int index) const;
  std::string* mutable_remote_path(int index);
  void set_remote_path(int index, const std::string& value);
  void set_remote_path(int index, std::string&& value);
  void set_remote_path(int index, const char* value);
  void set_remote_path(int index, const char* value, size_t size);
  std::string* add_remote_path();
  void add_remote_path(const std::string& value);
  void add_remote_path(std::string&& value);
  void add_remote_path(const char* value);
  void add_remote_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& remote_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_remote_path();

  // string root_path = 3;
  void clear_root_path();
  static const int kRootPathFieldNumber = 3;
  const std::string& root_path() const;
  void set_root_path(const std::string& value);
  void set_root_path(std::string&& value);
  void set_root_path(const char* value);
  void set_root_path(const char* value, size_t size);
  std::string* mutable_root_path();
  std::string* release_root_path();
  void set_allocated_root_path(std::string* root_path);

  // .db_trans_cli_usr_task cli_usr_task = 1;
  bool has_cli_usr_task() const;
  void clear_cli_usr_task();
  static const int kCliUsrTaskFieldNumber = 1;
  const ::db_trans_cli_usr_task& cli_usr_task() const;
  ::db_trans_cli_usr_task* release_cli_usr_task();
  ::db_trans_cli_usr_task* mutable_cli_usr_task();
  void set_allocated_cli_usr_task(::db_trans_cli_usr_task* cli_usr_task);

  // uint64 downloaded_received_file_size = 4;
  void clear_downloaded_received_file_size();
  static const int kDownloadedReceivedFileSizeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 downloaded_received_file_size() const;
  void set_downloaded_received_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 downloading_received_file_szie = 5;
  void clear_downloading_received_file_szie();
  static const int kDownloadingReceivedFileSzieFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 downloading_received_file_szie() const;
  void set_downloading_received_file_szie(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:db_trans_cli_usr_download_task)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> remote_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_path_;
  ::db_trans_cli_usr_task* cli_usr_task_;
  ::PROTOBUF_NAMESPACE_ID::uint64 downloaded_received_file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 downloading_received_file_szie_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trans_5ftask_2eproto;
};
// -------------------------------------------------------------------

class trans_cli_upload_task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans_cli_upload_task) */ {
 public:
  trans_cli_upload_task();
  virtual ~trans_cli_upload_task();

  trans_cli_upload_task(const trans_cli_upload_task& from);
  trans_cli_upload_task(trans_cli_upload_task&& from) noexcept
    : trans_cli_upload_task() {
    *this = ::std::move(from);
  }

  inline trans_cli_upload_task& operator=(const trans_cli_upload_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline trans_cli_upload_task& operator=(trans_cli_upload_task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const trans_cli_upload_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const trans_cli_upload_task* internal_default_instance() {
    return reinterpret_cast<const trans_cli_upload_task*>(
               &_trans_cli_upload_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(trans_cli_upload_task* other);
  friend void swap(trans_cli_upload_task& a, trans_cli_upload_task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trans_cli_upload_task* New() const final {
    return CreateMaybeMessage<trans_cli_upload_task>(nullptr);
  }

  trans_cli_upload_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<trans_cli_upload_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const trans_cli_upload_task& from);
  void MergeFrom(const trans_cli_upload_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(trans_cli_upload_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans_cli_upload_task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string usr_trans_id = 1;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 1;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // string file_path = 5;
  void clear_file_path();
  static const int kFilePathFieldNumber = 5;
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);

  // string remote_path = 6;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 6;
  const std::string& remote_path() const;
  void set_remote_path(const std::string& value);
  void set_remote_path(std::string&& value);
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  std::string* mutable_remote_path();
  std::string* release_remote_path();
  void set_allocated_remote_path(std::string* remote_path);

  // string trans_session_id = 10;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 10;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // int32 file_or_dir = 2;
  void clear_file_or_dir();
  static const int kFileOrDirFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir() const;
  void set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 process_type = 3;
  void clear_process_type();
  static const int kProcessTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type() const;
  void set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 file_size = 7;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 exchange_type = 4;
  void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type() const;
  void set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trans_status = 11;
  void clear_trans_status();
  static const int kTransStatusFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_status() const;
  void set_trans_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 total_file_blocks_count = 8;
  void clear_total_file_blocks_count();
  static const int kTotalFileBlocksCountFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count() const;
  void set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 next_file_block_num_to_send = 9;
  void clear_next_file_block_num_to_send();
  static const int kNextFileBlockNumToSendFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_file_block_num_to_send() const;
  void set_next_file_block_num_to_send(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_hash = 12;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash() const;
  void set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 max_received_file_block_num = 13;
  void clear_max_received_file_block_num();
  static const int kMaxReceivedFileBlockNumFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num() const;
  void set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 received_file_blocks_count = 14;
  void clear_received_file_blocks_count();
  static const int kReceivedFileBlocksCountFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_file_blocks_count() const;
  void set_received_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:trans_cli_upload_task)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_file_block_num_to_send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_file_blocks_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trans_5ftask_2eproto;
};
// -------------------------------------------------------------------

class trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    0 > SuperType;
  trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse();
  trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse& other);
  static const trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse*>(&_trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class trans_svr_upload_task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans_svr_upload_task) */ {
 public:
  trans_svr_upload_task();
  virtual ~trans_svr_upload_task();

  trans_svr_upload_task(const trans_svr_upload_task& from);
  trans_svr_upload_task(trans_svr_upload_task&& from) noexcept
    : trans_svr_upload_task() {
    *this = ::std::move(from);
  }

  inline trans_svr_upload_task& operator=(const trans_svr_upload_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline trans_svr_upload_task& operator=(trans_svr_upload_task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const trans_svr_upload_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const trans_svr_upload_task* internal_default_instance() {
    return reinterpret_cast<const trans_svr_upload_task*>(
               &_trans_svr_upload_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(trans_svr_upload_task* other);
  friend void swap(trans_svr_upload_task& a, trans_svr_upload_task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trans_svr_upload_task* New() const final {
    return CreateMaybeMessage<trans_svr_upload_task>(nullptr);
  }

  trans_svr_upload_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<trans_svr_upload_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const trans_svr_upload_task& from);
  void MergeFrom(const trans_svr_upload_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(trans_svr_upload_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans_svr_upload_task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint64, uint64> received_file_blocks_num = 14;
  int received_file_blocks_num_size() const;
  void clear_received_file_blocks_num();
  static const int kReceivedFileBlocksNumFieldNumber = 14;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      received_file_blocks_num() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_received_file_blocks_num();

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string usr_trans_id = 2;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 2;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // string file_path = 6;
  void clear_file_path();
  static const int kFilePathFieldNumber = 6;
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);

  // string store_file_path = 7;
  void clear_store_file_path();
  static const int kStoreFilePathFieldNumber = 7;
  const std::string& store_file_path() const;
  void set_store_file_path(const std::string& value);
  void set_store_file_path(std::string&& value);
  void set_store_file_path(const char* value);
  void set_store_file_path(const char* value, size_t size);
  std::string* mutable_store_file_path();
  std::string* release_store_file_path();
  void set_allocated_store_file_path(std::string* store_file_path);

  // string trans_session_id = 12;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 12;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // int32 file_or_dir = 3;
  void clear_file_or_dir();
  static const int kFileOrDirFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir() const;
  void set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 process_type = 4;
  void clear_process_type();
  static const int kProcessTypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type() const;
  void set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 total_file_blocks_count = 8;
  void clear_total_file_blocks_count();
  static const int kTotalFileBlocksCountFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count() const;
  void set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_size = 9;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 exchange_type = 5;
  void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type() const;
  void set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trans_status = 13;
  void clear_trans_status();
  static const int kTransStatusFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_status() const;
  void set_trans_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 max_received_file_block_num = 10;
  void clear_max_received_file_block_num();
  static const int kMaxReceivedFileBlockNumFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num() const;
  void set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_hash = 11;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash() const;
  void set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 last_resend_block_num = 15;
  void clear_last_resend_block_num();
  static const int kLastResendBlockNumFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_resend_block_num() const;
  void set_last_resend_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 transfer_rate = 16;
  void clear_transfer_rate();
  static const int kTransferRateFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::uint64 transfer_rate() const;
  void set_transfer_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:trans_svr_upload_task)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      0 > received_file_blocks_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_resend_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transfer_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trans_5ftask_2eproto;
};
// -------------------------------------------------------------------

class trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    0 > SuperType;
  trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse();
  trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse& other);
  static const trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse*>(&_trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class trans_cli_download_task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans_cli_download_task) */ {
 public:
  trans_cli_download_task();
  virtual ~trans_cli_download_task();

  trans_cli_download_task(const trans_cli_download_task& from);
  trans_cli_download_task(trans_cli_download_task&& from) noexcept
    : trans_cli_download_task() {
    *this = ::std::move(from);
  }

  inline trans_cli_download_task& operator=(const trans_cli_download_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline trans_cli_download_task& operator=(trans_cli_download_task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const trans_cli_download_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const trans_cli_download_task* internal_default_instance() {
    return reinterpret_cast<const trans_cli_download_task*>(
               &_trans_cli_download_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(trans_cli_download_task* other);
  friend void swap(trans_cli_download_task& a, trans_cli_download_task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trans_cli_download_task* New() const final {
    return CreateMaybeMessage<trans_cli_download_task>(nullptr);
  }

  trans_cli_download_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<trans_cli_download_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const trans_cli_download_task& from);
  void MergeFrom(const trans_cli_download_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(trans_cli_download_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans_cli_download_task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint64, uint64> received_file_blocks_num = 13;
  int received_file_blocks_num_size() const;
  void clear_received_file_blocks_num();
  static const int kReceivedFileBlocksNumFieldNumber = 13;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      received_file_blocks_num() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_received_file_blocks_num();

  // string usr_trans_id = 1;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 1;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // string file_path = 5;
  void clear_file_path();
  static const int kFilePathFieldNumber = 5;
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);

  // string store_file_path = 6;
  void clear_store_file_path();
  static const int kStoreFilePathFieldNumber = 6;
  const std::string& store_file_path() const;
  void set_store_file_path(const std::string& value);
  void set_store_file_path(std::string&& value);
  void set_store_file_path(const char* value);
  void set_store_file_path(const char* value, size_t size);
  std::string* mutable_store_file_path();
  std::string* release_store_file_path();
  void set_allocated_store_file_path(std::string* store_file_path);

  // string trans_session_id = 11;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 11;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // int32 file_or_dir = 2;
  void clear_file_or_dir();
  static const int kFileOrDirFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir() const;
  void set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 process_type = 3;
  void clear_process_type();
  static const int kProcessTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type() const;
  void set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 total_file_blocks_count = 7;
  void clear_total_file_blocks_count();
  static const int kTotalFileBlocksCountFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count() const;
  void set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_size = 8;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 exchange_type = 4;
  void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type() const;
  void set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trans_status = 12;
  void clear_trans_status();
  static const int kTransStatusFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_status() const;
  void set_trans_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 max_received_file_block_num = 9;
  void clear_max_received_file_block_num();
  static const int kMaxReceivedFileBlockNumFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num() const;
  void set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_hash = 10;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash() const;
  void set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 last_resend_block_num = 14;
  void clear_last_resend_block_num();
  static const int kLastResendBlockNumFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_resend_block_num() const;
  void set_last_resend_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 transfer_rate = 15;
  void clear_transfer_rate();
  static const int kTransferRateFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::uint64 transfer_rate() const;
  void set_transfer_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:trans_cli_download_task)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      0 > received_file_blocks_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_resend_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transfer_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trans_5ftask_2eproto;
};
// -------------------------------------------------------------------

class trans_svr_download_task :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trans_svr_download_task) */ {
 public:
  trans_svr_download_task();
  virtual ~trans_svr_download_task();

  trans_svr_download_task(const trans_svr_download_task& from);
  trans_svr_download_task(trans_svr_download_task&& from) noexcept
    : trans_svr_download_task() {
    *this = ::std::move(from);
  }

  inline trans_svr_download_task& operator=(const trans_svr_download_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline trans_svr_download_task& operator=(trans_svr_download_task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const trans_svr_download_task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const trans_svr_download_task* internal_default_instance() {
    return reinterpret_cast<const trans_svr_download_task*>(
               &_trans_svr_download_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(trans_svr_download_task* other);
  friend void swap(trans_svr_download_task& a, trans_svr_download_task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trans_svr_download_task* New() const final {
    return CreateMaybeMessage<trans_svr_download_task>(nullptr);
  }

  trans_svr_download_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<trans_svr_download_task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const trans_svr_download_task& from);
  void MergeFrom(const trans_svr_download_task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(trans_svr_download_task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trans_svr_download_task";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trans_5ftask_2eproto);
    return ::descriptor_table_trans_5ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string usr_trans_id = 2;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 2;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // string file_path = 6;
  void clear_file_path();
  static const int kFilePathFieldNumber = 6;
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);

  // string remote_path = 7;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 7;
  const std::string& remote_path() const;
  void set_remote_path(const std::string& value);
  void set_remote_path(std::string&& value);
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  std::string* mutable_remote_path();
  std::string* release_remote_path();
  void set_allocated_remote_path(std::string* remote_path);

  // string trans_session_id = 11;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 11;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // int32 file_or_dir = 3;
  void clear_file_or_dir();
  static const int kFileOrDirFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir() const;
  void set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 process_type = 4;
  void clear_process_type();
  static const int kProcessTypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type() const;
  void set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 file_size = 8;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 exchange_type = 5;
  void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type() const;
  void set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 trans_status = 12;
  void clear_trans_status();
  static const int kTransStatusFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_status() const;
  void set_trans_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 total_file_blocks_count = 9;
  void clear_total_file_blocks_count();
  static const int kTotalFileBlocksCountFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count() const;
  void set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 next_file_block_num_to_send = 10;
  void clear_next_file_block_num_to_send();
  static const int kNextFileBlockNumToSendFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_file_block_num_to_send() const;
  void set_next_file_block_num_to_send(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_hash = 13;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash() const;
  void set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 max_received_file_block_num = 14;
  void clear_max_received_file_block_num();
  static const int kMaxReceivedFileBlockNumFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num() const;
  void set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 received_file_blocks_count = 15;
  void clear_received_file_blocks_count();
  static const int kReceivedFileBlocksCountFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_file_blocks_count() const;
  void set_received_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:trans_svr_download_task)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_or_dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 trans_status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_file_block_num_to_send_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_file_blocks_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trans_5ftask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// db_net_entity

// string host = 1;
inline void db_net_entity::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_net_entity::host() const {
  // @@protoc_insertion_point(field_get:db_net_entity.host)
  return host_.GetNoArena();
}
inline void db_net_entity::set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_net_entity.host)
}
inline void db_net_entity::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_net_entity.host)
}
inline void db_net_entity::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_net_entity.host)
}
inline void db_net_entity::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_net_entity.host)
}
inline std::string* db_net_entity::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:db_net_entity.host)
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_net_entity::release_host() {
  // @@protoc_insertion_point(field_release:db_net_entity.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_net_entity::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:db_net_entity.host)
}

// string port = 2;
inline void db_net_entity::clear_port() {
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_net_entity::port() const {
  // @@protoc_insertion_point(field_get:db_net_entity.port)
  return port_.GetNoArena();
}
inline void db_net_entity::set_port(const std::string& value) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_net_entity.port)
}
inline void db_net_entity::set_port(std::string&& value) {
  
  port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_net_entity.port)
}
inline void db_net_entity::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_net_entity.port)
}
inline void db_net_entity::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_net_entity.port)
}
inline std::string* db_net_entity::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:db_net_entity.port)
  return port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_net_entity::release_port() {
  // @@protoc_insertion_point(field_release:db_net_entity.port)
  
  return port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_net_entity::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:db_net_entity.port)
}

// string protocol = 3;
inline void db_net_entity::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_net_entity::protocol() const {
  // @@protoc_insertion_point(field_get:db_net_entity.protocol)
  return protocol_.GetNoArena();
}
inline void db_net_entity::set_protocol(const std::string& value) {
  
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_net_entity.protocol)
}
inline void db_net_entity::set_protocol(std::string&& value) {
  
  protocol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_net_entity.protocol)
}
inline void db_net_entity::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_net_entity.protocol)
}
inline void db_net_entity::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_net_entity.protocol)
}
inline std::string* db_net_entity::mutable_protocol() {
  
  // @@protoc_insertion_point(field_mutable:db_net_entity.protocol)
  return protocol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_net_entity::release_protocol() {
  // @@protoc_insertion_point(field_release:db_net_entity.protocol)
  
  return protocol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_net_entity::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:db_net_entity.protocol)
}

// -------------------------------------------------------------------

// db_trans_progress

// string trans_session_id = 1;
inline void db_trans_progress::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_trans_progress::trans_session_id() const {
  // @@protoc_insertion_point(field_get:db_trans_progress.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void db_trans_progress::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_trans_progress.trans_session_id)
}
inline void db_trans_progress::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_trans_progress.trans_session_id)
}
inline void db_trans_progress::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_trans_progress.trans_session_id)
}
inline void db_trans_progress::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_trans_progress.trans_session_id)
}
inline std::string* db_trans_progress::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:db_trans_progress.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_trans_progress::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:db_trans_progress.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_trans_progress::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:db_trans_progress.trans_session_id)
}

// double progress = 2;
inline void db_trans_progress::clear_progress() {
  progress_ = 0;
}
inline double db_trans_progress::progress() const {
  // @@protoc_insertion_point(field_get:db_trans_progress.progress)
  return progress_;
}
inline void db_trans_progress::set_progress(double value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:db_trans_progress.progress)
}

// int32 trans_size = 3;
inline void db_trans_progress::clear_trans_size() {
  trans_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_trans_progress::trans_size() const {
  // @@protoc_insertion_point(field_get:db_trans_progress.trans_size)
  return trans_size_;
}
inline void db_trans_progress::set_trans_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trans_size_ = value;
  // @@protoc_insertion_point(field_set:db_trans_progress.trans_size)
}

// int32 total_size = 4;
inline void db_trans_progress::clear_total_size() {
  total_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_trans_progress::total_size() const {
  // @@protoc_insertion_point(field_get:db_trans_progress.total_size)
  return total_size_;
}
inline void db_trans_progress::set_total_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:db_trans_progress.total_size)
}

// string remote_path = 5;
inline void db_trans_progress::clear_remote_path() {
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_trans_progress::remote_path() const {
  // @@protoc_insertion_point(field_get:db_trans_progress.remote_path)
  return remote_path_.GetNoArena();
}
inline void db_trans_progress::set_remote_path(const std::string& value) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_trans_progress.remote_path)
}
inline void db_trans_progress::set_remote_path(std::string&& value) {
  
  remote_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_trans_progress.remote_path)
}
inline void db_trans_progress::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_trans_progress.remote_path)
}
inline void db_trans_progress::set_remote_path(const char* value, size_t size) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_trans_progress.remote_path)
}
inline std::string* db_trans_progress::mutable_remote_path() {
  
  // @@protoc_insertion_point(field_mutable:db_trans_progress.remote_path)
  return remote_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_trans_progress::release_remote_path() {
  // @@protoc_insertion_point(field_release:db_trans_progress.remote_path)
  
  return remote_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_trans_progress::set_allocated_remote_path(std::string* remote_path) {
  if (remote_path != nullptr) {
    
  } else {
    
  }
  remote_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_path);
  // @@protoc_insertion_point(field_set_allocated:db_trans_progress.remote_path)
}

// -------------------------------------------------------------------

// db_trans_cli_usr_task

// .db_trans_progress progress = 1;
inline bool db_trans_cli_usr_task::has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline void db_trans_cli_usr_task::clear_progress() {
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
inline const ::db_trans_progress& db_trans_cli_usr_task::progress() const {
  const ::db_trans_progress* p = progress_;
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_task.progress)
  return p != nullptr ? *p : *reinterpret_cast<const ::db_trans_progress*>(
      &::_db_trans_progress_default_instance_);
}
inline ::db_trans_progress* db_trans_cli_usr_task::release_progress() {
  // @@protoc_insertion_point(field_release:db_trans_cli_usr_task.progress)
  
  ::db_trans_progress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::db_trans_progress* db_trans_cli_usr_task::mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::db_trans_progress>(GetArenaNoVirtual());
    progress_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_task.progress)
  return progress_;
}
inline void db_trans_cli_usr_task::set_allocated_progress(::db_trans_progress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete progress_;
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:db_trans_cli_usr_task.progress)
}

// string trans_id = 2;
inline void db_trans_cli_usr_task::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_trans_cli_usr_task::trans_id() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_task.trans_id)
  return trans_id_.GetNoArena();
}
inline void db_trans_cli_usr_task::set_trans_id(const std::string& value) {
  
  trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_task.trans_id)
}
inline void db_trans_cli_usr_task::set_trans_id(std::string&& value) {
  
  trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_trans_cli_usr_task.trans_id)
}
inline void db_trans_cli_usr_task::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_trans_cli_usr_task.trans_id)
}
inline void db_trans_cli_usr_task::set_trans_id(const char* value, size_t size) {
  
  trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_trans_cli_usr_task.trans_id)
}
inline std::string* db_trans_cli_usr_task::mutable_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_task.trans_id)
  return trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_trans_cli_usr_task::release_trans_id() {
  // @@protoc_insertion_point(field_release:db_trans_cli_usr_task.trans_id)
  
  return trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_trans_cli_usr_task::set_allocated_trans_id(std::string* trans_id) {
  if (trans_id != nullptr) {
    
  } else {
    
  }
  trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:db_trans_cli_usr_task.trans_id)
}

// string direction = 3;
inline void db_trans_cli_usr_task::clear_direction() {
  direction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_trans_cli_usr_task::direction() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_task.direction)
  return direction_.GetNoArena();
}
inline void db_trans_cli_usr_task::set_direction(const std::string& value) {
  
  direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_task.direction)
}
inline void db_trans_cli_usr_task::set_direction(std::string&& value) {
  
  direction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_trans_cli_usr_task.direction)
}
inline void db_trans_cli_usr_task::set_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_trans_cli_usr_task.direction)
}
inline void db_trans_cli_usr_task::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_trans_cli_usr_task.direction)
}
inline std::string* db_trans_cli_usr_task::mutable_direction() {
  
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_task.direction)
  return direction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_trans_cli_usr_task::release_direction() {
  // @@protoc_insertion_point(field_release:db_trans_cli_usr_task.direction)
  
  return direction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_trans_cli_usr_task::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:db_trans_cli_usr_task.direction)
}

// int32 file_or_dir = 4;
inline void db_trans_cli_usr_task::clear_file_or_dir() {
  file_or_dir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 db_trans_cli_usr_task::file_or_dir() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_task.file_or_dir)
  return file_or_dir_;
}
inline void db_trans_cli_usr_task::set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  file_or_dir_ = value;
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_task.file_or_dir)
}

// repeated .db_net_entity addr = 5;
inline int db_trans_cli_usr_task::addr_size() const {
  return addr_.size();
}
inline void db_trans_cli_usr_task::clear_addr() {
  addr_.Clear();
}
inline ::db_net_entity* db_trans_cli_usr_task::mutable_addr(int index) {
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_task.addr)
  return addr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_net_entity >*
db_trans_cli_usr_task::mutable_addr() {
  // @@protoc_insertion_point(field_mutable_list:db_trans_cli_usr_task.addr)
  return &addr_;
}
inline const ::db_net_entity& db_trans_cli_usr_task::addr(int index) const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_task.addr)
  return addr_.Get(index);
}
inline ::db_net_entity* db_trans_cli_usr_task::add_addr() {
  // @@protoc_insertion_point(field_add:db_trans_cli_usr_task.addr)
  return addr_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::db_net_entity >&
db_trans_cli_usr_task::addr() const {
  // @@protoc_insertion_point(field_list:db_trans_cli_usr_task.addr)
  return addr_;
}

// string local_path = 6;
inline void db_trans_cli_usr_task::clear_local_path() {
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_trans_cli_usr_task::local_path() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_task.local_path)
  return local_path_.GetNoArena();
}
inline void db_trans_cli_usr_task::set_local_path(const std::string& value) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_task.local_path)
}
inline void db_trans_cli_usr_task::set_local_path(std::string&& value) {
  
  local_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_trans_cli_usr_task.local_path)
}
inline void db_trans_cli_usr_task::set_local_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_trans_cli_usr_task.local_path)
}
inline void db_trans_cli_usr_task::set_local_path(const char* value, size_t size) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_trans_cli_usr_task.local_path)
}
inline std::string* db_trans_cli_usr_task::mutable_local_path() {
  
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_task.local_path)
  return local_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_trans_cli_usr_task::release_local_path() {
  // @@protoc_insertion_point(field_release:db_trans_cli_usr_task.local_path)
  
  return local_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_trans_cli_usr_task::set_allocated_local_path(std::string* local_path) {
  if (local_path != nullptr) {
    
  } else {
    
  }
  local_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_path);
  // @@protoc_insertion_point(field_set_allocated:db_trans_cli_usr_task.local_path)
}

// -------------------------------------------------------------------

// db_trans_cli_usr_upload_task

// .db_trans_cli_usr_task cli_usr_task = 1;
inline bool db_trans_cli_usr_upload_task::has_cli_usr_task() const {
  return this != internal_default_instance() && cli_usr_task_ != nullptr;
}
inline void db_trans_cli_usr_upload_task::clear_cli_usr_task() {
  if (GetArenaNoVirtual() == nullptr && cli_usr_task_ != nullptr) {
    delete cli_usr_task_;
  }
  cli_usr_task_ = nullptr;
}
inline const ::db_trans_cli_usr_task& db_trans_cli_usr_upload_task::cli_usr_task() const {
  const ::db_trans_cli_usr_task* p = cli_usr_task_;
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_upload_task.cli_usr_task)
  return p != nullptr ? *p : *reinterpret_cast<const ::db_trans_cli_usr_task*>(
      &::_db_trans_cli_usr_task_default_instance_);
}
inline ::db_trans_cli_usr_task* db_trans_cli_usr_upload_task::release_cli_usr_task() {
  // @@protoc_insertion_point(field_release:db_trans_cli_usr_upload_task.cli_usr_task)
  
  ::db_trans_cli_usr_task* temp = cli_usr_task_;
  cli_usr_task_ = nullptr;
  return temp;
}
inline ::db_trans_cli_usr_task* db_trans_cli_usr_upload_task::mutable_cli_usr_task() {
  
  if (cli_usr_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::db_trans_cli_usr_task>(GetArenaNoVirtual());
    cli_usr_task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_upload_task.cli_usr_task)
  return cli_usr_task_;
}
inline void db_trans_cli_usr_upload_task::set_allocated_cli_usr_task(::db_trans_cli_usr_task* cli_usr_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cli_usr_task_;
  }
  if (cli_usr_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cli_usr_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cli_usr_task, submessage_arena);
    }
    
  } else {
    
  }
  cli_usr_task_ = cli_usr_task;
  // @@protoc_insertion_point(field_set_allocated:db_trans_cli_usr_upload_task.cli_usr_task)
}

// string remote_path = 2;
inline void db_trans_cli_usr_upload_task::clear_remote_path() {
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_trans_cli_usr_upload_task::remote_path() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_upload_task.remote_path)
  return remote_path_.GetNoArena();
}
inline void db_trans_cli_usr_upload_task::set_remote_path(const std::string& value) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_upload_task.remote_path)
}
inline void db_trans_cli_usr_upload_task::set_remote_path(std::string&& value) {
  
  remote_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_trans_cli_usr_upload_task.remote_path)
}
inline void db_trans_cli_usr_upload_task::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_trans_cli_usr_upload_task.remote_path)
}
inline void db_trans_cli_usr_upload_task::set_remote_path(const char* value, size_t size) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_trans_cli_usr_upload_task.remote_path)
}
inline std::string* db_trans_cli_usr_upload_task::mutable_remote_path() {
  
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_upload_task.remote_path)
  return remote_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_trans_cli_usr_upload_task::release_remote_path() {
  // @@protoc_insertion_point(field_release:db_trans_cli_usr_upload_task.remote_path)
  
  return remote_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_trans_cli_usr_upload_task::set_allocated_remote_path(std::string* remote_path) {
  if (remote_path != nullptr) {
    
  } else {
    
  }
  remote_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_path);
  // @@protoc_insertion_point(field_set_allocated:db_trans_cli_usr_upload_task.remote_path)
}

// string root_path = 3;
inline void db_trans_cli_usr_upload_task::clear_root_path() {
  root_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_trans_cli_usr_upload_task::root_path() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_upload_task.root_path)
  return root_path_.GetNoArena();
}
inline void db_trans_cli_usr_upload_task::set_root_path(const std::string& value) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_upload_task.root_path)
}
inline void db_trans_cli_usr_upload_task::set_root_path(std::string&& value) {
  
  root_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_trans_cli_usr_upload_task.root_path)
}
inline void db_trans_cli_usr_upload_task::set_root_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_trans_cli_usr_upload_task.root_path)
}
inline void db_trans_cli_usr_upload_task::set_root_path(const char* value, size_t size) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_trans_cli_usr_upload_task.root_path)
}
inline std::string* db_trans_cli_usr_upload_task::mutable_root_path() {
  
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_upload_task.root_path)
  return root_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_trans_cli_usr_upload_task::release_root_path() {
  // @@protoc_insertion_point(field_release:db_trans_cli_usr_upload_task.root_path)
  
  return root_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_trans_cli_usr_upload_task::set_allocated_root_path(std::string* root_path) {
  if (root_path != nullptr) {
    
  } else {
    
  }
  root_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_path);
  // @@protoc_insertion_point(field_set_allocated:db_trans_cli_usr_upload_task.root_path)
}

// repeated string upload_file = 4;
inline int db_trans_cli_usr_upload_task::upload_file_size() const {
  return upload_file_.size();
}
inline void db_trans_cli_usr_upload_task::clear_upload_file() {
  upload_file_.Clear();
}
inline const std::string& db_trans_cli_usr_upload_task::upload_file(int index) const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_upload_task.upload_file)
  return upload_file_.Get(index);
}
inline std::string* db_trans_cli_usr_upload_task::mutable_upload_file(int index) {
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_upload_task.upload_file)
  return upload_file_.Mutable(index);
}
inline void db_trans_cli_usr_upload_task::set_upload_file(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_upload_task.upload_file)
  upload_file_.Mutable(index)->assign(value);
}
inline void db_trans_cli_usr_upload_task::set_upload_file(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_upload_task.upload_file)
  upload_file_.Mutable(index)->assign(std::move(value));
}
inline void db_trans_cli_usr_upload_task::set_upload_file(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  upload_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db_trans_cli_usr_upload_task.upload_file)
}
inline void db_trans_cli_usr_upload_task::set_upload_file(int index, const char* value, size_t size) {
  upload_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_trans_cli_usr_upload_task.upload_file)
}
inline std::string* db_trans_cli_usr_upload_task::add_upload_file() {
  // @@protoc_insertion_point(field_add_mutable:db_trans_cli_usr_upload_task.upload_file)
  return upload_file_.Add();
}
inline void db_trans_cli_usr_upload_task::add_upload_file(const std::string& value) {
  upload_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db_trans_cli_usr_upload_task.upload_file)
}
inline void db_trans_cli_usr_upload_task::add_upload_file(std::string&& value) {
  upload_file_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db_trans_cli_usr_upload_task.upload_file)
}
inline void db_trans_cli_usr_upload_task::add_upload_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  upload_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db_trans_cli_usr_upload_task.upload_file)
}
inline void db_trans_cli_usr_upload_task::add_upload_file(const char* value, size_t size) {
  upload_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db_trans_cli_usr_upload_task.upload_file)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
db_trans_cli_usr_upload_task::upload_file() const {
  // @@protoc_insertion_point(field_list:db_trans_cli_usr_upload_task.upload_file)
  return upload_file_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
db_trans_cli_usr_upload_task::mutable_upload_file() {
  // @@protoc_insertion_point(field_mutable_list:db_trans_cli_usr_upload_task.upload_file)
  return &upload_file_;
}

// uint64 uploaded_received_file_size = 5;
inline void db_trans_cli_usr_upload_task::clear_uploaded_received_file_size() {
  uploaded_received_file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 db_trans_cli_usr_upload_task::uploaded_received_file_size() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_upload_task.uploaded_received_file_size)
  return uploaded_received_file_size_;
}
inline void db_trans_cli_usr_upload_task::set_uploaded_received_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uploaded_received_file_size_ = value;
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_upload_task.uploaded_received_file_size)
}

// uint64 uploading_received_file_szie = 6;
inline void db_trans_cli_usr_upload_task::clear_uploading_received_file_szie() {
  uploading_received_file_szie_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 db_trans_cli_usr_upload_task::uploading_received_file_szie() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_upload_task.uploading_received_file_szie)
  return uploading_received_file_szie_;
}
inline void db_trans_cli_usr_upload_task::set_uploading_received_file_szie(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uploading_received_file_szie_ = value;
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_upload_task.uploading_received_file_szie)
}

// -------------------------------------------------------------------

// db_trans_cli_usr_download_task

// .db_trans_cli_usr_task cli_usr_task = 1;
inline bool db_trans_cli_usr_download_task::has_cli_usr_task() const {
  return this != internal_default_instance() && cli_usr_task_ != nullptr;
}
inline void db_trans_cli_usr_download_task::clear_cli_usr_task() {
  if (GetArenaNoVirtual() == nullptr && cli_usr_task_ != nullptr) {
    delete cli_usr_task_;
  }
  cli_usr_task_ = nullptr;
}
inline const ::db_trans_cli_usr_task& db_trans_cli_usr_download_task::cli_usr_task() const {
  const ::db_trans_cli_usr_task* p = cli_usr_task_;
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_download_task.cli_usr_task)
  return p != nullptr ? *p : *reinterpret_cast<const ::db_trans_cli_usr_task*>(
      &::_db_trans_cli_usr_task_default_instance_);
}
inline ::db_trans_cli_usr_task* db_trans_cli_usr_download_task::release_cli_usr_task() {
  // @@protoc_insertion_point(field_release:db_trans_cli_usr_download_task.cli_usr_task)
  
  ::db_trans_cli_usr_task* temp = cli_usr_task_;
  cli_usr_task_ = nullptr;
  return temp;
}
inline ::db_trans_cli_usr_task* db_trans_cli_usr_download_task::mutable_cli_usr_task() {
  
  if (cli_usr_task_ == nullptr) {
    auto* p = CreateMaybeMessage<::db_trans_cli_usr_task>(GetArenaNoVirtual());
    cli_usr_task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_download_task.cli_usr_task)
  return cli_usr_task_;
}
inline void db_trans_cli_usr_download_task::set_allocated_cli_usr_task(::db_trans_cli_usr_task* cli_usr_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cli_usr_task_;
  }
  if (cli_usr_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cli_usr_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cli_usr_task, submessage_arena);
    }
    
  } else {
    
  }
  cli_usr_task_ = cli_usr_task;
  // @@protoc_insertion_point(field_set_allocated:db_trans_cli_usr_download_task.cli_usr_task)
}

// repeated string remote_path = 2;
inline int db_trans_cli_usr_download_task::remote_path_size() const {
  return remote_path_.size();
}
inline void db_trans_cli_usr_download_task::clear_remote_path() {
  remote_path_.Clear();
}
inline const std::string& db_trans_cli_usr_download_task::remote_path(int index) const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_download_task.remote_path)
  return remote_path_.Get(index);
}
inline std::string* db_trans_cli_usr_download_task::mutable_remote_path(int index) {
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_download_task.remote_path)
  return remote_path_.Mutable(index);
}
inline void db_trans_cli_usr_download_task::set_remote_path(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_download_task.remote_path)
  remote_path_.Mutable(index)->assign(value);
}
inline void db_trans_cli_usr_download_task::set_remote_path(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_download_task.remote_path)
  remote_path_.Mutable(index)->assign(std::move(value));
}
inline void db_trans_cli_usr_download_task::set_remote_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remote_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:db_trans_cli_usr_download_task.remote_path)
}
inline void db_trans_cli_usr_download_task::set_remote_path(int index, const char* value, size_t size) {
  remote_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:db_trans_cli_usr_download_task.remote_path)
}
inline std::string* db_trans_cli_usr_download_task::add_remote_path() {
  // @@protoc_insertion_point(field_add_mutable:db_trans_cli_usr_download_task.remote_path)
  return remote_path_.Add();
}
inline void db_trans_cli_usr_download_task::add_remote_path(const std::string& value) {
  remote_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:db_trans_cli_usr_download_task.remote_path)
}
inline void db_trans_cli_usr_download_task::add_remote_path(std::string&& value) {
  remote_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:db_trans_cli_usr_download_task.remote_path)
}
inline void db_trans_cli_usr_download_task::add_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remote_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:db_trans_cli_usr_download_task.remote_path)
}
inline void db_trans_cli_usr_download_task::add_remote_path(const char* value, size_t size) {
  remote_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:db_trans_cli_usr_download_task.remote_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
db_trans_cli_usr_download_task::remote_path() const {
  // @@protoc_insertion_point(field_list:db_trans_cli_usr_download_task.remote_path)
  return remote_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
db_trans_cli_usr_download_task::mutable_remote_path() {
  // @@protoc_insertion_point(field_mutable_list:db_trans_cli_usr_download_task.remote_path)
  return &remote_path_;
}

// string root_path = 3;
inline void db_trans_cli_usr_download_task::clear_root_path() {
  root_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& db_trans_cli_usr_download_task::root_path() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_download_task.root_path)
  return root_path_.GetNoArena();
}
inline void db_trans_cli_usr_download_task::set_root_path(const std::string& value) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_download_task.root_path)
}
inline void db_trans_cli_usr_download_task::set_root_path(std::string&& value) {
  
  root_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db_trans_cli_usr_download_task.root_path)
}
inline void db_trans_cli_usr_download_task::set_root_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db_trans_cli_usr_download_task.root_path)
}
inline void db_trans_cli_usr_download_task::set_root_path(const char* value, size_t size) {
  
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db_trans_cli_usr_download_task.root_path)
}
inline std::string* db_trans_cli_usr_download_task::mutable_root_path() {
  
  // @@protoc_insertion_point(field_mutable:db_trans_cli_usr_download_task.root_path)
  return root_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* db_trans_cli_usr_download_task::release_root_path() {
  // @@protoc_insertion_point(field_release:db_trans_cli_usr_download_task.root_path)
  
  return root_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void db_trans_cli_usr_download_task::set_allocated_root_path(std::string* root_path) {
  if (root_path != nullptr) {
    
  } else {
    
  }
  root_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_path);
  // @@protoc_insertion_point(field_set_allocated:db_trans_cli_usr_download_task.root_path)
}

// uint64 downloaded_received_file_size = 4;
inline void db_trans_cli_usr_download_task::clear_downloaded_received_file_size() {
  downloaded_received_file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 db_trans_cli_usr_download_task::downloaded_received_file_size() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_download_task.downloaded_received_file_size)
  return downloaded_received_file_size_;
}
inline void db_trans_cli_usr_download_task::set_downloaded_received_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  downloaded_received_file_size_ = value;
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_download_task.downloaded_received_file_size)
}

// uint64 downloading_received_file_szie = 5;
inline void db_trans_cli_usr_download_task::clear_downloading_received_file_szie() {
  downloading_received_file_szie_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 db_trans_cli_usr_download_task::downloading_received_file_szie() const {
  // @@protoc_insertion_point(field_get:db_trans_cli_usr_download_task.downloading_received_file_szie)
  return downloading_received_file_szie_;
}
inline void db_trans_cli_usr_download_task::set_downloading_received_file_szie(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  downloading_received_file_szie_ = value;
  // @@protoc_insertion_point(field_set:db_trans_cli_usr_download_task.downloading_received_file_szie)
}

// -------------------------------------------------------------------

// trans_cli_upload_task

// string usr_trans_id = 1;
inline void trans_cli_upload_task::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_cli_upload_task::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void trans_cli_upload_task::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.usr_trans_id)
}
inline void trans_cli_upload_task::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_cli_upload_task.usr_trans_id)
}
inline void trans_cli_upload_task::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_cli_upload_task.usr_trans_id)
}
inline void trans_cli_upload_task::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_cli_upload_task.usr_trans_id)
}
inline std::string* trans_cli_upload_task::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_cli_upload_task.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_cli_upload_task::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:trans_cli_upload_task.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_cli_upload_task::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:trans_cli_upload_task.usr_trans_id)
}

// int32 file_or_dir = 2;
inline void trans_cli_upload_task::clear_file_or_dir() {
  file_or_dir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_cli_upload_task::file_or_dir() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.file_or_dir)
  return file_or_dir_;
}
inline void trans_cli_upload_task::set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  file_or_dir_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.file_or_dir)
}

// int32 process_type = 3;
inline void trans_cli_upload_task::clear_process_type() {
  process_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_cli_upload_task::process_type() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.process_type)
  return process_type_;
}
inline void trans_cli_upload_task::set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  process_type_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.process_type)
}

// int32 exchange_type = 4;
inline void trans_cli_upload_task::clear_exchange_type() {
  exchange_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_cli_upload_task::exchange_type() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.exchange_type)
  return exchange_type_;
}
inline void trans_cli_upload_task::set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_type_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.exchange_type)
}

// string file_path = 5;
inline void trans_cli_upload_task::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_cli_upload_task::file_path() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.file_path)
  return file_path_.GetNoArena();
}
inline void trans_cli_upload_task::set_file_path(const std::string& value) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.file_path)
}
inline void trans_cli_upload_task::set_file_path(std::string&& value) {
  
  file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_cli_upload_task.file_path)
}
inline void trans_cli_upload_task::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_cli_upload_task.file_path)
}
inline void trans_cli_upload_task::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_cli_upload_task.file_path)
}
inline std::string* trans_cli_upload_task::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:trans_cli_upload_task.file_path)
  return file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_cli_upload_task::release_file_path() {
  // @@protoc_insertion_point(field_release:trans_cli_upload_task.file_path)
  
  return file_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_cli_upload_task::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:trans_cli_upload_task.file_path)
}

// string remote_path = 6;
inline void trans_cli_upload_task::clear_remote_path() {
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_cli_upload_task::remote_path() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.remote_path)
  return remote_path_.GetNoArena();
}
inline void trans_cli_upload_task::set_remote_path(const std::string& value) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.remote_path)
}
inline void trans_cli_upload_task::set_remote_path(std::string&& value) {
  
  remote_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_cli_upload_task.remote_path)
}
inline void trans_cli_upload_task::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_cli_upload_task.remote_path)
}
inline void trans_cli_upload_task::set_remote_path(const char* value, size_t size) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_cli_upload_task.remote_path)
}
inline std::string* trans_cli_upload_task::mutable_remote_path() {
  
  // @@protoc_insertion_point(field_mutable:trans_cli_upload_task.remote_path)
  return remote_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_cli_upload_task::release_remote_path() {
  // @@protoc_insertion_point(field_release:trans_cli_upload_task.remote_path)
  
  return remote_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_cli_upload_task::set_allocated_remote_path(std::string* remote_path) {
  if (remote_path != nullptr) {
    
  } else {
    
  }
  remote_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_path);
  // @@protoc_insertion_point(field_set_allocated:trans_cli_upload_task.remote_path)
}

// uint64 file_size = 7;
inline void trans_cli_upload_task::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_upload_task::file_size() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.file_size)
  return file_size_;
}
inline void trans_cli_upload_task::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.file_size)
}

// uint64 total_file_blocks_count = 8;
inline void trans_cli_upload_task::clear_total_file_blocks_count() {
  total_file_blocks_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_upload_task::total_file_blocks_count() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.total_file_blocks_count)
  return total_file_blocks_count_;
}
inline void trans_cli_upload_task::set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_file_blocks_count_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.total_file_blocks_count)
}

// uint64 next_file_block_num_to_send = 9;
inline void trans_cli_upload_task::clear_next_file_block_num_to_send() {
  next_file_block_num_to_send_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_upload_task::next_file_block_num_to_send() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.next_file_block_num_to_send)
  return next_file_block_num_to_send_;
}
inline void trans_cli_upload_task::set_next_file_block_num_to_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  next_file_block_num_to_send_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.next_file_block_num_to_send)
}

// string trans_session_id = 10;
inline void trans_cli_upload_task::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_cli_upload_task::trans_session_id() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void trans_cli_upload_task::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.trans_session_id)
}
inline void trans_cli_upload_task::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_cli_upload_task.trans_session_id)
}
inline void trans_cli_upload_task::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_cli_upload_task.trans_session_id)
}
inline void trans_cli_upload_task::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_cli_upload_task.trans_session_id)
}
inline std::string* trans_cli_upload_task::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_cli_upload_task.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_cli_upload_task::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:trans_cli_upload_task.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_cli_upload_task::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:trans_cli_upload_task.trans_session_id)
}

// int32 trans_status = 11;
inline void trans_cli_upload_task::clear_trans_status() {
  trans_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_cli_upload_task::trans_status() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.trans_status)
  return trans_status_;
}
inline void trans_cli_upload_task::set_trans_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trans_status_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.trans_status)
}

// uint64 file_hash = 12;
inline void trans_cli_upload_task::clear_file_hash() {
  file_hash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_upload_task::file_hash() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.file_hash)
  return file_hash_;
}
inline void trans_cli_upload_task::set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_hash_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.file_hash)
}

// uint64 max_received_file_block_num = 13;
inline void trans_cli_upload_task::clear_max_received_file_block_num() {
  max_received_file_block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_upload_task::max_received_file_block_num() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.max_received_file_block_num)
  return max_received_file_block_num_;
}
inline void trans_cli_upload_task::set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_received_file_block_num_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.max_received_file_block_num)
}

// uint64 received_file_blocks_count = 14;
inline void trans_cli_upload_task::clear_received_file_blocks_count() {
  received_file_blocks_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_upload_task::received_file_blocks_count() const {
  // @@protoc_insertion_point(field_get:trans_cli_upload_task.received_file_blocks_count)
  return received_file_blocks_count_;
}
inline void trans_cli_upload_task::set_received_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  received_file_blocks_count_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_upload_task.received_file_blocks_count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// trans_svr_upload_task

// string node_id = 1;
inline void trans_svr_upload_task::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_upload_task::node_id() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.node_id)
  return node_id_.GetNoArena();
}
inline void trans_svr_upload_task::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.node_id)
}
inline void trans_svr_upload_task::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_upload_task.node_id)
}
inline void trans_svr_upload_task::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_upload_task.node_id)
}
inline void trans_svr_upload_task::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_upload_task.node_id)
}
inline std::string* trans_svr_upload_task::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_upload_task.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_upload_task::release_node_id() {
  // @@protoc_insertion_point(field_release:trans_svr_upload_task.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_upload_task::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_upload_task.node_id)
}

// string usr_trans_id = 2;
inline void trans_svr_upload_task::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_upload_task::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void trans_svr_upload_task::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.usr_trans_id)
}
inline void trans_svr_upload_task::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_upload_task.usr_trans_id)
}
inline void trans_svr_upload_task::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_upload_task.usr_trans_id)
}
inline void trans_svr_upload_task::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_upload_task.usr_trans_id)
}
inline std::string* trans_svr_upload_task::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_upload_task.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_upload_task::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:trans_svr_upload_task.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_upload_task::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_upload_task.usr_trans_id)
}

// int32 file_or_dir = 3;
inline void trans_svr_upload_task::clear_file_or_dir() {
  file_or_dir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_svr_upload_task::file_or_dir() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.file_or_dir)
  return file_or_dir_;
}
inline void trans_svr_upload_task::set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  file_or_dir_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.file_or_dir)
}

// int32 process_type = 4;
inline void trans_svr_upload_task::clear_process_type() {
  process_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_svr_upload_task::process_type() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.process_type)
  return process_type_;
}
inline void trans_svr_upload_task::set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  process_type_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.process_type)
}

// int32 exchange_type = 5;
inline void trans_svr_upload_task::clear_exchange_type() {
  exchange_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_svr_upload_task::exchange_type() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.exchange_type)
  return exchange_type_;
}
inline void trans_svr_upload_task::set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_type_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.exchange_type)
}

// string file_path = 6;
inline void trans_svr_upload_task::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_upload_task::file_path() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.file_path)
  return file_path_.GetNoArena();
}
inline void trans_svr_upload_task::set_file_path(const std::string& value) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.file_path)
}
inline void trans_svr_upload_task::set_file_path(std::string&& value) {
  
  file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_upload_task.file_path)
}
inline void trans_svr_upload_task::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_upload_task.file_path)
}
inline void trans_svr_upload_task::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_upload_task.file_path)
}
inline std::string* trans_svr_upload_task::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_upload_task.file_path)
  return file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_upload_task::release_file_path() {
  // @@protoc_insertion_point(field_release:trans_svr_upload_task.file_path)
  
  return file_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_upload_task::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_upload_task.file_path)
}

// string store_file_path = 7;
inline void trans_svr_upload_task::clear_store_file_path() {
  store_file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_upload_task::store_file_path() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.store_file_path)
  return store_file_path_.GetNoArena();
}
inline void trans_svr_upload_task::set_store_file_path(const std::string& value) {
  
  store_file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.store_file_path)
}
inline void trans_svr_upload_task::set_store_file_path(std::string&& value) {
  
  store_file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_upload_task.store_file_path)
}
inline void trans_svr_upload_task::set_store_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_upload_task.store_file_path)
}
inline void trans_svr_upload_task::set_store_file_path(const char* value, size_t size) {
  
  store_file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_upload_task.store_file_path)
}
inline std::string* trans_svr_upload_task::mutable_store_file_path() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_upload_task.store_file_path)
  return store_file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_upload_task::release_store_file_path() {
  // @@protoc_insertion_point(field_release:trans_svr_upload_task.store_file_path)
  
  return store_file_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_upload_task::set_allocated_store_file_path(std::string* store_file_path) {
  if (store_file_path != nullptr) {
    
  } else {
    
  }
  store_file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_file_path);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_upload_task.store_file_path)
}

// uint64 total_file_blocks_count = 8;
inline void trans_svr_upload_task::clear_total_file_blocks_count() {
  total_file_blocks_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_upload_task::total_file_blocks_count() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.total_file_blocks_count)
  return total_file_blocks_count_;
}
inline void trans_svr_upload_task::set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_file_blocks_count_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.total_file_blocks_count)
}

// uint64 file_size = 9;
inline void trans_svr_upload_task::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_upload_task::file_size() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.file_size)
  return file_size_;
}
inline void trans_svr_upload_task::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.file_size)
}

// uint64 max_received_file_block_num = 10;
inline void trans_svr_upload_task::clear_max_received_file_block_num() {
  max_received_file_block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_upload_task::max_received_file_block_num() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.max_received_file_block_num)
  return max_received_file_block_num_;
}
inline void trans_svr_upload_task::set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_received_file_block_num_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.max_received_file_block_num)
}

// uint64 file_hash = 11;
inline void trans_svr_upload_task::clear_file_hash() {
  file_hash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_upload_task::file_hash() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.file_hash)
  return file_hash_;
}
inline void trans_svr_upload_task::set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_hash_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.file_hash)
}

// string trans_session_id = 12;
inline void trans_svr_upload_task::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_upload_task::trans_session_id() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void trans_svr_upload_task::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.trans_session_id)
}
inline void trans_svr_upload_task::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_upload_task.trans_session_id)
}
inline void trans_svr_upload_task::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_upload_task.trans_session_id)
}
inline void trans_svr_upload_task::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_upload_task.trans_session_id)
}
inline std::string* trans_svr_upload_task::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_upload_task.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_upload_task::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:trans_svr_upload_task.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_upload_task::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_upload_task.trans_session_id)
}

// int32 trans_status = 13;
inline void trans_svr_upload_task::clear_trans_status() {
  trans_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_svr_upload_task::trans_status() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.trans_status)
  return trans_status_;
}
inline void trans_svr_upload_task::set_trans_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trans_status_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.trans_status)
}

// map<uint64, uint64> received_file_blocks_num = 14;
inline int trans_svr_upload_task::received_file_blocks_num_size() const {
  return received_file_blocks_num_.size();
}
inline void trans_svr_upload_task::clear_received_file_blocks_num() {
  received_file_blocks_num_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >&
trans_svr_upload_task::received_file_blocks_num() const {
  // @@protoc_insertion_point(field_map:trans_svr_upload_task.received_file_blocks_num)
  return received_file_blocks_num_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >*
trans_svr_upload_task::mutable_received_file_blocks_num() {
  // @@protoc_insertion_point(field_mutable_map:trans_svr_upload_task.received_file_blocks_num)
  return received_file_blocks_num_.MutableMap();
}

// uint64 last_resend_block_num = 15;
inline void trans_svr_upload_task::clear_last_resend_block_num() {
  last_resend_block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_upload_task::last_resend_block_num() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.last_resend_block_num)
  return last_resend_block_num_;
}
inline void trans_svr_upload_task::set_last_resend_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_resend_block_num_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.last_resend_block_num)
}

// uint64 transfer_rate = 16;
inline void trans_svr_upload_task::clear_transfer_rate() {
  transfer_rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_upload_task::transfer_rate() const {
  // @@protoc_insertion_point(field_get:trans_svr_upload_task.transfer_rate)
  return transfer_rate_;
}
inline void trans_svr_upload_task::set_transfer_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transfer_rate_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_upload_task.transfer_rate)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// trans_cli_download_task

// string usr_trans_id = 1;
inline void trans_cli_download_task::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_cli_download_task::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void trans_cli_download_task::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_cli_download_task.usr_trans_id)
}
inline void trans_cli_download_task::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_cli_download_task.usr_trans_id)
}
inline void trans_cli_download_task::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_cli_download_task.usr_trans_id)
}
inline void trans_cli_download_task::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_cli_download_task.usr_trans_id)
}
inline std::string* trans_cli_download_task::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_cli_download_task.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_cli_download_task::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:trans_cli_download_task.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_cli_download_task::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:trans_cli_download_task.usr_trans_id)
}

// int32 file_or_dir = 2;
inline void trans_cli_download_task::clear_file_or_dir() {
  file_or_dir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_cli_download_task::file_or_dir() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.file_or_dir)
  return file_or_dir_;
}
inline void trans_cli_download_task::set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  file_or_dir_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.file_or_dir)
}

// int32 process_type = 3;
inline void trans_cli_download_task::clear_process_type() {
  process_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_cli_download_task::process_type() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.process_type)
  return process_type_;
}
inline void trans_cli_download_task::set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  process_type_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.process_type)
}

// int32 exchange_type = 4;
inline void trans_cli_download_task::clear_exchange_type() {
  exchange_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_cli_download_task::exchange_type() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.exchange_type)
  return exchange_type_;
}
inline void trans_cli_download_task::set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_type_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.exchange_type)
}

// string file_path = 5;
inline void trans_cli_download_task::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_cli_download_task::file_path() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.file_path)
  return file_path_.GetNoArena();
}
inline void trans_cli_download_task::set_file_path(const std::string& value) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_cli_download_task.file_path)
}
inline void trans_cli_download_task::set_file_path(std::string&& value) {
  
  file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_cli_download_task.file_path)
}
inline void trans_cli_download_task::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_cli_download_task.file_path)
}
inline void trans_cli_download_task::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_cli_download_task.file_path)
}
inline std::string* trans_cli_download_task::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:trans_cli_download_task.file_path)
  return file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_cli_download_task::release_file_path() {
  // @@protoc_insertion_point(field_release:trans_cli_download_task.file_path)
  
  return file_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_cli_download_task::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:trans_cli_download_task.file_path)
}

// string store_file_path = 6;
inline void trans_cli_download_task::clear_store_file_path() {
  store_file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_cli_download_task::store_file_path() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.store_file_path)
  return store_file_path_.GetNoArena();
}
inline void trans_cli_download_task::set_store_file_path(const std::string& value) {
  
  store_file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_cli_download_task.store_file_path)
}
inline void trans_cli_download_task::set_store_file_path(std::string&& value) {
  
  store_file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_cli_download_task.store_file_path)
}
inline void trans_cli_download_task::set_store_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  store_file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_cli_download_task.store_file_path)
}
inline void trans_cli_download_task::set_store_file_path(const char* value, size_t size) {
  
  store_file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_cli_download_task.store_file_path)
}
inline std::string* trans_cli_download_task::mutable_store_file_path() {
  
  // @@protoc_insertion_point(field_mutable:trans_cli_download_task.store_file_path)
  return store_file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_cli_download_task::release_store_file_path() {
  // @@protoc_insertion_point(field_release:trans_cli_download_task.store_file_path)
  
  return store_file_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_cli_download_task::set_allocated_store_file_path(std::string* store_file_path) {
  if (store_file_path != nullptr) {
    
  } else {
    
  }
  store_file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), store_file_path);
  // @@protoc_insertion_point(field_set_allocated:trans_cli_download_task.store_file_path)
}

// uint64 total_file_blocks_count = 7;
inline void trans_cli_download_task::clear_total_file_blocks_count() {
  total_file_blocks_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_download_task::total_file_blocks_count() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.total_file_blocks_count)
  return total_file_blocks_count_;
}
inline void trans_cli_download_task::set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_file_blocks_count_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.total_file_blocks_count)
}

// uint64 file_size = 8;
inline void trans_cli_download_task::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_download_task::file_size() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.file_size)
  return file_size_;
}
inline void trans_cli_download_task::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.file_size)
}

// uint64 max_received_file_block_num = 9;
inline void trans_cli_download_task::clear_max_received_file_block_num() {
  max_received_file_block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_download_task::max_received_file_block_num() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.max_received_file_block_num)
  return max_received_file_block_num_;
}
inline void trans_cli_download_task::set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_received_file_block_num_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.max_received_file_block_num)
}

// uint64 file_hash = 10;
inline void trans_cli_download_task::clear_file_hash() {
  file_hash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_download_task::file_hash() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.file_hash)
  return file_hash_;
}
inline void trans_cli_download_task::set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_hash_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.file_hash)
}

// string trans_session_id = 11;
inline void trans_cli_download_task::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_cli_download_task::trans_session_id() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void trans_cli_download_task::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_cli_download_task.trans_session_id)
}
inline void trans_cli_download_task::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_cli_download_task.trans_session_id)
}
inline void trans_cli_download_task::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_cli_download_task.trans_session_id)
}
inline void trans_cli_download_task::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_cli_download_task.trans_session_id)
}
inline std::string* trans_cli_download_task::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_cli_download_task.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_cli_download_task::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:trans_cli_download_task.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_cli_download_task::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:trans_cli_download_task.trans_session_id)
}

// int32 trans_status = 12;
inline void trans_cli_download_task::clear_trans_status() {
  trans_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_cli_download_task::trans_status() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.trans_status)
  return trans_status_;
}
inline void trans_cli_download_task::set_trans_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trans_status_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.trans_status)
}

// map<uint64, uint64> received_file_blocks_num = 13;
inline int trans_cli_download_task::received_file_blocks_num_size() const {
  return received_file_blocks_num_.size();
}
inline void trans_cli_download_task::clear_received_file_blocks_num() {
  received_file_blocks_num_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >&
trans_cli_download_task::received_file_blocks_num() const {
  // @@protoc_insertion_point(field_map:trans_cli_download_task.received_file_blocks_num)
  return received_file_blocks_num_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >*
trans_cli_download_task::mutable_received_file_blocks_num() {
  // @@protoc_insertion_point(field_mutable_map:trans_cli_download_task.received_file_blocks_num)
  return received_file_blocks_num_.MutableMap();
}

// uint64 last_resend_block_num = 14;
inline void trans_cli_download_task::clear_last_resend_block_num() {
  last_resend_block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_download_task::last_resend_block_num() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.last_resend_block_num)
  return last_resend_block_num_;
}
inline void trans_cli_download_task::set_last_resend_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_resend_block_num_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.last_resend_block_num)
}

// uint64 transfer_rate = 15;
inline void trans_cli_download_task::clear_transfer_rate() {
  transfer_rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_cli_download_task::transfer_rate() const {
  // @@protoc_insertion_point(field_get:trans_cli_download_task.transfer_rate)
  return transfer_rate_;
}
inline void trans_cli_download_task::set_transfer_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transfer_rate_ = value;
  // @@protoc_insertion_point(field_set:trans_cli_download_task.transfer_rate)
}

// -------------------------------------------------------------------

// trans_svr_download_task

// string node_id = 1;
inline void trans_svr_download_task::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_download_task::node_id() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.node_id)
  return node_id_.GetNoArena();
}
inline void trans_svr_download_task::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_download_task.node_id)
}
inline void trans_svr_download_task::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_download_task.node_id)
}
inline void trans_svr_download_task::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_download_task.node_id)
}
inline void trans_svr_download_task::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_download_task.node_id)
}
inline std::string* trans_svr_download_task::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_download_task.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_download_task::release_node_id() {
  // @@protoc_insertion_point(field_release:trans_svr_download_task.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_download_task::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_download_task.node_id)
}

// string usr_trans_id = 2;
inline void trans_svr_download_task::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_download_task::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void trans_svr_download_task::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_download_task.usr_trans_id)
}
inline void trans_svr_download_task::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_download_task.usr_trans_id)
}
inline void trans_svr_download_task::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_download_task.usr_trans_id)
}
inline void trans_svr_download_task::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_download_task.usr_trans_id)
}
inline std::string* trans_svr_download_task::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_download_task.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_download_task::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:trans_svr_download_task.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_download_task::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_download_task.usr_trans_id)
}

// int32 file_or_dir = 3;
inline void trans_svr_download_task::clear_file_or_dir() {
  file_or_dir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_svr_download_task::file_or_dir() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.file_or_dir)
  return file_or_dir_;
}
inline void trans_svr_download_task::set_file_or_dir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  file_or_dir_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.file_or_dir)
}

// int32 process_type = 4;
inline void trans_svr_download_task::clear_process_type() {
  process_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_svr_download_task::process_type() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.process_type)
  return process_type_;
}
inline void trans_svr_download_task::set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  process_type_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.process_type)
}

// int32 exchange_type = 5;
inline void trans_svr_download_task::clear_exchange_type() {
  exchange_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_svr_download_task::exchange_type() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.exchange_type)
  return exchange_type_;
}
inline void trans_svr_download_task::set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_type_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.exchange_type)
}

// string file_path = 6;
inline void trans_svr_download_task::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_download_task::file_path() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.file_path)
  return file_path_.GetNoArena();
}
inline void trans_svr_download_task::set_file_path(const std::string& value) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_download_task.file_path)
}
inline void trans_svr_download_task::set_file_path(std::string&& value) {
  
  file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_download_task.file_path)
}
inline void trans_svr_download_task::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_download_task.file_path)
}
inline void trans_svr_download_task::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_download_task.file_path)
}
inline std::string* trans_svr_download_task::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_download_task.file_path)
  return file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_download_task::release_file_path() {
  // @@protoc_insertion_point(field_release:trans_svr_download_task.file_path)
  
  return file_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_download_task::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_download_task.file_path)
}

// string remote_path = 7;
inline void trans_svr_download_task::clear_remote_path() {
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_download_task::remote_path() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.remote_path)
  return remote_path_.GetNoArena();
}
inline void trans_svr_download_task::set_remote_path(const std::string& value) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_download_task.remote_path)
}
inline void trans_svr_download_task::set_remote_path(std::string&& value) {
  
  remote_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_download_task.remote_path)
}
inline void trans_svr_download_task::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_download_task.remote_path)
}
inline void trans_svr_download_task::set_remote_path(const char* value, size_t size) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_download_task.remote_path)
}
inline std::string* trans_svr_download_task::mutable_remote_path() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_download_task.remote_path)
  return remote_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_download_task::release_remote_path() {
  // @@protoc_insertion_point(field_release:trans_svr_download_task.remote_path)
  
  return remote_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_download_task::set_allocated_remote_path(std::string* remote_path) {
  if (remote_path != nullptr) {
    
  } else {
    
  }
  remote_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_path);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_download_task.remote_path)
}

// uint64 file_size = 8;
inline void trans_svr_download_task::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_download_task::file_size() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.file_size)
  return file_size_;
}
inline void trans_svr_download_task::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.file_size)
}

// uint64 total_file_blocks_count = 9;
inline void trans_svr_download_task::clear_total_file_blocks_count() {
  total_file_blocks_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_download_task::total_file_blocks_count() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.total_file_blocks_count)
  return total_file_blocks_count_;
}
inline void trans_svr_download_task::set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_file_blocks_count_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.total_file_blocks_count)
}

// uint64 next_file_block_num_to_send = 10;
inline void trans_svr_download_task::clear_next_file_block_num_to_send() {
  next_file_block_num_to_send_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_download_task::next_file_block_num_to_send() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.next_file_block_num_to_send)
  return next_file_block_num_to_send_;
}
inline void trans_svr_download_task::set_next_file_block_num_to_send(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  next_file_block_num_to_send_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.next_file_block_num_to_send)
}

// string trans_session_id = 11;
inline void trans_svr_download_task::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& trans_svr_download_task::trans_session_id() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void trans_svr_download_task::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trans_svr_download_task.trans_session_id)
}
inline void trans_svr_download_task::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trans_svr_download_task.trans_session_id)
}
inline void trans_svr_download_task::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trans_svr_download_task.trans_session_id)
}
inline void trans_svr_download_task::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trans_svr_download_task.trans_session_id)
}
inline std::string* trans_svr_download_task::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:trans_svr_download_task.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* trans_svr_download_task::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:trans_svr_download_task.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void trans_svr_download_task::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:trans_svr_download_task.trans_session_id)
}

// int32 trans_status = 12;
inline void trans_svr_download_task::clear_trans_status() {
  trans_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 trans_svr_download_task::trans_status() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.trans_status)
  return trans_status_;
}
inline void trans_svr_download_task::set_trans_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trans_status_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.trans_status)
}

// uint64 file_hash = 13;
inline void trans_svr_download_task::clear_file_hash() {
  file_hash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_download_task::file_hash() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.file_hash)
  return file_hash_;
}
inline void trans_svr_download_task::set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_hash_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.file_hash)
}

// uint64 max_received_file_block_num = 14;
inline void trans_svr_download_task::clear_max_received_file_block_num() {
  max_received_file_block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_download_task::max_received_file_block_num() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.max_received_file_block_num)
  return max_received_file_block_num_;
}
inline void trans_svr_download_task::set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_received_file_block_num_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.max_received_file_block_num)
}

// uint64 received_file_blocks_count = 15;
inline void trans_svr_download_task::clear_received_file_blocks_count() {
  received_file_blocks_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 trans_svr_download_task::received_file_blocks_count() const {
  // @@protoc_insertion_point(field_get:trans_svr_download_task.received_file_blocks_count)
  return received_file_blocks_count_;
}
inline void trans_svr_download_task::set_received_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  received_file_blocks_count_ = value;
  // @@protoc_insertion_point(field_set:trans_svr_download_task.received_file_blocks_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trans_5ftask_2eproto
