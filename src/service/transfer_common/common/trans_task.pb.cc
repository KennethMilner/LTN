// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trans_task.proto

#include "trans_task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_trans_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_net_entity_trans_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trans_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_trans_cli_usr_task_trans_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trans_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_trans_progress_trans_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trans_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trans_5ftask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto;
class db_net_entityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_net_entity> _instance;
} _db_net_entity_default_instance_;
class db_trans_progressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_trans_progress> _instance;
} _db_trans_progress_default_instance_;
class db_trans_cli_usr_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_trans_cli_usr_task> _instance;
} _db_trans_cli_usr_task_default_instance_;
class db_trans_cli_usr_upload_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_trans_cli_usr_upload_task> _instance;
} _db_trans_cli_usr_upload_task_default_instance_;
class db_trans_cli_usr_download_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_trans_cli_usr_download_task> _instance;
} _db_trans_cli_usr_download_task_default_instance_;
class trans_cli_upload_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trans_cli_upload_task> _instance;
} _trans_cli_upload_task_default_instance_;
class trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse> _instance;
} _trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_;
class trans_svr_upload_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trans_svr_upload_task> _instance;
} _trans_svr_upload_task_default_instance_;
class trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse> _instance;
} _trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_;
class trans_cli_download_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trans_cli_download_task> _instance;
} _trans_cli_download_task_default_instance_;
class trans_svr_download_taskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trans_svr_download_task> _instance;
} _trans_svr_download_task_default_instance_;
static void InitDefaultsscc_info_db_net_entity_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_db_net_entity_default_instance_;
    new (ptr) ::db_net_entity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db_net_entity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_net_entity_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_db_net_entity_trans_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_db_trans_cli_usr_download_task_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_db_trans_cli_usr_download_task_default_instance_;
    new (ptr) ::db_trans_cli_usr_download_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db_trans_cli_usr_download_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_trans_cli_usr_download_task_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_db_trans_cli_usr_download_task_trans_5ftask_2eproto}, {
      &scc_info_db_trans_cli_usr_task_trans_5ftask_2eproto.base,}};

static void InitDefaultsscc_info_db_trans_cli_usr_task_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_db_trans_cli_usr_task_default_instance_;
    new (ptr) ::db_trans_cli_usr_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db_trans_cli_usr_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_db_trans_cli_usr_task_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_db_trans_cli_usr_task_trans_5ftask_2eproto}, {
      &scc_info_db_trans_progress_trans_5ftask_2eproto.base,
      &scc_info_db_net_entity_trans_5ftask_2eproto.base,}};

static void InitDefaultsscc_info_db_trans_cli_usr_upload_task_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_db_trans_cli_usr_upload_task_default_instance_;
    new (ptr) ::db_trans_cli_usr_upload_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db_trans_cli_usr_upload_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_db_trans_cli_usr_upload_task_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_db_trans_cli_usr_upload_task_trans_5ftask_2eproto}, {
      &scc_info_db_trans_cli_usr_task_trans_5ftask_2eproto.base,}};

static void InitDefaultsscc_info_db_trans_progress_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_db_trans_progress_default_instance_;
    new (ptr) ::db_trans_progress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::db_trans_progress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_trans_progress_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_db_trans_progress_trans_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_trans_cli_download_task_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_trans_cli_download_task_default_instance_;
    new (ptr) ::trans_cli_download_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans_cli_download_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trans_cli_download_task_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_trans_cli_download_task_trans_5ftask_2eproto}, {
      &scc_info_trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto.base,}};

static void InitDefaultsscc_info_trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_;
    new (ptr) ::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse();
  }
  ::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_trans_cli_upload_task_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_trans_cli_upload_task_default_instance_;
    new (ptr) ::trans_cli_upload_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans_cli_upload_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_trans_cli_upload_task_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_trans_cli_upload_task_trans_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_trans_svr_download_task_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_trans_svr_download_task_default_instance_;
    new (ptr) ::trans_svr_download_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans_svr_download_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_trans_svr_download_task_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_trans_svr_download_task_trans_5ftask_2eproto}, {}};

static void InitDefaultsscc_info_trans_svr_upload_task_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_trans_svr_upload_task_default_instance_;
    new (ptr) ::trans_svr_upload_task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trans_svr_upload_task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trans_svr_upload_task_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_trans_svr_upload_task_trans_5ftask_2eproto}, {
      &scc_info_trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto.base,}};

static void InitDefaultsscc_info_trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_;
    new (ptr) ::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse();
  }
  ::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trans_5ftask_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_trans_5ftask_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trans_5ftask_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trans_5ftask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_net_entity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db_net_entity, host_),
  PROTOBUF_FIELD_OFFSET(::db_net_entity, port_),
  PROTOBUF_FIELD_OFFSET(::db_net_entity, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_trans_progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db_trans_progress, trans_session_id_),
  PROTOBUF_FIELD_OFFSET(::db_trans_progress, progress_),
  PROTOBUF_FIELD_OFFSET(::db_trans_progress, trans_size_),
  PROTOBUF_FIELD_OFFSET(::db_trans_progress, total_size_),
  PROTOBUF_FIELD_OFFSET(::db_trans_progress, remote_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_task, progress_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_task, trans_id_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_task, direction_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_task, file_or_dir_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_task, addr_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_task, local_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_upload_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_upload_task, cli_usr_task_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_upload_task, remote_path_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_upload_task, root_path_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_upload_task, upload_file_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_upload_task, uploaded_received_file_size_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_upload_task, uploading_received_file_szie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_download_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_download_task, cli_usr_task_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_download_task, remote_path_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_download_task, root_path_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_download_task, downloaded_received_file_size_),
  PROTOBUF_FIELD_OFFSET(::db_trans_cli_usr_download_task, downloading_received_file_szie_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, file_or_dir_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, process_type_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, exchange_type_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, file_path_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, remote_path_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, file_size_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, total_file_blocks_count_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, next_file_block_num_to_send_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, trans_session_id_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, trans_status_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, file_hash_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, max_received_file_block_num_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_upload_task, received_file_blocks_count_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, node_id_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, file_or_dir_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, process_type_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, exchange_type_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, file_path_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, store_file_path_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, total_file_blocks_count_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, file_size_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, max_received_file_block_num_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, file_hash_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, trans_session_id_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, trans_status_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, received_file_blocks_num_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, last_resend_block_num_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_upload_task, transfer_rate_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, file_or_dir_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, process_type_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, exchange_type_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, file_path_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, store_file_path_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, total_file_blocks_count_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, file_size_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, max_received_file_block_num_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, file_hash_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, trans_session_id_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, trans_status_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, received_file_blocks_num_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, last_resend_block_num_),
  PROTOBUF_FIELD_OFFSET(::trans_cli_download_task, transfer_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, node_id_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, file_or_dir_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, process_type_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, exchange_type_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, file_path_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, remote_path_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, file_size_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, total_file_blocks_count_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, next_file_block_num_to_send_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, trans_session_id_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, trans_status_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, file_hash_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, max_received_file_block_num_),
  PROTOBUF_FIELD_OFFSET(::trans_svr_download_task, received_file_blocks_count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::db_net_entity)},
  { 8, -1, sizeof(::db_trans_progress)},
  { 18, -1, sizeof(::db_trans_cli_usr_task)},
  { 29, -1, sizeof(::db_trans_cli_usr_upload_task)},
  { 40, -1, sizeof(::db_trans_cli_usr_download_task)},
  { 50, -1, sizeof(::trans_cli_upload_task)},
  { 69, 76, sizeof(::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse)},
  { 78, -1, sizeof(::trans_svr_upload_task)},
  { 99, 106, sizeof(::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse)},
  { 108, -1, sizeof(::trans_cli_download_task)},
  { 128, -1, sizeof(::trans_svr_download_task)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_db_net_entity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_db_trans_progress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_db_trans_cli_usr_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_db_trans_cli_usr_upload_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_db_trans_cli_usr_download_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_trans_cli_upload_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_trans_svr_upload_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_trans_cli_download_task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_trans_svr_download_task_default_instance_),
};

const char descriptor_table_protodef_trans_5ftask_2eproto[] =
  "\n\020trans_task.proto\"=\n\rdb_net_entity\022\014\n\004h"
  "ost\030\001 \001(\t\022\014\n\004port\030\002 \001(\t\022\020\n\010protocol\030\003 \001("
  "\t\"|\n\021db_trans_progress\022\030\n\020trans_session_"
  "id\030\001 \001(\t\022\020\n\010progress\030\002 \001(\001\022\022\n\ntrans_size"
  "\030\003 \001(\005\022\022\n\ntotal_size\030\004 \001(\005\022\023\n\013remote_pat"
  "h\030\005 \001(\t\"\251\001\n\025db_trans_cli_usr_task\022$\n\010pro"
  "gress\030\001 \001(\0132\022.db_trans_progress\022\020\n\010trans"
  "_id\030\002 \001(\t\022\021\n\tdirection\030\003 \001(\t\022\023\n\013file_or_"
  "dir\030\004 \001(\005\022\034\n\004addr\030\005 \003(\0132\016.db_net_entity\022"
  "\022\n\nlocal_path\030\006 \001(\t\"\324\001\n\034db_trans_cli_usr"
  "_upload_task\022,\n\014cli_usr_task\030\001 \001(\0132\026.db_"
  "trans_cli_usr_task\022\023\n\013remote_path\030\002 \001(\t\022"
  "\021\n\troot_path\030\003 \001(\t\022\023\n\013upload_file\030\004 \003(\t\022"
  "#\n\033uploaded_received_file_size\030\005 \001(\004\022$\n\034"
  "uploading_received_file_szie\030\006 \001(\004\"\305\001\n\036d"
  "b_trans_cli_usr_download_task\022,\n\014cli_usr"
  "_task\030\001 \001(\0132\026.db_trans_cli_usr_task\022\023\n\013r"
  "emote_path\030\002 \003(\t\022\021\n\troot_path\030\003 \001(\t\022%\n\035d"
  "ownloaded_received_file_size\030\004 \001(\004\022&\n\036do"
  "wnloading_received_file_szie\030\005 \001(\004\"\374\002\n\025t"
  "rans_cli_upload_task\022\024\n\014usr_trans_id\030\001 \001"
  "(\t\022\023\n\013file_or_dir\030\002 \001(\005\022\024\n\014process_type\030"
  "\003 \001(\005\022\025\n\rexchange_type\030\004 \001(\005\022\021\n\tfile_pat"
  "h\030\005 \001(\t\022\023\n\013remote_path\030\006 \001(\t\022\021\n\tfile_siz"
  "e\030\007 \001(\004\022\037\n\027total_file_blocks_count\030\010 \001(\004"
  "\022#\n\033next_file_block_num_to_send\030\t \001(\004\022\030\n"
  "\020trans_session_id\030\n \001(\t\022\024\n\014trans_status\030"
  "\013 \001(\005\022\021\n\tfile_hash\030\014 \001(\004\022#\n\033max_received"
  "_file_block_num\030\r \001(\004\022\"\n\032received_file_b"
  "locks_count\030\016 \001(\004\"\221\004\n\025trans_svr_upload_t"
  "ask\022\017\n\007node_id\030\001 \001(\t\022\024\n\014usr_trans_id\030\002 \001"
  "(\t\022\023\n\013file_or_dir\030\003 \001(\005\022\024\n\014process_type\030"
  "\004 \001(\005\022\025\n\rexchange_type\030\005 \001(\005\022\021\n\tfile_pat"
  "h\030\006 \001(\t\022\027\n\017store_file_path\030\007 \001(\t\022\037\n\027tota"
  "l_file_blocks_count\030\010 \001(\004\022\021\n\tfile_size\030\t"
  " \001(\004\022#\n\033max_received_file_block_num\030\n \001("
  "\004\022\021\n\tfile_hash\030\013 \001(\004\022\030\n\020trans_session_id"
  "\030\014 \001(\t\022\024\n\014trans_status\030\r \001(\005\022S\n\030received"
  "_file_blocks_num\030\016 \003(\01321.trans_svr_uploa"
  "d_task.ReceivedFileBlocksNumEntry\022\035\n\025las"
  "t_resend_block_num\030\017 \001(\004\022\025\n\rtransfer_rat"
  "e\030\020 \001(\004\032<\n\032ReceivedFileBlocksNumEntry\022\013\n"
  "\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\004:\0028\001\"\204\004\n\027trans_"
  "cli_download_task\022\024\n\014usr_trans_id\030\001 \001(\t\022"
  "\023\n\013file_or_dir\030\002 \001(\005\022\024\n\014process_type\030\003 \001"
  "(\005\022\025\n\rexchange_type\030\004 \001(\005\022\021\n\tfile_path\030\005"
  " \001(\t\022\027\n\017store_file_path\030\006 \001(\t\022\037\n\027total_f"
  "ile_blocks_count\030\007 \001(\004\022\021\n\tfile_size\030\010 \001("
  "\004\022#\n\033max_received_file_block_num\030\t \001(\004\022\021"
  "\n\tfile_hash\030\n \001(\004\022\030\n\020trans_session_id\030\013 "
  "\001(\t\022\024\n\014trans_status\030\014 \001(\005\022U\n\030received_fi"
  "le_blocks_num\030\r \003(\01323.trans_cli_download"
  "_task.ReceivedFileBlocksNumEntry\022\035\n\025last"
  "_resend_block_num\030\016 \001(\004\022\025\n\rtransfer_rate"
  "\030\017 \001(\004\032<\n\032ReceivedFileBlocksNumEntry\022\013\n\003"
  "key\030\001 \001(\004\022\r\n\005value\030\002 \001(\004:\0028\001\"\217\003\n\027trans_s"
  "vr_download_task\022\017\n\007node_id\030\001 \001(\t\022\024\n\014usr"
  "_trans_id\030\002 \001(\t\022\023\n\013file_or_dir\030\003 \001(\005\022\024\n\014"
  "process_type\030\004 \001(\005\022\025\n\rexchange_type\030\005 \001("
  "\005\022\021\n\tfile_path\030\006 \001(\t\022\023\n\013remote_path\030\007 \001("
  "\t\022\021\n\tfile_size\030\010 \001(\004\022\037\n\027total_file_block"
  "s_count\030\t \001(\004\022#\n\033next_file_block_num_to_"
  "send\030\n \001(\004\022\030\n\020trans_session_id\030\013 \001(\t\022\024\n\014"
  "trans_status\030\014 \001(\005\022\021\n\tfile_hash\030\r \001(\004\022#\n"
  "\033max_received_file_block_num\030\016 \001(\004\022\"\n\032re"
  "ceived_file_blocks_count\030\017 \001(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trans_5ftask_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trans_5ftask_2eproto_sccs[11] = {
  &scc_info_db_net_entity_trans_5ftask_2eproto.base,
  &scc_info_db_trans_cli_usr_download_task_trans_5ftask_2eproto.base,
  &scc_info_db_trans_cli_usr_task_trans_5ftask_2eproto.base,
  &scc_info_db_trans_cli_usr_upload_task_trans_5ftask_2eproto.base,
  &scc_info_db_trans_progress_trans_5ftask_2eproto.base,
  &scc_info_trans_cli_download_task_trans_5ftask_2eproto.base,
  &scc_info_trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto.base,
  &scc_info_trans_cli_upload_task_trans_5ftask_2eproto.base,
  &scc_info_trans_svr_download_task_trans_5ftask_2eproto.base,
  &scc_info_trans_svr_upload_task_trans_5ftask_2eproto.base,
  &scc_info_trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse_trans_5ftask_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trans_5ftask_2eproto_once;
static bool descriptor_table_trans_5ftask_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trans_5ftask_2eproto = {
  &descriptor_table_trans_5ftask_2eproto_initialized, descriptor_table_protodef_trans_5ftask_2eproto, "trans_task.proto", 2638,
  &descriptor_table_trans_5ftask_2eproto_once, descriptor_table_trans_5ftask_2eproto_sccs, descriptor_table_trans_5ftask_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_trans_5ftask_2eproto::offsets,
  file_level_metadata_trans_5ftask_2eproto, 11, file_level_enum_descriptors_trans_5ftask_2eproto, file_level_service_descriptors_trans_5ftask_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trans_5ftask_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trans_5ftask_2eproto), true);

// ===================================================================

void db_net_entity::InitAsDefaultInstance() {
}
class db_net_entity::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_net_entity::kHostFieldNumber;
const int db_net_entity::kPortFieldNumber;
const int db_net_entity::kProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_net_entity::db_net_entity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_net_entity)
}
db_net_entity::db_net_entity(const db_net_entity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  // @@protoc_insertion_point(copy_constructor:db_net_entity)
}

void db_net_entity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_net_entity_trans_5ftask_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

db_net_entity::~db_net_entity() {
  // @@protoc_insertion_point(destructor:db_net_entity)
  SharedDtor();
}

void db_net_entity::SharedDtor() {
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_net_entity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_net_entity& db_net_entity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_net_entity_trans_5ftask_2eproto.base);
  return *internal_default_instance();
}


void db_net_entity::Clear() {
// @@protoc_insertion_point(message_clear_start:db_net_entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_net_entity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_host(), ptr, ctx, "db_net_entity.host");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_port(), ptr, ctx, "db_net_entity.port");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_protocol(), ptr, ctx, "db_net_entity.protocol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_net_entity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_net_entity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_net_entity.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), static_cast<int>(this->port().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_net_entity.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_net_entity.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_net_entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_net_entity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_net_entity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_net_entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_net_entity.host");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // string port = 2;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_net_entity.port");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->port(), output);
  }

  // string protocol = 3;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_net_entity.protocol");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->protocol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_net_entity)
}

::PROTOBUF_NAMESPACE_ID::uint8* db_net_entity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_net_entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_net_entity.host");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // string port = 2;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_net_entity.port");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  // string protocol = 3;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_net_entity.protocol");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->protocol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_net_entity)
  return target;
}

size_t db_net_entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_net_entity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string port = 2;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->port());
  }

  // string protocol = 3;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_net_entity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db_net_entity)
  GOOGLE_DCHECK_NE(&from, this);
  const db_net_entity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_net_entity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db_net_entity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db_net_entity)
    MergeFrom(*source);
  }
}

void db_net_entity::MergeFrom(const db_net_entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db_net_entity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
}

void db_net_entity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db_net_entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_net_entity::CopyFrom(const db_net_entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_net_entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_net_entity::IsInitialized() const {
  return true;
}

void db_net_entity::Swap(db_net_entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_net_entity::InternalSwap(db_net_entity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata db_net_entity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_trans_progress::InitAsDefaultInstance() {
}
class db_trans_progress::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_trans_progress::kTransSessionIdFieldNumber;
const int db_trans_progress::kProgressFieldNumber;
const int db_trans_progress::kTransSizeFieldNumber;
const int db_trans_progress::kTotalSizeFieldNumber;
const int db_trans_progress::kRemotePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_trans_progress::db_trans_progress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_trans_progress)
}
db_trans_progress::db_trans_progress(const db_trans_progress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.remote_path().size() > 0) {
    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_size_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(total_size_));
  // @@protoc_insertion_point(copy_constructor:db_trans_progress)
}

void db_trans_progress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_trans_progress_trans_5ftask_2eproto.base);
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_size_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(total_size_));
}

db_trans_progress::~db_trans_progress() {
  // @@protoc_insertion_point(destructor:db_trans_progress)
  SharedDtor();
}

void db_trans_progress::SharedDtor() {
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_trans_progress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_trans_progress& db_trans_progress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_trans_progress_trans_5ftask_2eproto.base);
  return *internal_default_instance();
}


void db_trans_progress::Clear() {
// @@protoc_insertion_point(message_clear_start:db_trans_progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_size_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(total_size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_trans_progress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string trans_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "db_trans_progress.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 trans_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          trans_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_path(), ptr, ctx, "db_trans_progress.remote_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_trans_progress::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_trans_progress)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string trans_session_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_progress.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double progress = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trans_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_path = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_path().data(), static_cast<int>(this->remote_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_progress.remote_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_trans_progress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_trans_progress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_trans_progress::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_trans_progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trans_session_id = 1;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_progress.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trans_session_id(), output);
  }

  // double progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->progress(), output);
  }

  // int32 trans_size = 3;
  if (this->trans_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->trans_size(), output);
  }

  // int32 total_size = 4;
  if (this->total_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->total_size(), output);
  }

  // string remote_path = 5;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_progress.remote_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->remote_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_trans_progress)
}

::PROTOBUF_NAMESPACE_ID::uint8* db_trans_progress::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_trans_progress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trans_session_id = 1;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_progress.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->trans_session_id(), target);
  }

  // double progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->progress(), target);
  }

  // int32 trans_size = 3;
  if (this->trans_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->trans_size(), target);
  }

  // int32 total_size = 4;
  if (this->total_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->total_size(), target);
  }

  // string remote_path = 5;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_progress.remote_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->remote_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_trans_progress)
  return target;
}

size_t db_trans_progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_trans_progress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trans_session_id = 1;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // string remote_path = 5;
  if (this->remote_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_path());
  }

  // double progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 trans_size = 3;
  if (this->trans_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trans_size());
  }

  // int32 total_size = 4;
  if (this->total_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->total_size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_trans_progress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db_trans_progress)
  GOOGLE_DCHECK_NE(&from, this);
  const db_trans_progress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_trans_progress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db_trans_progress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db_trans_progress)
    MergeFrom(*source);
  }
}

void db_trans_progress::MergeFrom(const db_trans_progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db_trans_progress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.remote_path().size() > 0) {

    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    set_progress(from.progress());
  }
  if (from.trans_size() != 0) {
    set_trans_size(from.trans_size());
  }
  if (from.total_size() != 0) {
    set_total_size(from.total_size());
  }
}

void db_trans_progress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db_trans_progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_trans_progress::CopyFrom(const db_trans_progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_trans_progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_trans_progress::IsInitialized() const {
  return true;
}

void db_trans_progress::Swap(db_trans_progress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_trans_progress::InternalSwap(db_trans_progress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
  swap(trans_size_, other->trans_size_);
  swap(total_size_, other->total_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_trans_progress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_trans_cli_usr_task::InitAsDefaultInstance() {
  ::_db_trans_cli_usr_task_default_instance_._instance.get_mutable()->progress_ = const_cast< ::db_trans_progress*>(
      ::db_trans_progress::internal_default_instance());
}
class db_trans_cli_usr_task::HasBitSetters {
 public:
  static const ::db_trans_progress& progress(const db_trans_cli_usr_task* msg);
};

const ::db_trans_progress&
db_trans_cli_usr_task::HasBitSetters::progress(const db_trans_cli_usr_task* msg) {
  return *msg->progress_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_trans_cli_usr_task::kProgressFieldNumber;
const int db_trans_cli_usr_task::kTransIdFieldNumber;
const int db_trans_cli_usr_task::kDirectionFieldNumber;
const int db_trans_cli_usr_task::kFileOrDirFieldNumber;
const int db_trans_cli_usr_task::kAddrFieldNumber;
const int db_trans_cli_usr_task::kLocalPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_trans_cli_usr_task::db_trans_cli_usr_task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_trans_cli_usr_task)
}
db_trans_cli_usr_task::db_trans_cli_usr_task(const db_trans_cli_usr_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addr_(from.addr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_id().size() > 0) {
    trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
  }
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.direction().size() > 0) {
    direction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.direction_);
  }
  local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.local_path().size() > 0) {
    local_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  if (from.has_progress()) {
    progress_ = new ::db_trans_progress(*from.progress_);
  } else {
    progress_ = nullptr;
  }
  file_or_dir_ = from.file_or_dir_;
  // @@protoc_insertion_point(copy_constructor:db_trans_cli_usr_task)
}

void db_trans_cli_usr_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_trans_cli_usr_task_trans_5ftask_2eproto.base);
  trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_or_dir_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(file_or_dir_));
}

db_trans_cli_usr_task::~db_trans_cli_usr_task() {
  // @@protoc_insertion_point(destructor:db_trans_cli_usr_task)
  SharedDtor();
}

void db_trans_cli_usr_task::SharedDtor() {
  trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete progress_;
}

void db_trans_cli_usr_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_trans_cli_usr_task& db_trans_cli_usr_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_trans_cli_usr_task_trans_5ftask_2eproto.base);
  return *internal_default_instance();
}


void db_trans_cli_usr_task::Clear() {
// @@protoc_insertion_point(message_clear_start:db_trans_cli_usr_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.Clear();
  trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
  file_or_dir_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_trans_cli_usr_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .db_trans_progress progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_id(), ptr, ctx, "db_trans_cli_usr_task.trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_direction(), ptr, ctx, "db_trans_cli_usr_task.direction");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 file_or_dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_or_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .db_net_entity addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_addr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // string local_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_local_path(), ptr, ctx, "db_trans_cli_usr_task.local_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_trans_cli_usr_task::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_trans_cli_usr_task)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .db_trans_progress progress = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_progress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_id().data(), static_cast<int>(this->trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_cli_usr_task.trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string direction = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->direction().data(), static_cast<int>(this->direction().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_cli_usr_task.direction"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 file_or_dir = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_or_dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .db_net_entity addr = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_path = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_local_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->local_path().data(), static_cast<int>(this->local_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_cli_usr_task.local_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_trans_cli_usr_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_trans_cli_usr_task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_trans_cli_usr_task::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_trans_cli_usr_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .db_trans_progress progress = 1;
  if (this->has_progress()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::progress(this), output);
  }

  // string trans_id = 2;
  if (this->trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_task.trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trans_id(), output);
  }

  // string direction = 3;
  if (this->direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), static_cast<int>(this->direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_task.direction");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->direction(), output);
  }

  // int32 file_or_dir = 4;
  if (this->file_or_dir() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->file_or_dir(), output);
  }

  // repeated .db_net_entity addr = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addr_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->addr(static_cast<int>(i)),
      output);
  }

  // string local_path = 6;
  if (this->local_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_task.local_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->local_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_trans_cli_usr_task)
}

::PROTOBUF_NAMESPACE_ID::uint8* db_trans_cli_usr_task::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_trans_cli_usr_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .db_trans_progress progress = 1;
  if (this->has_progress()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::progress(this), target);
  }

  // string trans_id = 2;
  if (this->trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_task.trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trans_id(), target);
  }

  // string direction = 3;
  if (this->direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->direction().data(), static_cast<int>(this->direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_task.direction");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->direction(), target);
  }

  // int32 file_or_dir = 4;
  if (this->file_or_dir() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->file_or_dir(), target);
  }

  // repeated .db_net_entity addr = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addr_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->addr(static_cast<int>(i)), target);
  }

  // string local_path = 6;
  if (this->local_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_task.local_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->local_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_trans_cli_usr_task)
  return target;
}

size_t db_trans_cli_usr_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_trans_cli_usr_task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .db_net_entity addr = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->addr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->addr(static_cast<int>(i)));
    }
  }

  // string trans_id = 2;
  if (this->trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_id());
  }

  // string direction = 3;
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->direction());
  }

  // string local_path = 6;
  if (this->local_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->local_path());
  }

  // .db_trans_progress progress = 1;
  if (this->has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  // int32 file_or_dir = 4;
  if (this->file_or_dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->file_or_dir());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_trans_cli_usr_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db_trans_cli_usr_task)
  GOOGLE_DCHECK_NE(&from, this);
  const db_trans_cli_usr_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_trans_cli_usr_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db_trans_cli_usr_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db_trans_cli_usr_task)
    MergeFrom(*source);
  }
}

void db_trans_cli_usr_task::MergeFrom(const db_trans_cli_usr_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db_trans_cli_usr_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addr_.MergeFrom(from.addr_);
  if (from.trans_id().size() > 0) {

    trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
  }
  if (from.direction().size() > 0) {

    direction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.direction_);
  }
  if (from.local_path().size() > 0) {

    local_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  if (from.has_progress()) {
    mutable_progress()->::db_trans_progress::MergeFrom(from.progress());
  }
  if (from.file_or_dir() != 0) {
    set_file_or_dir(from.file_or_dir());
  }
}

void db_trans_cli_usr_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db_trans_cli_usr_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_trans_cli_usr_task::CopyFrom(const db_trans_cli_usr_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_trans_cli_usr_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_trans_cli_usr_task::IsInitialized() const {
  return true;
}

void db_trans_cli_usr_task::Swap(db_trans_cli_usr_task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_trans_cli_usr_task::InternalSwap(db_trans_cli_usr_task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&addr_)->InternalSwap(CastToBase(&other->addr_));
  trans_id_.Swap(&other->trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  direction_.Swap(&other->direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_path_.Swap(&other->local_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
  swap(file_or_dir_, other->file_or_dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_trans_cli_usr_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_trans_cli_usr_upload_task::InitAsDefaultInstance() {
  ::_db_trans_cli_usr_upload_task_default_instance_._instance.get_mutable()->cli_usr_task_ = const_cast< ::db_trans_cli_usr_task*>(
      ::db_trans_cli_usr_task::internal_default_instance());
}
class db_trans_cli_usr_upload_task::HasBitSetters {
 public:
  static const ::db_trans_cli_usr_task& cli_usr_task(const db_trans_cli_usr_upload_task* msg);
};

const ::db_trans_cli_usr_task&
db_trans_cli_usr_upload_task::HasBitSetters::cli_usr_task(const db_trans_cli_usr_upload_task* msg) {
  return *msg->cli_usr_task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_trans_cli_usr_upload_task::kCliUsrTaskFieldNumber;
const int db_trans_cli_usr_upload_task::kRemotePathFieldNumber;
const int db_trans_cli_usr_upload_task::kRootPathFieldNumber;
const int db_trans_cli_usr_upload_task::kUploadFileFieldNumber;
const int db_trans_cli_usr_upload_task::kUploadedReceivedFileSizeFieldNumber;
const int db_trans_cli_usr_upload_task::kUploadingReceivedFileSzieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_trans_cli_usr_upload_task::db_trans_cli_usr_upload_task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_trans_cli_usr_upload_task)
}
db_trans_cli_usr_upload_task::db_trans_cli_usr_upload_task(const db_trans_cli_usr_upload_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      upload_file_(from.upload_file_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.remote_path().size() > 0) {
    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  root_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.root_path().size() > 0) {
    root_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_path_);
  }
  if (from.has_cli_usr_task()) {
    cli_usr_task_ = new ::db_trans_cli_usr_task(*from.cli_usr_task_);
  } else {
    cli_usr_task_ = nullptr;
  }
  ::memcpy(&uploaded_received_file_size_, &from.uploaded_received_file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&uploading_received_file_szie_) -
    reinterpret_cast<char*>(&uploaded_received_file_size_)) + sizeof(uploading_received_file_szie_));
  // @@protoc_insertion_point(copy_constructor:db_trans_cli_usr_upload_task)
}

void db_trans_cli_usr_upload_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_trans_cli_usr_upload_task_trans_5ftask_2eproto.base);
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cli_usr_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uploading_received_file_szie_) -
      reinterpret_cast<char*>(&cli_usr_task_)) + sizeof(uploading_received_file_szie_));
}

db_trans_cli_usr_upload_task::~db_trans_cli_usr_upload_task() {
  // @@protoc_insertion_point(destructor:db_trans_cli_usr_upload_task)
  SharedDtor();
}

void db_trans_cli_usr_upload_task::SharedDtor() {
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cli_usr_task_;
}

void db_trans_cli_usr_upload_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_trans_cli_usr_upload_task& db_trans_cli_usr_upload_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_trans_cli_usr_upload_task_trans_5ftask_2eproto.base);
  return *internal_default_instance();
}


void db_trans_cli_usr_upload_task::Clear() {
// @@protoc_insertion_point(message_clear_start:db_trans_cli_usr_upload_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upload_file_.Clear();
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  root_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cli_usr_task_ != nullptr) {
    delete cli_usr_task_;
  }
  cli_usr_task_ = nullptr;
  ::memset(&uploaded_received_file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uploading_received_file_szie_) -
      reinterpret_cast<char*>(&uploaded_received_file_size_)) + sizeof(uploading_received_file_szie_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_trans_cli_usr_upload_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .db_trans_cli_usr_task cli_usr_task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_cli_usr_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_path(), ptr, ctx, "db_trans_cli_usr_upload_task.remote_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string root_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_root_path(), ptr, ctx, "db_trans_cli_usr_upload_task.root_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string upload_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_upload_file(), ptr, ctx, "db_trans_cli_usr_upload_task.upload_file");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // uint64 uploaded_received_file_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          uploaded_received_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uploading_received_file_szie = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uploading_received_file_szie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_trans_cli_usr_upload_task::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_trans_cli_usr_upload_task)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .db_trans_cli_usr_task cli_usr_task = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cli_usr_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_path().data(), static_cast<int>(this->remote_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_cli_usr_upload_task.remote_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string root_path = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_root_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->root_path().data(), static_cast<int>(this->root_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_cli_usr_upload_task.root_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string upload_file = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_upload_file()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->upload_file(this->upload_file_size() - 1).data(),
            static_cast<int>(this->upload_file(this->upload_file_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_cli_usr_upload_task.upload_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uploaded_received_file_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uploaded_received_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uploading_received_file_szie = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uploading_received_file_szie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_trans_cli_usr_upload_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_trans_cli_usr_upload_task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_trans_cli_usr_upload_task::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_trans_cli_usr_upload_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .db_trans_cli_usr_task cli_usr_task = 1;
  if (this->has_cli_usr_task()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cli_usr_task(this), output);
  }

  // string remote_path = 2;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_upload_task.remote_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->remote_path(), output);
  }

  // string root_path = 3;
  if (this->root_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), static_cast<int>(this->root_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_upload_task.root_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->root_path(), output);
  }

  // repeated string upload_file = 4;
  for (int i = 0, n = this->upload_file_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->upload_file(i).data(), static_cast<int>(this->upload_file(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_upload_task.upload_file");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->upload_file(i), output);
  }

  // uint64 uploaded_received_file_size = 5;
  if (this->uploaded_received_file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->uploaded_received_file_size(), output);
  }

  // uint64 uploading_received_file_szie = 6;
  if (this->uploading_received_file_szie() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->uploading_received_file_szie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_trans_cli_usr_upload_task)
}

::PROTOBUF_NAMESPACE_ID::uint8* db_trans_cli_usr_upload_task::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_trans_cli_usr_upload_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .db_trans_cli_usr_task cli_usr_task = 1;
  if (this->has_cli_usr_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cli_usr_task(this), target);
  }

  // string remote_path = 2;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_upload_task.remote_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->remote_path(), target);
  }

  // string root_path = 3;
  if (this->root_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), static_cast<int>(this->root_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_upload_task.root_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->root_path(), target);
  }

  // repeated string upload_file = 4;
  for (int i = 0, n = this->upload_file_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->upload_file(i).data(), static_cast<int>(this->upload_file(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_upload_task.upload_file");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->upload_file(i), target);
  }

  // uint64 uploaded_received_file_size = 5;
  if (this->uploaded_received_file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->uploaded_received_file_size(), target);
  }

  // uint64 uploading_received_file_szie = 6;
  if (this->uploading_received_file_szie() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->uploading_received_file_szie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_trans_cli_usr_upload_task)
  return target;
}

size_t db_trans_cli_usr_upload_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_trans_cli_usr_upload_task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string upload_file = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->upload_file_size());
  for (int i = 0, n = this->upload_file_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->upload_file(i));
  }

  // string remote_path = 2;
  if (this->remote_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_path());
  }

  // string root_path = 3;
  if (this->root_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->root_path());
  }

  // .db_trans_cli_usr_task cli_usr_task = 1;
  if (this->has_cli_usr_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cli_usr_task_);
  }

  // uint64 uploaded_received_file_size = 5;
  if (this->uploaded_received_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->uploaded_received_file_size());
  }

  // uint64 uploading_received_file_szie = 6;
  if (this->uploading_received_file_szie() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->uploading_received_file_szie());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_trans_cli_usr_upload_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db_trans_cli_usr_upload_task)
  GOOGLE_DCHECK_NE(&from, this);
  const db_trans_cli_usr_upload_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_trans_cli_usr_upload_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db_trans_cli_usr_upload_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db_trans_cli_usr_upload_task)
    MergeFrom(*source);
  }
}

void db_trans_cli_usr_upload_task::MergeFrom(const db_trans_cli_usr_upload_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db_trans_cli_usr_upload_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  upload_file_.MergeFrom(from.upload_file_);
  if (from.remote_path().size() > 0) {

    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  if (from.root_path().size() > 0) {

    root_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_path_);
  }
  if (from.has_cli_usr_task()) {
    mutable_cli_usr_task()->::db_trans_cli_usr_task::MergeFrom(from.cli_usr_task());
  }
  if (from.uploaded_received_file_size() != 0) {
    set_uploaded_received_file_size(from.uploaded_received_file_size());
  }
  if (from.uploading_received_file_szie() != 0) {
    set_uploading_received_file_szie(from.uploading_received_file_szie());
  }
}

void db_trans_cli_usr_upload_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db_trans_cli_usr_upload_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_trans_cli_usr_upload_task::CopyFrom(const db_trans_cli_usr_upload_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_trans_cli_usr_upload_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_trans_cli_usr_upload_task::IsInitialized() const {
  return true;
}

void db_trans_cli_usr_upload_task::Swap(db_trans_cli_usr_upload_task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_trans_cli_usr_upload_task::InternalSwap(db_trans_cli_usr_upload_task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  upload_file_.InternalSwap(CastToBase(&other->upload_file_));
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  root_path_.Swap(&other->root_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cli_usr_task_, other->cli_usr_task_);
  swap(uploaded_received_file_size_, other->uploaded_received_file_size_);
  swap(uploading_received_file_szie_, other->uploading_received_file_szie_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_trans_cli_usr_upload_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void db_trans_cli_usr_download_task::InitAsDefaultInstance() {
  ::_db_trans_cli_usr_download_task_default_instance_._instance.get_mutable()->cli_usr_task_ = const_cast< ::db_trans_cli_usr_task*>(
      ::db_trans_cli_usr_task::internal_default_instance());
}
class db_trans_cli_usr_download_task::HasBitSetters {
 public:
  static const ::db_trans_cli_usr_task& cli_usr_task(const db_trans_cli_usr_download_task* msg);
};

const ::db_trans_cli_usr_task&
db_trans_cli_usr_download_task::HasBitSetters::cli_usr_task(const db_trans_cli_usr_download_task* msg) {
  return *msg->cli_usr_task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_trans_cli_usr_download_task::kCliUsrTaskFieldNumber;
const int db_trans_cli_usr_download_task::kRemotePathFieldNumber;
const int db_trans_cli_usr_download_task::kRootPathFieldNumber;
const int db_trans_cli_usr_download_task::kDownloadedReceivedFileSizeFieldNumber;
const int db_trans_cli_usr_download_task::kDownloadingReceivedFileSzieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_trans_cli_usr_download_task::db_trans_cli_usr_download_task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_trans_cli_usr_download_task)
}
db_trans_cli_usr_download_task::db_trans_cli_usr_download_task(const db_trans_cli_usr_download_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      remote_path_(from.remote_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  root_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.root_path().size() > 0) {
    root_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_path_);
  }
  if (from.has_cli_usr_task()) {
    cli_usr_task_ = new ::db_trans_cli_usr_task(*from.cli_usr_task_);
  } else {
    cli_usr_task_ = nullptr;
  }
  ::memcpy(&downloaded_received_file_size_, &from.downloaded_received_file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&downloading_received_file_szie_) -
    reinterpret_cast<char*>(&downloaded_received_file_size_)) + sizeof(downloading_received_file_szie_));
  // @@protoc_insertion_point(copy_constructor:db_trans_cli_usr_download_task)
}

void db_trans_cli_usr_download_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_trans_cli_usr_download_task_trans_5ftask_2eproto.base);
  root_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cli_usr_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downloading_received_file_szie_) -
      reinterpret_cast<char*>(&cli_usr_task_)) + sizeof(downloading_received_file_szie_));
}

db_trans_cli_usr_download_task::~db_trans_cli_usr_download_task() {
  // @@protoc_insertion_point(destructor:db_trans_cli_usr_download_task)
  SharedDtor();
}

void db_trans_cli_usr_download_task::SharedDtor() {
  root_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cli_usr_task_;
}

void db_trans_cli_usr_download_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_trans_cli_usr_download_task& db_trans_cli_usr_download_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_trans_cli_usr_download_task_trans_5ftask_2eproto.base);
  return *internal_default_instance();
}


void db_trans_cli_usr_download_task::Clear() {
// @@protoc_insertion_point(message_clear_start:db_trans_cli_usr_download_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_path_.Clear();
  root_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cli_usr_task_ != nullptr) {
    delete cli_usr_task_;
  }
  cli_usr_task_ = nullptr;
  ::memset(&downloaded_received_file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downloading_received_file_szie_) -
      reinterpret_cast<char*>(&downloaded_received_file_size_)) + sizeof(downloading_received_file_szie_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_trans_cli_usr_download_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .db_trans_cli_usr_task cli_usr_task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_cli_usr_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string remote_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_remote_path(), ptr, ctx, "db_trans_cli_usr_download_task.remote_path");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string root_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_root_path(), ptr, ctx, "db_trans_cli_usr_download_task.root_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 downloaded_received_file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          downloaded_received_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 downloading_received_file_szie = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          downloading_received_file_szie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_trans_cli_usr_download_task::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_trans_cli_usr_download_task)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .db_trans_cli_usr_task cli_usr_task = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cli_usr_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string remote_path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_remote_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_path(this->remote_path_size() - 1).data(),
            static_cast<int>(this->remote_path(this->remote_path_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_cli_usr_download_task.remote_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string root_path = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_root_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->root_path().data(), static_cast<int>(this->root_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "db_trans_cli_usr_download_task.root_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 downloaded_received_file_size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &downloaded_received_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 downloading_received_file_szie = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &downloading_received_file_szie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_trans_cli_usr_download_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_trans_cli_usr_download_task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_trans_cli_usr_download_task::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_trans_cli_usr_download_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .db_trans_cli_usr_task cli_usr_task = 1;
  if (this->has_cli_usr_task()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cli_usr_task(this), output);
  }

  // repeated string remote_path = 2;
  for (int i = 0, n = this->remote_path_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path(i).data(), static_cast<int>(this->remote_path(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_download_task.remote_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->remote_path(i), output);
  }

  // string root_path = 3;
  if (this->root_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), static_cast<int>(this->root_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_download_task.root_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->root_path(), output);
  }

  // uint64 downloaded_received_file_size = 4;
  if (this->downloaded_received_file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->downloaded_received_file_size(), output);
  }

  // uint64 downloading_received_file_szie = 5;
  if (this->downloading_received_file_szie() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->downloading_received_file_szie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_trans_cli_usr_download_task)
}

::PROTOBUF_NAMESPACE_ID::uint8* db_trans_cli_usr_download_task::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_trans_cli_usr_download_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .db_trans_cli_usr_task cli_usr_task = 1;
  if (this->has_cli_usr_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cli_usr_task(this), target);
  }

  // repeated string remote_path = 2;
  for (int i = 0, n = this->remote_path_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path(i).data(), static_cast<int>(this->remote_path(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_download_task.remote_path");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->remote_path(i), target);
  }

  // string root_path = 3;
  if (this->root_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), static_cast<int>(this->root_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "db_trans_cli_usr_download_task.root_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->root_path(), target);
  }

  // uint64 downloaded_received_file_size = 4;
  if (this->downloaded_received_file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->downloaded_received_file_size(), target);
  }

  // uint64 downloading_received_file_szie = 5;
  if (this->downloading_received_file_szie() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->downloading_received_file_szie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_trans_cli_usr_download_task)
  return target;
}

size_t db_trans_cli_usr_download_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:db_trans_cli_usr_download_task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string remote_path = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->remote_path_size());
  for (int i = 0, n = this->remote_path_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->remote_path(i));
  }

  // string root_path = 3;
  if (this->root_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->root_path());
  }

  // .db_trans_cli_usr_task cli_usr_task = 1;
  if (this->has_cli_usr_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cli_usr_task_);
  }

  // uint64 downloaded_received_file_size = 4;
  if (this->downloaded_received_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->downloaded_received_file_size());
  }

  // uint64 downloading_received_file_szie = 5;
  if (this->downloading_received_file_szie() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->downloading_received_file_szie());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_trans_cli_usr_download_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:db_trans_cli_usr_download_task)
  GOOGLE_DCHECK_NE(&from, this);
  const db_trans_cli_usr_download_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_trans_cli_usr_download_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:db_trans_cli_usr_download_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:db_trans_cli_usr_download_task)
    MergeFrom(*source);
  }
}

void db_trans_cli_usr_download_task::MergeFrom(const db_trans_cli_usr_download_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:db_trans_cli_usr_download_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remote_path_.MergeFrom(from.remote_path_);
  if (from.root_path().size() > 0) {

    root_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_path_);
  }
  if (from.has_cli_usr_task()) {
    mutable_cli_usr_task()->::db_trans_cli_usr_task::MergeFrom(from.cli_usr_task());
  }
  if (from.downloaded_received_file_size() != 0) {
    set_downloaded_received_file_size(from.downloaded_received_file_size());
  }
  if (from.downloading_received_file_szie() != 0) {
    set_downloading_received_file_szie(from.downloading_received_file_szie());
  }
}

void db_trans_cli_usr_download_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:db_trans_cli_usr_download_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_trans_cli_usr_download_task::CopyFrom(const db_trans_cli_usr_download_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:db_trans_cli_usr_download_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_trans_cli_usr_download_task::IsInitialized() const {
  return true;
}

void db_trans_cli_usr_download_task::Swap(db_trans_cli_usr_download_task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_trans_cli_usr_download_task::InternalSwap(db_trans_cli_usr_download_task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remote_path_.InternalSwap(CastToBase(&other->remote_path_));
  root_path_.Swap(&other->root_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cli_usr_task_, other->cli_usr_task_);
  swap(downloaded_received_file_size_, other->downloaded_received_file_size_);
  swap(downloading_received_file_szie_, other->downloading_received_file_szie_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_trans_cli_usr_download_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void trans_cli_upload_task::InitAsDefaultInstance() {
}
class trans_cli_upload_task::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trans_cli_upload_task::kUsrTransIdFieldNumber;
const int trans_cli_upload_task::kFileOrDirFieldNumber;
const int trans_cli_upload_task::kProcessTypeFieldNumber;
const int trans_cli_upload_task::kExchangeTypeFieldNumber;
const int trans_cli_upload_task::kFilePathFieldNumber;
const int trans_cli_upload_task::kRemotePathFieldNumber;
const int trans_cli_upload_task::kFileSizeFieldNumber;
const int trans_cli_upload_task::kTotalFileBlocksCountFieldNumber;
const int trans_cli_upload_task::kNextFileBlockNumToSendFieldNumber;
const int trans_cli_upload_task::kTransSessionIdFieldNumber;
const int trans_cli_upload_task::kTransStatusFieldNumber;
const int trans_cli_upload_task::kFileHashFieldNumber;
const int trans_cli_upload_task::kMaxReceivedFileBlockNumFieldNumber;
const int trans_cli_upload_task::kReceivedFileBlocksCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trans_cli_upload_task::trans_cli_upload_task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans_cli_upload_task)
}
trans_cli_upload_task::trans_cli_upload_task(const trans_cli_upload_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.remote_path().size() > 0) {
    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  ::memcpy(&file_or_dir_, &from.file_or_dir_,
    static_cast<size_t>(reinterpret_cast<char*>(&received_file_blocks_count_) -
    reinterpret_cast<char*>(&file_or_dir_)) + sizeof(received_file_blocks_count_));
  // @@protoc_insertion_point(copy_constructor:trans_cli_upload_task)
}

void trans_cli_upload_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trans_cli_upload_task_trans_5ftask_2eproto.base);
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_or_dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_file_blocks_count_) -
      reinterpret_cast<char*>(&file_or_dir_)) + sizeof(received_file_blocks_count_));
}

trans_cli_upload_task::~trans_cli_upload_task() {
  // @@protoc_insertion_point(destructor:trans_cli_upload_task)
  SharedDtor();
}

void trans_cli_upload_task::SharedDtor() {
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void trans_cli_upload_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trans_cli_upload_task& trans_cli_upload_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trans_cli_upload_task_trans_5ftask_2eproto.base);
  return *internal_default_instance();
}


void trans_cli_upload_task::Clear() {
// @@protoc_insertion_point(message_clear_start:trans_cli_upload_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_or_dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_file_blocks_count_) -
      reinterpret_cast<char*>(&file_or_dir_)) + sizeof(received_file_blocks_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* trans_cli_upload_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string usr_trans_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "trans_cli_upload_task.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 file_or_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          file_or_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 process_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          process_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          exchange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_file_path(), ptr, ctx, "trans_cli_upload_task.file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_path(), ptr, ctx, "trans_cli_upload_task.remote_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_file_blocks_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_file_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 next_file_block_num_to_send = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          next_file_block_num_to_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "trans_cli_upload_task.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trans_status = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          trans_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          file_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_received_file_block_num = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          max_received_file_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 received_file_blocks_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          received_file_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool trans_cli_upload_task::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:trans_cli_upload_task)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string usr_trans_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_cli_upload_task.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 file_or_dir = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_or_dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 process_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exchange_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_path = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_cli_upload_task.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_path = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_path().data(), static_cast<int>(this->remote_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_cli_upload_task.remote_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_file_blocks_count = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_file_blocks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 next_file_block_num_to_send = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_file_block_num_to_send_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_cli_upload_task.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trans_status = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_hash = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_received_file_block_num = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_received_file_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 received_file_blocks_count = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_file_blocks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trans_cli_upload_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trans_cli_upload_task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void trans_cli_upload_task::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trans_cli_upload_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usr_trans_id = 1;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_upload_task.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->usr_trans_id(), output);
  }

  // int32 file_or_dir = 2;
  if (this->file_or_dir() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->file_or_dir(), output);
  }

  // int32 process_type = 3;
  if (this->process_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->process_type(), output);
  }

  // int32 exchange_type = 4;
  if (this->exchange_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->exchange_type(), output);
  }

  // string file_path = 5;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_upload_task.file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file_path(), output);
  }

  // string remote_path = 6;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_upload_task.remote_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->remote_path(), output);
  }

  // uint64 file_size = 7;
  if (this->file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->file_size(), output);
  }

  // uint64 total_file_blocks_count = 8;
  if (this->total_file_blocks_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->total_file_blocks_count(), output);
  }

  // uint64 next_file_block_num_to_send = 9;
  if (this->next_file_block_num_to_send() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->next_file_block_num_to_send(), output);
  }

  // string trans_session_id = 10;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_upload_task.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->trans_session_id(), output);
  }

  // int32 trans_status = 11;
  if (this->trans_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->trans_status(), output);
  }

  // uint64 file_hash = 12;
  if (this->file_hash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(12, this->file_hash(), output);
  }

  // uint64 max_received_file_block_num = 13;
  if (this->max_received_file_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(13, this->max_received_file_block_num(), output);
  }

  // uint64 received_file_blocks_count = 14;
  if (this->received_file_blocks_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(14, this->received_file_blocks_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trans_cli_upload_task)
}

::PROTOBUF_NAMESPACE_ID::uint8* trans_cli_upload_task::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans_cli_upload_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usr_trans_id = 1;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_upload_task.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->usr_trans_id(), target);
  }

  // int32 file_or_dir = 2;
  if (this->file_or_dir() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->file_or_dir(), target);
  }

  // int32 process_type = 3;
  if (this->process_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->process_type(), target);
  }

  // int32 exchange_type = 4;
  if (this->exchange_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->exchange_type(), target);
  }

  // string file_path = 5;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_upload_task.file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->file_path(), target);
  }

  // string remote_path = 6;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_upload_task.remote_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->remote_path(), target);
  }

  // uint64 file_size = 7;
  if (this->file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->file_size(), target);
  }

  // uint64 total_file_blocks_count = 8;
  if (this->total_file_blocks_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->total_file_blocks_count(), target);
  }

  // uint64 next_file_block_num_to_send = 9;
  if (this->next_file_block_num_to_send() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->next_file_block_num_to_send(), target);
  }

  // string trans_session_id = 10;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_upload_task.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->trans_session_id(), target);
  }

  // int32 trans_status = 11;
  if (this->trans_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->trans_status(), target);
  }

  // uint64 file_hash = 12;
  if (this->file_hash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->file_hash(), target);
  }

  // uint64 max_received_file_block_num = 13;
  if (this->max_received_file_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->max_received_file_block_num(), target);
  }

  // uint64 received_file_blocks_count = 14;
  if (this->received_file_blocks_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->received_file_blocks_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans_cli_upload_task)
  return target;
}

size_t trans_cli_upload_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans_cli_upload_task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string usr_trans_id = 1;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // string file_path = 5;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // string remote_path = 6;
  if (this->remote_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_path());
  }

  // string trans_session_id = 10;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // int32 file_or_dir = 2;
  if (this->file_or_dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->file_or_dir());
  }

  // int32 process_type = 3;
  if (this->process_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->process_type());
  }

  // uint64 file_size = 7;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // int32 exchange_type = 4;
  if (this->exchange_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange_type());
  }

  // int32 trans_status = 11;
  if (this->trans_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trans_status());
  }

  // uint64 total_file_blocks_count = 8;
  if (this->total_file_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->total_file_blocks_count());
  }

  // uint64 next_file_block_num_to_send = 9;
  if (this->next_file_block_num_to_send() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->next_file_block_num_to_send());
  }

  // uint64 file_hash = 12;
  if (this->file_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_hash());
  }

  // uint64 max_received_file_block_num = 13;
  if (this->max_received_file_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->max_received_file_block_num());
  }

  // uint64 received_file_blocks_count = 14;
  if (this->received_file_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->received_file_blocks_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trans_cli_upload_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans_cli_upload_task)
  GOOGLE_DCHECK_NE(&from, this);
  const trans_cli_upload_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trans_cli_upload_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans_cli_upload_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans_cli_upload_task)
    MergeFrom(*source);
  }
}

void trans_cli_upload_task::MergeFrom(const trans_cli_upload_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans_cli_upload_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.remote_path().size() > 0) {

    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.file_or_dir() != 0) {
    set_file_or_dir(from.file_or_dir());
  }
  if (from.process_type() != 0) {
    set_process_type(from.process_type());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.exchange_type() != 0) {
    set_exchange_type(from.exchange_type());
  }
  if (from.trans_status() != 0) {
    set_trans_status(from.trans_status());
  }
  if (from.total_file_blocks_count() != 0) {
    set_total_file_blocks_count(from.total_file_blocks_count());
  }
  if (from.next_file_block_num_to_send() != 0) {
    set_next_file_block_num_to_send(from.next_file_block_num_to_send());
  }
  if (from.file_hash() != 0) {
    set_file_hash(from.file_hash());
  }
  if (from.max_received_file_block_num() != 0) {
    set_max_received_file_block_num(from.max_received_file_block_num());
  }
  if (from.received_file_blocks_count() != 0) {
    set_received_file_blocks_count(from.received_file_blocks_count());
  }
}

void trans_cli_upload_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans_cli_upload_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trans_cli_upload_task::CopyFrom(const trans_cli_upload_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans_cli_upload_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trans_cli_upload_task::IsInitialized() const {
  return true;
}

void trans_cli_upload_task::Swap(trans_cli_upload_task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trans_cli_upload_task::InternalSwap(trans_cli_upload_task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_or_dir_, other->file_or_dir_);
  swap(process_type_, other->process_type_);
  swap(file_size_, other->file_size_);
  swap(exchange_type_, other->exchange_type_);
  swap(trans_status_, other->trans_status_);
  swap(total_file_blocks_count_, other->total_file_blocks_count_);
  swap(next_file_block_num_to_send_, other->next_file_block_num_to_send_);
  swap(file_hash_, other->file_hash_);
  swap(max_received_file_block_num_, other->max_received_file_block_num_);
  swap(received_file_blocks_count_, other->received_file_blocks_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata trans_cli_upload_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse() {}
trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::MergeFrom(const trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void trans_svr_upload_task::InitAsDefaultInstance() {
}
class trans_svr_upload_task::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trans_svr_upload_task::kNodeIdFieldNumber;
const int trans_svr_upload_task::kUsrTransIdFieldNumber;
const int trans_svr_upload_task::kFileOrDirFieldNumber;
const int trans_svr_upload_task::kProcessTypeFieldNumber;
const int trans_svr_upload_task::kExchangeTypeFieldNumber;
const int trans_svr_upload_task::kFilePathFieldNumber;
const int trans_svr_upload_task::kStoreFilePathFieldNumber;
const int trans_svr_upload_task::kTotalFileBlocksCountFieldNumber;
const int trans_svr_upload_task::kFileSizeFieldNumber;
const int trans_svr_upload_task::kMaxReceivedFileBlockNumFieldNumber;
const int trans_svr_upload_task::kFileHashFieldNumber;
const int trans_svr_upload_task::kTransSessionIdFieldNumber;
const int trans_svr_upload_task::kTransStatusFieldNumber;
const int trans_svr_upload_task::kReceivedFileBlocksNumFieldNumber;
const int trans_svr_upload_task::kLastResendBlockNumFieldNumber;
const int trans_svr_upload_task::kTransferRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trans_svr_upload_task::trans_svr_upload_task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans_svr_upload_task)
}
trans_svr_upload_task::trans_svr_upload_task(const trans_svr_upload_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  received_file_blocks_num_.MergeFrom(from.received_file_blocks_num_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  store_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.store_file_path().size() > 0) {
    store_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_file_path_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  ::memcpy(&file_or_dir_, &from.file_or_dir_,
    static_cast<size_t>(reinterpret_cast<char*>(&transfer_rate_) -
    reinterpret_cast<char*>(&file_or_dir_)) + sizeof(transfer_rate_));
  // @@protoc_insertion_point(copy_constructor:trans_svr_upload_task)
}

void trans_svr_upload_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trans_svr_upload_task_trans_5ftask_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_or_dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_rate_) -
      reinterpret_cast<char*>(&file_or_dir_)) + sizeof(transfer_rate_));
}

trans_svr_upload_task::~trans_svr_upload_task() {
  // @@protoc_insertion_point(destructor:trans_svr_upload_task)
  SharedDtor();
}

void trans_svr_upload_task::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void trans_svr_upload_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trans_svr_upload_task& trans_svr_upload_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trans_svr_upload_task_trans_5ftask_2eproto.base);
  return *internal_default_instance();
}


void trans_svr_upload_task::Clear() {
// @@protoc_insertion_point(message_clear_start:trans_svr_upload_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  received_file_blocks_num_.Clear();
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_or_dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_rate_) -
      reinterpret_cast<char*>(&file_or_dir_)) + sizeof(transfer_rate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* trans_svr_upload_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "trans_svr_upload_task.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "trans_svr_upload_task.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 file_or_dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_or_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 process_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          process_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exchange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_file_path(), ptr, ctx, "trans_svr_upload_task.file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string store_file_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_store_file_path(), ptr, ctx, "trans_svr_upload_task.store_file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_file_blocks_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          total_file_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_received_file_block_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          max_received_file_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          file_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "trans_svr_upload_task.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trans_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          trans_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, uint64> received_file_blocks_num = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&received_file_blocks_num_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // uint64 last_resend_block_num = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          last_resend_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transfer_rate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          transfer_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool trans_svr_upload_task::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:trans_svr_upload_task)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_upload_task.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_upload_task.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 file_or_dir = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_or_dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 process_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exchange_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_path = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_upload_task.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string store_file_path = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_store_file_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->store_file_path().data(), static_cast<int>(this->store_file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_upload_task.store_file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_file_blocks_count = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_file_blocks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_received_file_block_num = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_received_file_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_hash = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_upload_task.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trans_status = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, uint64> received_file_blocks_num = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 > > parser(&received_file_blocks_num_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 last_resend_block_num = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_resend_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 transfer_rate = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transfer_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trans_svr_upload_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trans_svr_upload_task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void trans_svr_upload_task::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trans_svr_upload_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr_trans_id(), output);
  }

  // int32 file_or_dir = 3;
  if (this->file_or_dir() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->file_or_dir(), output);
  }

  // int32 process_type = 4;
  if (this->process_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->process_type(), output);
  }

  // int32 exchange_type = 5;
  if (this->exchange_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->exchange_type(), output);
  }

  // string file_path = 6;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_path(), output);
  }

  // string store_file_path = 7;
  if (this->store_file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->store_file_path().data(), static_cast<int>(this->store_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.store_file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->store_file_path(), output);
  }

  // uint64 total_file_blocks_count = 8;
  if (this->total_file_blocks_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->total_file_blocks_count(), output);
  }

  // uint64 file_size = 9;
  if (this->file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->file_size(), output);
  }

  // uint64 max_received_file_block_num = 10;
  if (this->max_received_file_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->max_received_file_block_num(), output);
  }

  // uint64 file_hash = 11;
  if (this->file_hash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->file_hash(), output);
  }

  // string trans_session_id = 12;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->trans_session_id(), output);
  }

  // int32 trans_status = 13;
  if (this->trans_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->trans_status(), output);
  }

  // map<uint64, uint64> received_file_blocks_num = 14;
  if (!this->received_file_blocks_num().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->received_file_blocks_num().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->received_file_blocks_num().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->received_file_blocks_num().begin();
          it != this->received_file_blocks_num().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(14, entry, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->received_file_blocks_num().begin();
          it != this->received_file_blocks_num().end(); ++it) {
        trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(14, entry, output);
      }
    }
  }

  // uint64 last_resend_block_num = 15;
  if (this->last_resend_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(15, this->last_resend_block_num(), output);
  }

  // uint64 transfer_rate = 16;
  if (this->transfer_rate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(16, this->transfer_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trans_svr_upload_task)
}

::PROTOBUF_NAMESPACE_ID::uint8* trans_svr_upload_task::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans_svr_upload_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->usr_trans_id(), target);
  }

  // int32 file_or_dir = 3;
  if (this->file_or_dir() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->file_or_dir(), target);
  }

  // int32 process_type = 4;
  if (this->process_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->process_type(), target);
  }

  // int32 exchange_type = 5;
  if (this->exchange_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->exchange_type(), target);
  }

  // string file_path = 6;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->file_path(), target);
  }

  // string store_file_path = 7;
  if (this->store_file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->store_file_path().data(), static_cast<int>(this->store_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.store_file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->store_file_path(), target);
  }

  // uint64 total_file_blocks_count = 8;
  if (this->total_file_blocks_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->total_file_blocks_count(), target);
  }

  // uint64 file_size = 9;
  if (this->file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->file_size(), target);
  }

  // uint64 max_received_file_block_num = 10;
  if (this->max_received_file_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->max_received_file_block_num(), target);
  }

  // uint64 file_hash = 11;
  if (this->file_hash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->file_hash(), target);
  }

  // string trans_session_id = 12;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_upload_task.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->trans_session_id(), target);
  }

  // int32 trans_status = 13;
  if (this->trans_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->trans_status(), target);
  }

  // map<uint64, uint64> received_file_blocks_num = 14;
  if (!this->received_file_blocks_num().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->received_file_blocks_num().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->received_file_blocks_num().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->received_file_blocks_num().begin();
          it != this->received_file_blocks_num().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(14, entry, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->received_file_blocks_num().begin();
          it != this->received_file_blocks_num().end(); ++it) {
        trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(14, entry, target);
      }
    }
  }

  // uint64 last_resend_block_num = 15;
  if (this->last_resend_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->last_resend_block_num(), target);
  }

  // uint64 transfer_rate = 16;
  if (this->transfer_rate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->transfer_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans_svr_upload_task)
  return target;
}

size_t trans_svr_upload_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans_svr_upload_task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, uint64> received_file_blocks_num = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->received_file_blocks_num_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
      it = this->received_file_blocks_num().begin();
      it != this->received_file_blocks_num().end(); ++it) {
    trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // string file_path = 6;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // string store_file_path = 7;
  if (this->store_file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->store_file_path());
  }

  // string trans_session_id = 12;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // int32 file_or_dir = 3;
  if (this->file_or_dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->file_or_dir());
  }

  // int32 process_type = 4;
  if (this->process_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->process_type());
  }

  // uint64 total_file_blocks_count = 8;
  if (this->total_file_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->total_file_blocks_count());
  }

  // uint64 file_size = 9;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // int32 exchange_type = 5;
  if (this->exchange_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange_type());
  }

  // int32 trans_status = 13;
  if (this->trans_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trans_status());
  }

  // uint64 max_received_file_block_num = 10;
  if (this->max_received_file_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->max_received_file_block_num());
  }

  // uint64 file_hash = 11;
  if (this->file_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_hash());
  }

  // uint64 last_resend_block_num = 15;
  if (this->last_resend_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->last_resend_block_num());
  }

  // uint64 transfer_rate = 16;
  if (this->transfer_rate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->transfer_rate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trans_svr_upload_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans_svr_upload_task)
  GOOGLE_DCHECK_NE(&from, this);
  const trans_svr_upload_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trans_svr_upload_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans_svr_upload_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans_svr_upload_task)
    MergeFrom(*source);
  }
}

void trans_svr_upload_task::MergeFrom(const trans_svr_upload_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans_svr_upload_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  received_file_blocks_num_.MergeFrom(from.received_file_blocks_num_);
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.store_file_path().size() > 0) {

    store_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_file_path_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.file_or_dir() != 0) {
    set_file_or_dir(from.file_or_dir());
  }
  if (from.process_type() != 0) {
    set_process_type(from.process_type());
  }
  if (from.total_file_blocks_count() != 0) {
    set_total_file_blocks_count(from.total_file_blocks_count());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.exchange_type() != 0) {
    set_exchange_type(from.exchange_type());
  }
  if (from.trans_status() != 0) {
    set_trans_status(from.trans_status());
  }
  if (from.max_received_file_block_num() != 0) {
    set_max_received_file_block_num(from.max_received_file_block_num());
  }
  if (from.file_hash() != 0) {
    set_file_hash(from.file_hash());
  }
  if (from.last_resend_block_num() != 0) {
    set_last_resend_block_num(from.last_resend_block_num());
  }
  if (from.transfer_rate() != 0) {
    set_transfer_rate(from.transfer_rate());
  }
}

void trans_svr_upload_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans_svr_upload_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trans_svr_upload_task::CopyFrom(const trans_svr_upload_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans_svr_upload_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trans_svr_upload_task::IsInitialized() const {
  return true;
}

void trans_svr_upload_task::Swap(trans_svr_upload_task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trans_svr_upload_task::InternalSwap(trans_svr_upload_task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  received_file_blocks_num_.Swap(&other->received_file_blocks_num_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  store_file_path_.Swap(&other->store_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_or_dir_, other->file_or_dir_);
  swap(process_type_, other->process_type_);
  swap(total_file_blocks_count_, other->total_file_blocks_count_);
  swap(file_size_, other->file_size_);
  swap(exchange_type_, other->exchange_type_);
  swap(trans_status_, other->trans_status_);
  swap(max_received_file_block_num_, other->max_received_file_block_num_);
  swap(file_hash_, other->file_hash_);
  swap(last_resend_block_num_, other->last_resend_block_num_);
  swap(transfer_rate_, other->transfer_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata trans_svr_upload_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse() {}
trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::MergeFrom(const trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void trans_cli_download_task::InitAsDefaultInstance() {
}
class trans_cli_download_task::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trans_cli_download_task::kUsrTransIdFieldNumber;
const int trans_cli_download_task::kFileOrDirFieldNumber;
const int trans_cli_download_task::kProcessTypeFieldNumber;
const int trans_cli_download_task::kExchangeTypeFieldNumber;
const int trans_cli_download_task::kFilePathFieldNumber;
const int trans_cli_download_task::kStoreFilePathFieldNumber;
const int trans_cli_download_task::kTotalFileBlocksCountFieldNumber;
const int trans_cli_download_task::kFileSizeFieldNumber;
const int trans_cli_download_task::kMaxReceivedFileBlockNumFieldNumber;
const int trans_cli_download_task::kFileHashFieldNumber;
const int trans_cli_download_task::kTransSessionIdFieldNumber;
const int trans_cli_download_task::kTransStatusFieldNumber;
const int trans_cli_download_task::kReceivedFileBlocksNumFieldNumber;
const int trans_cli_download_task::kLastResendBlockNumFieldNumber;
const int trans_cli_download_task::kTransferRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trans_cli_download_task::trans_cli_download_task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans_cli_download_task)
}
trans_cli_download_task::trans_cli_download_task(const trans_cli_download_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  received_file_blocks_num_.MergeFrom(from.received_file_blocks_num_);
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  store_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.store_file_path().size() > 0) {
    store_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_file_path_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  ::memcpy(&file_or_dir_, &from.file_or_dir_,
    static_cast<size_t>(reinterpret_cast<char*>(&transfer_rate_) -
    reinterpret_cast<char*>(&file_or_dir_)) + sizeof(transfer_rate_));
  // @@protoc_insertion_point(copy_constructor:trans_cli_download_task)
}

void trans_cli_download_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trans_cli_download_task_trans_5ftask_2eproto.base);
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_or_dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_rate_) -
      reinterpret_cast<char*>(&file_or_dir_)) + sizeof(transfer_rate_));
}

trans_cli_download_task::~trans_cli_download_task() {
  // @@protoc_insertion_point(destructor:trans_cli_download_task)
  SharedDtor();
}

void trans_cli_download_task::SharedDtor() {
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void trans_cli_download_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trans_cli_download_task& trans_cli_download_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trans_cli_download_task_trans_5ftask_2eproto.base);
  return *internal_default_instance();
}


void trans_cli_download_task::Clear() {
// @@protoc_insertion_point(message_clear_start:trans_cli_download_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  received_file_blocks_num_.Clear();
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  store_file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_or_dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_rate_) -
      reinterpret_cast<char*>(&file_or_dir_)) + sizeof(transfer_rate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* trans_cli_download_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string usr_trans_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "trans_cli_download_task.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 file_or_dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          file_or_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 process_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          process_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          exchange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_file_path(), ptr, ctx, "trans_cli_download_task.file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string store_file_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_store_file_path(), ptr, ctx, "trans_cli_download_task.store_file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_file_blocks_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_file_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_received_file_block_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          max_received_file_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          file_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "trans_cli_download_task.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trans_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          trans_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, uint64> received_file_blocks_num = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&received_file_blocks_num_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // uint64 last_resend_block_num = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          last_resend_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transfer_rate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          transfer_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool trans_cli_download_task::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:trans_cli_download_task)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string usr_trans_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_cli_download_task.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 file_or_dir = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_or_dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 process_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exchange_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_path = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_cli_download_task.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string store_file_path = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_store_file_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->store_file_path().data(), static_cast<int>(this->store_file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_cli_download_task.store_file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_file_blocks_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_file_blocks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_received_file_block_num = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_received_file_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_hash = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_cli_download_task.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trans_status = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, uint64> received_file_blocks_num = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 > > parser(&received_file_blocks_num_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 last_resend_block_num = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_resend_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 transfer_rate = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transfer_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trans_cli_download_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trans_cli_download_task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void trans_cli_download_task::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trans_cli_download_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usr_trans_id = 1;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_download_task.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->usr_trans_id(), output);
  }

  // int32 file_or_dir = 2;
  if (this->file_or_dir() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->file_or_dir(), output);
  }

  // int32 process_type = 3;
  if (this->process_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->process_type(), output);
  }

  // int32 exchange_type = 4;
  if (this->exchange_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->exchange_type(), output);
  }

  // string file_path = 5;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_download_task.file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file_path(), output);
  }

  // string store_file_path = 6;
  if (this->store_file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->store_file_path().data(), static_cast<int>(this->store_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_download_task.store_file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->store_file_path(), output);
  }

  // uint64 total_file_blocks_count = 7;
  if (this->total_file_blocks_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->total_file_blocks_count(), output);
  }

  // uint64 file_size = 8;
  if (this->file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->file_size(), output);
  }

  // uint64 max_received_file_block_num = 9;
  if (this->max_received_file_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->max_received_file_block_num(), output);
  }

  // uint64 file_hash = 10;
  if (this->file_hash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->file_hash(), output);
  }

  // string trans_session_id = 11;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_download_task.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->trans_session_id(), output);
  }

  // int32 trans_status = 12;
  if (this->trans_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->trans_status(), output);
  }

  // map<uint64, uint64> received_file_blocks_num = 13;
  if (!this->received_file_blocks_num().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->received_file_blocks_num().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->received_file_blocks_num().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->received_file_blocks_num().begin();
          it != this->received_file_blocks_num().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(13, entry, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->received_file_blocks_num().begin();
          it != this->received_file_blocks_num().end(); ++it) {
        trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(13, entry, output);
      }
    }
  }

  // uint64 last_resend_block_num = 14;
  if (this->last_resend_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(14, this->last_resend_block_num(), output);
  }

  // uint64 transfer_rate = 15;
  if (this->transfer_rate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(15, this->transfer_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trans_cli_download_task)
}

::PROTOBUF_NAMESPACE_ID::uint8* trans_cli_download_task::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans_cli_download_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usr_trans_id = 1;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_download_task.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->usr_trans_id(), target);
  }

  // int32 file_or_dir = 2;
  if (this->file_or_dir() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->file_or_dir(), target);
  }

  // int32 process_type = 3;
  if (this->process_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->process_type(), target);
  }

  // int32 exchange_type = 4;
  if (this->exchange_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->exchange_type(), target);
  }

  // string file_path = 5;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_download_task.file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->file_path(), target);
  }

  // string store_file_path = 6;
  if (this->store_file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->store_file_path().data(), static_cast<int>(this->store_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_download_task.store_file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->store_file_path(), target);
  }

  // uint64 total_file_blocks_count = 7;
  if (this->total_file_blocks_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->total_file_blocks_count(), target);
  }

  // uint64 file_size = 8;
  if (this->file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->file_size(), target);
  }

  // uint64 max_received_file_block_num = 9;
  if (this->max_received_file_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->max_received_file_block_num(), target);
  }

  // uint64 file_hash = 10;
  if (this->file_hash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->file_hash(), target);
  }

  // string trans_session_id = 11;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_cli_download_task.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->trans_session_id(), target);
  }

  // int32 trans_status = 12;
  if (this->trans_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->trans_status(), target);
  }

  // map<uint64, uint64> received_file_blocks_num = 13;
  if (!this->received_file_blocks_num().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->received_file_blocks_num().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->received_file_blocks_num().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->received_file_blocks_num().begin();
          it != this->received_file_blocks_num().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(13, entry, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->received_file_blocks_num().begin();
          it != this->received_file_blocks_num().end(); ++it) {
        trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(13, entry, target);
      }
    }
  }

  // uint64 last_resend_block_num = 14;
  if (this->last_resend_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->last_resend_block_num(), target);
  }

  // uint64 transfer_rate = 15;
  if (this->transfer_rate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->transfer_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans_cli_download_task)
  return target;
}

size_t trans_cli_download_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans_cli_download_task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, uint64> received_file_blocks_num = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->received_file_blocks_num_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
      it = this->received_file_blocks_num().begin();
      it != this->received_file_blocks_num().end(); ++it) {
    trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // string usr_trans_id = 1;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // string file_path = 5;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // string store_file_path = 6;
  if (this->store_file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->store_file_path());
  }

  // string trans_session_id = 11;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // int32 file_or_dir = 2;
  if (this->file_or_dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->file_or_dir());
  }

  // int32 process_type = 3;
  if (this->process_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->process_type());
  }

  // uint64 total_file_blocks_count = 7;
  if (this->total_file_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->total_file_blocks_count());
  }

  // uint64 file_size = 8;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // int32 exchange_type = 4;
  if (this->exchange_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange_type());
  }

  // int32 trans_status = 12;
  if (this->trans_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trans_status());
  }

  // uint64 max_received_file_block_num = 9;
  if (this->max_received_file_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->max_received_file_block_num());
  }

  // uint64 file_hash = 10;
  if (this->file_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_hash());
  }

  // uint64 last_resend_block_num = 14;
  if (this->last_resend_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->last_resend_block_num());
  }

  // uint64 transfer_rate = 15;
  if (this->transfer_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->transfer_rate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trans_cli_download_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans_cli_download_task)
  GOOGLE_DCHECK_NE(&from, this);
  const trans_cli_download_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trans_cli_download_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans_cli_download_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans_cli_download_task)
    MergeFrom(*source);
  }
}

void trans_cli_download_task::MergeFrom(const trans_cli_download_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans_cli_download_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  received_file_blocks_num_.MergeFrom(from.received_file_blocks_num_);
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.store_file_path().size() > 0) {

    store_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.store_file_path_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.file_or_dir() != 0) {
    set_file_or_dir(from.file_or_dir());
  }
  if (from.process_type() != 0) {
    set_process_type(from.process_type());
  }
  if (from.total_file_blocks_count() != 0) {
    set_total_file_blocks_count(from.total_file_blocks_count());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.exchange_type() != 0) {
    set_exchange_type(from.exchange_type());
  }
  if (from.trans_status() != 0) {
    set_trans_status(from.trans_status());
  }
  if (from.max_received_file_block_num() != 0) {
    set_max_received_file_block_num(from.max_received_file_block_num());
  }
  if (from.file_hash() != 0) {
    set_file_hash(from.file_hash());
  }
  if (from.last_resend_block_num() != 0) {
    set_last_resend_block_num(from.last_resend_block_num());
  }
  if (from.transfer_rate() != 0) {
    set_transfer_rate(from.transfer_rate());
  }
}

void trans_cli_download_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans_cli_download_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trans_cli_download_task::CopyFrom(const trans_cli_download_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans_cli_download_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trans_cli_download_task::IsInitialized() const {
  return true;
}

void trans_cli_download_task::Swap(trans_cli_download_task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trans_cli_download_task::InternalSwap(trans_cli_download_task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  received_file_blocks_num_.Swap(&other->received_file_blocks_num_);
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  store_file_path_.Swap(&other->store_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_or_dir_, other->file_or_dir_);
  swap(process_type_, other->process_type_);
  swap(total_file_blocks_count_, other->total_file_blocks_count_);
  swap(file_size_, other->file_size_);
  swap(exchange_type_, other->exchange_type_);
  swap(trans_status_, other->trans_status_);
  swap(max_received_file_block_num_, other->max_received_file_block_num_);
  swap(file_hash_, other->file_hash_);
  swap(last_resend_block_num_, other->last_resend_block_num_);
  swap(transfer_rate_, other->transfer_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata trans_cli_download_task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void trans_svr_download_task::InitAsDefaultInstance() {
}
class trans_svr_download_task::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trans_svr_download_task::kNodeIdFieldNumber;
const int trans_svr_download_task::kUsrTransIdFieldNumber;
const int trans_svr_download_task::kFileOrDirFieldNumber;
const int trans_svr_download_task::kProcessTypeFieldNumber;
const int trans_svr_download_task::kExchangeTypeFieldNumber;
const int trans_svr_download_task::kFilePathFieldNumber;
const int trans_svr_download_task::kRemotePathFieldNumber;
const int trans_svr_download_task::kFileSizeFieldNumber;
const int trans_svr_download_task::kTotalFileBlocksCountFieldNumber;
const int trans_svr_download_task::kNextFileBlockNumToSendFieldNumber;
const int trans_svr_download_task::kTransSessionIdFieldNumber;
const int trans_svr_download_task::kTransStatusFieldNumber;
const int trans_svr_download_task::kFileHashFieldNumber;
const int trans_svr_download_task::kMaxReceivedFileBlockNumFieldNumber;
const int trans_svr_download_task::kReceivedFileBlocksCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trans_svr_download_task::trans_svr_download_task()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trans_svr_download_task)
}
trans_svr_download_task::trans_svr_download_task(const trans_svr_download_task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.remote_path().size() > 0) {
    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  ::memcpy(&file_or_dir_, &from.file_or_dir_,
    static_cast<size_t>(reinterpret_cast<char*>(&received_file_blocks_count_) -
    reinterpret_cast<char*>(&file_or_dir_)) + sizeof(received_file_blocks_count_));
  // @@protoc_insertion_point(copy_constructor:trans_svr_download_task)
}

void trans_svr_download_task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trans_svr_download_task_trans_5ftask_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_or_dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_file_blocks_count_) -
      reinterpret_cast<char*>(&file_or_dir_)) + sizeof(received_file_blocks_count_));
}

trans_svr_download_task::~trans_svr_download_task() {
  // @@protoc_insertion_point(destructor:trans_svr_download_task)
  SharedDtor();
}

void trans_svr_download_task::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void trans_svr_download_task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trans_svr_download_task& trans_svr_download_task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trans_svr_download_task_trans_5ftask_2eproto.base);
  return *internal_default_instance();
}


void trans_svr_download_task::Clear() {
// @@protoc_insertion_point(message_clear_start:trans_svr_download_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_or_dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_file_blocks_count_) -
      reinterpret_cast<char*>(&file_or_dir_)) + sizeof(received_file_blocks_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* trans_svr_download_task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "trans_svr_download_task.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "trans_svr_download_task.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 file_or_dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_or_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 process_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          process_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          exchange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_file_path(), ptr, ctx, "trans_svr_download_task.file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_path(), ptr, ctx, "trans_svr_download_task.remote_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_file_blocks_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          total_file_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 next_file_block_num_to_send = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          next_file_block_num_to_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "trans_svr_download_task.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 trans_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          trans_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_hash = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          file_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_received_file_block_num = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          max_received_file_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 received_file_blocks_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          received_file_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool trans_svr_download_task::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:trans_svr_download_task)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_download_task.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_download_task.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 file_or_dir = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_or_dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 process_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exchange_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_path = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_download_task.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_path = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_path().data(), static_cast<int>(this->remote_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_download_task.remote_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_file_blocks_count = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_file_blocks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 next_file_block_num_to_send = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_file_block_num_to_send_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "trans_svr_download_task.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trans_status = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_hash = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_received_file_block_num = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_received_file_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 received_file_blocks_count = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_file_blocks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trans_svr_download_task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trans_svr_download_task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void trans_svr_download_task::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trans_svr_download_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr_trans_id(), output);
  }

  // int32 file_or_dir = 3;
  if (this->file_or_dir() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->file_or_dir(), output);
  }

  // int32 process_type = 4;
  if (this->process_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->process_type(), output);
  }

  // int32 exchange_type = 5;
  if (this->exchange_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->exchange_type(), output);
  }

  // string file_path = 6;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_path(), output);
  }

  // string remote_path = 7;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.remote_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->remote_path(), output);
  }

  // uint64 file_size = 8;
  if (this->file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->file_size(), output);
  }

  // uint64 total_file_blocks_count = 9;
  if (this->total_file_blocks_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->total_file_blocks_count(), output);
  }

  // uint64 next_file_block_num_to_send = 10;
  if (this->next_file_block_num_to_send() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->next_file_block_num_to_send(), output);
  }

  // string trans_session_id = 11;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->trans_session_id(), output);
  }

  // int32 trans_status = 12;
  if (this->trans_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->trans_status(), output);
  }

  // uint64 file_hash = 13;
  if (this->file_hash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(13, this->file_hash(), output);
  }

  // uint64 max_received_file_block_num = 14;
  if (this->max_received_file_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(14, this->max_received_file_block_num(), output);
  }

  // uint64 received_file_blocks_count = 15;
  if (this->received_file_blocks_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(15, this->received_file_blocks_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trans_svr_download_task)
}

::PROTOBUF_NAMESPACE_ID::uint8* trans_svr_download_task::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trans_svr_download_task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->usr_trans_id(), target);
  }

  // int32 file_or_dir = 3;
  if (this->file_or_dir() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->file_or_dir(), target);
  }

  // int32 process_type = 4;
  if (this->process_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->process_type(), target);
  }

  // int32 exchange_type = 5;
  if (this->exchange_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->exchange_type(), target);
  }

  // string file_path = 6;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->file_path(), target);
  }

  // string remote_path = 7;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.remote_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->remote_path(), target);
  }

  // uint64 file_size = 8;
  if (this->file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->file_size(), target);
  }

  // uint64 total_file_blocks_count = 9;
  if (this->total_file_blocks_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->total_file_blocks_count(), target);
  }

  // uint64 next_file_block_num_to_send = 10;
  if (this->next_file_block_num_to_send() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->next_file_block_num_to_send(), target);
  }

  // string trans_session_id = 11;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "trans_svr_download_task.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->trans_session_id(), target);
  }

  // int32 trans_status = 12;
  if (this->trans_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->trans_status(), target);
  }

  // uint64 file_hash = 13;
  if (this->file_hash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->file_hash(), target);
  }

  // uint64 max_received_file_block_num = 14;
  if (this->max_received_file_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->max_received_file_block_num(), target);
  }

  // uint64 received_file_blocks_count = 15;
  if (this->received_file_blocks_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->received_file_blocks_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trans_svr_download_task)
  return target;
}

size_t trans_svr_download_task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trans_svr_download_task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // string file_path = 6;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // string remote_path = 7;
  if (this->remote_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_path());
  }

  // string trans_session_id = 11;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // int32 file_or_dir = 3;
  if (this->file_or_dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->file_or_dir());
  }

  // int32 process_type = 4;
  if (this->process_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->process_type());
  }

  // uint64 file_size = 8;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // int32 exchange_type = 5;
  if (this->exchange_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange_type());
  }

  // int32 trans_status = 12;
  if (this->trans_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->trans_status());
  }

  // uint64 total_file_blocks_count = 9;
  if (this->total_file_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->total_file_blocks_count());
  }

  // uint64 next_file_block_num_to_send = 10;
  if (this->next_file_block_num_to_send() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->next_file_block_num_to_send());
  }

  // uint64 file_hash = 13;
  if (this->file_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_hash());
  }

  // uint64 max_received_file_block_num = 14;
  if (this->max_received_file_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->max_received_file_block_num());
  }

  // uint64 received_file_blocks_count = 15;
  if (this->received_file_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->received_file_blocks_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trans_svr_download_task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trans_svr_download_task)
  GOOGLE_DCHECK_NE(&from, this);
  const trans_svr_download_task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trans_svr_download_task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trans_svr_download_task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trans_svr_download_task)
    MergeFrom(*source);
  }
}

void trans_svr_download_task::MergeFrom(const trans_svr_download_task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trans_svr_download_task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.remote_path().size() > 0) {

    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.file_or_dir() != 0) {
    set_file_or_dir(from.file_or_dir());
  }
  if (from.process_type() != 0) {
    set_process_type(from.process_type());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.exchange_type() != 0) {
    set_exchange_type(from.exchange_type());
  }
  if (from.trans_status() != 0) {
    set_trans_status(from.trans_status());
  }
  if (from.total_file_blocks_count() != 0) {
    set_total_file_blocks_count(from.total_file_blocks_count());
  }
  if (from.next_file_block_num_to_send() != 0) {
    set_next_file_block_num_to_send(from.next_file_block_num_to_send());
  }
  if (from.file_hash() != 0) {
    set_file_hash(from.file_hash());
  }
  if (from.max_received_file_block_num() != 0) {
    set_max_received_file_block_num(from.max_received_file_block_num());
  }
  if (from.received_file_blocks_count() != 0) {
    set_received_file_blocks_count(from.received_file_blocks_count());
  }
}

void trans_svr_download_task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trans_svr_download_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trans_svr_download_task::CopyFrom(const trans_svr_download_task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trans_svr_download_task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trans_svr_download_task::IsInitialized() const {
  return true;
}

void trans_svr_download_task::Swap(trans_svr_download_task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trans_svr_download_task::InternalSwap(trans_svr_download_task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_or_dir_, other->file_or_dir_);
  swap(process_type_, other->process_type_);
  swap(file_size_, other->file_size_);
  swap(exchange_type_, other->exchange_type_);
  swap(trans_status_, other->trans_status_);
  swap(total_file_blocks_count_, other->total_file_blocks_count_);
  swap(next_file_block_num_to_send_, other->next_file_block_num_to_send_);
  swap(file_hash_, other->file_hash_);
  swap(max_received_file_block_num_, other->max_received_file_block_num_);
  swap(received_file_blocks_count_, other->received_file_blocks_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata trans_svr_download_task::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::db_net_entity* Arena::CreateMaybeMessage< ::db_net_entity >(Arena* arena) {
  return Arena::CreateInternal< ::db_net_entity >(arena);
}
template<> PROTOBUF_NOINLINE ::db_trans_progress* Arena::CreateMaybeMessage< ::db_trans_progress >(Arena* arena) {
  return Arena::CreateInternal< ::db_trans_progress >(arena);
}
template<> PROTOBUF_NOINLINE ::db_trans_cli_usr_task* Arena::CreateMaybeMessage< ::db_trans_cli_usr_task >(Arena* arena) {
  return Arena::CreateInternal< ::db_trans_cli_usr_task >(arena);
}
template<> PROTOBUF_NOINLINE ::db_trans_cli_usr_upload_task* Arena::CreateMaybeMessage< ::db_trans_cli_usr_upload_task >(Arena* arena) {
  return Arena::CreateInternal< ::db_trans_cli_usr_upload_task >(arena);
}
template<> PROTOBUF_NOINLINE ::db_trans_cli_usr_download_task* Arena::CreateMaybeMessage< ::db_trans_cli_usr_download_task >(Arena* arena) {
  return Arena::CreateInternal< ::db_trans_cli_usr_download_task >(arena);
}
template<> PROTOBUF_NOINLINE ::trans_cli_upload_task* Arena::CreateMaybeMessage< ::trans_cli_upload_task >(Arena* arena) {
  return Arena::CreateInternal< ::trans_cli_upload_task >(arena);
}
template<> PROTOBUF_NOINLINE ::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse* Arena::CreateMaybeMessage< ::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::trans_svr_upload_task_ReceivedFileBlocksNumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::trans_svr_upload_task* Arena::CreateMaybeMessage< ::trans_svr_upload_task >(Arena* arena) {
  return Arena::CreateInternal< ::trans_svr_upload_task >(arena);
}
template<> PROTOBUF_NOINLINE ::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse* Arena::CreateMaybeMessage< ::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::trans_cli_download_task_ReceivedFileBlocksNumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::trans_cli_download_task* Arena::CreateMaybeMessage< ::trans_cli_download_task >(Arena* arena) {
  return Arena::CreateInternal< ::trans_cli_download_task >(arena);
}
template<> PROTOBUF_NOINLINE ::trans_svr_download_task* Arena::CreateMaybeMessage< ::trans_svr_download_task >(Arena* arena) {
  return Arena::CreateInternal< ::trans_svr_download_task >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
