// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransMessageApi.proto

#include "TransMessageApi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgCliNotifySvrDownloadDataReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgCliNotifySvrDownloadDataRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgDirProcessReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgDirProcessRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgDownloadFileReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgDownloadFileRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgFinishNotifiReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgFinishNotifiRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransMsgHead_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgHead_ExtenInfoEntry_DoNotUse_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgHeartbeatReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgHeartbeatRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgLoginReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgLoginRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgLogoutReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgLogoutRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgResendDataNotifiReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgResendDataNotifiRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgSendDataReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgStopDownloadReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgStopUploadReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgStopUploadRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgSvrNotifyCliEndDownloadReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgSvrNotifyCliEndDownloadRspBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgUploadFileReqBody_TransMessageApi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgUploadFileRspBody_TransMessageApi_2eproto;
class TransMsgHead_ExtenInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgHead_ExtenInfoEntry_DoNotUse> _instance;
} _TransMsgHead_ExtenInfoEntry_DoNotUse_default_instance_;
class TransMsgHeadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgHead> _instance;
} _TransMsgHead_default_instance_;
class TransMsgLoginReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgLoginReqBody> _instance;
} _TransMsgLoginReqBody_default_instance_;
class TransMsgLoginRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgLoginRspBody> _instance;
} _TransMsgLoginRspBody_default_instance_;
class TransMsgHeartbeatReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgHeartbeatReqBody> _instance;
} _TransMsgHeartbeatReqBody_default_instance_;
class TransMsgHeartbeatRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgHeartbeatRspBody> _instance;
} _TransMsgHeartbeatRspBody_default_instance_;
class TransMsgLogoutReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgLogoutReqBody> _instance;
} _TransMsgLogoutReqBody_default_instance_;
class TransMsgLogoutRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgLogoutRspBody> _instance;
} _TransMsgLogoutRspBody_default_instance_;
class TransMsgSendDataReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgSendDataReqBody> _instance;
} _TransMsgSendDataReqBody_default_instance_;
class TransMsgResendDataNotifiReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgResendDataNotifiReqBody> _instance;
} _TransMsgResendDataNotifiReqBody_default_instance_;
class TransMsgResendDataNotifiRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgResendDataNotifiRspBody> _instance;
} _TransMsgResendDataNotifiRspBody_default_instance_;
class TransMsgFinishNotifiReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgFinishNotifiReqBody> _instance;
} _TransMsgFinishNotifiReqBody_default_instance_;
class TransMsgFinishNotifiRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgFinishNotifiRspBody> _instance;
} _TransMsgFinishNotifiRspBody_default_instance_;
class TransMsgDirProcessReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgDirProcessReqBody> _instance;
} _TransMsgDirProcessReqBody_default_instance_;
class TransMsgDirProcessRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgDirProcessRspBody> _instance;
} _TransMsgDirProcessRspBody_default_instance_;
class TransMsgUploadFileReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgUploadFileReqBody> _instance;
} _TransMsgUploadFileReqBody_default_instance_;
class TransMsgUploadFileRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgUploadFileRspBody> _instance;
} _TransMsgUploadFileRspBody_default_instance_;
class TransMsgStopUploadReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgStopUploadReqBody> _instance;
} _TransMsgStopUploadReqBody_default_instance_;
class TransMsgStopUploadRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgStopUploadRspBody> _instance;
} _TransMsgStopUploadRspBody_default_instance_;
class TransMsgCliNotifySvrDownloadDataReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgCliNotifySvrDownloadDataReqBody> _instance;
} _TransMsgCliNotifySvrDownloadDataReqBody_default_instance_;
class TransMsgCliNotifySvrDownloadDataRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgCliNotifySvrDownloadDataRspBody> _instance;
} _TransMsgCliNotifySvrDownloadDataRspBody_default_instance_;
class TransMsgDownloadFileReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgDownloadFileReqBody> _instance;
} _TransMsgDownloadFileReqBody_default_instance_;
class TransMsgDownloadFileRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgDownloadFileRspBody> _instance;
} _TransMsgDownloadFileRspBody_default_instance_;
class TransMsgSvrNotifyCliEndDownloadReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgSvrNotifyCliEndDownloadReqBody> _instance;
} _TransMsgSvrNotifyCliEndDownloadReqBody_default_instance_;
class TransMsgSvrNotifyCliEndDownloadRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgSvrNotifyCliEndDownloadRspBody> _instance;
} _TransMsgSvrNotifyCliEndDownloadRspBody_default_instance_;
class TransMsgStopDownloadReqBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgStopDownloadReqBody> _instance;
} _TransMsgStopDownloadReqBody_default_instance_;
class TransMsgStopDownloadRspBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMsgStopDownloadRspBody> _instance;
} _TransMsgStopDownloadRspBody_default_instance_;
class TransMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransMessage> _instance;
  const ::TransMsgLoginReqBody* login_req_body_;
  const ::TransMsgLoginRspBody* login_rsp_body_;
  const ::TransMsgLogoutReqBody* logout_req_body_;
  const ::TransMsgLogoutRspBody* logout_rsp_body_;
  const ::TransMsgUploadFileReqBody* upload_file_req_body_;
  const ::TransMsgUploadFileRspBody* upload_file_rsp_body_;
  const ::TransMsgSendDataReqBody* send_data_req_body_;
  const ::TransMsgResendDataNotifiReqBody* resend_data_notifi_req_body_;
  const ::TransMsgResendDataNotifiRspBody* resend_data_notifi_rsp_body_;
  const ::TransMsgFinishNotifiReqBody* finish_notifi_req_body_;
  const ::TransMsgFinishNotifiRspBody* finish_notifi_rsp_body_;
  const ::TransMsgHeartbeatReqBody* heartbeat_req_body_;
  const ::TransMsgHeartbeatRspBody* heartbeat_rsp_body_;
  const ::TransMsgSendDataReqBody* resend_data_req_body_;
  const ::TransMsgDirProcessReqBody* dir_process_req_body_;
  const ::TransMsgDirProcessRspBody* dir_process_rsp_body_;
  const ::TransMsgCliNotifySvrDownloadDataReqBody* cli_notify_svr_download_data_req_body_;
  const ::TransMsgCliNotifySvrDownloadDataRspBody* cli_notify_svr_download_data_rsp_body_;
  const ::TransMsgDownloadFileReqBody* download_file_req_body_;
  const ::TransMsgDownloadFileRspBody* download_file_rsp_body_;
  const ::TransMsgSvrNotifyCliEndDownloadReqBody* svr_notify_cli_end_download_req_body_;
  const ::TransMsgSvrNotifyCliEndDownloadRspBody* svr_notify_cli_end_download_rsp_body_;
  const ::TransMsgStopUploadReqBody* stop_upload_req_body_;
  const ::TransMsgStopUploadRspBody* stop_upload_rsp_body_;
  const ::TransMsgStopDownloadReqBody* stop_download_req_body_;
  const ::TransMsgStopUploadRspBody* stop_download_rsp_body_;
} _TransMessage_default_instance_;
static void InitDefaultsscc_info_TransMessage_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMessage_default_instance_;
    new (ptr) ::TransMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<25> scc_info_TransMessage_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 25, InitDefaultsscc_info_TransMessage_TransMessageApi_2eproto}, {
      &scc_info_TransMsgHead_TransMessageApi_2eproto.base,
      &scc_info_TransMsgLoginReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgLoginRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgLogoutReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgLogoutRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgUploadFileReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgUploadFileRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgSendDataReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgResendDataNotifiReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgResendDataNotifiRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgFinishNotifiReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgFinishNotifiRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgHeartbeatReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgHeartbeatRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgDirProcessReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgDirProcessRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgCliNotifySvrDownloadDataReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgCliNotifySvrDownloadDataRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgDownloadFileReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgDownloadFileRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgSvrNotifyCliEndDownloadReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgSvrNotifyCliEndDownloadRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgStopUploadReqBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgStopUploadRspBody_TransMessageApi_2eproto.base,
      &scc_info_TransMsgStopDownloadReqBody_TransMessageApi_2eproto.base,}};

static void InitDefaultsscc_info_TransMsgCliNotifySvrDownloadDataReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgCliNotifySvrDownloadDataReqBody_default_instance_;
    new (ptr) ::TransMsgCliNotifySvrDownloadDataReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgCliNotifySvrDownloadDataReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgCliNotifySvrDownloadDataReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgCliNotifySvrDownloadDataReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgCliNotifySvrDownloadDataRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgCliNotifySvrDownloadDataRspBody_default_instance_;
    new (ptr) ::TransMsgCliNotifySvrDownloadDataRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgCliNotifySvrDownloadDataRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgCliNotifySvrDownloadDataRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgCliNotifySvrDownloadDataRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgDirProcessReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgDirProcessReqBody_default_instance_;
    new (ptr) ::TransMsgDirProcessReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgDirProcessReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgDirProcessReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgDirProcessReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgDirProcessRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgDirProcessRspBody_default_instance_;
    new (ptr) ::TransMsgDirProcessRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgDirProcessRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgDirProcessRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgDirProcessRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgDownloadFileReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgDownloadFileReqBody_default_instance_;
    new (ptr) ::TransMsgDownloadFileReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgDownloadFileReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgDownloadFileReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgDownloadFileReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgDownloadFileRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgDownloadFileRspBody_default_instance_;
    new (ptr) ::TransMsgDownloadFileRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgDownloadFileRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgDownloadFileRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgDownloadFileRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgFinishNotifiReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgFinishNotifiReqBody_default_instance_;
    new (ptr) ::TransMsgFinishNotifiReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgFinishNotifiReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgFinishNotifiReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgFinishNotifiReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgFinishNotifiRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgFinishNotifiRspBody_default_instance_;
    new (ptr) ::TransMsgFinishNotifiRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgFinishNotifiRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgFinishNotifiRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgFinishNotifiRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgHead_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgHead_default_instance_;
    new (ptr) ::TransMsgHead();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgHead::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransMsgHead_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransMsgHead_TransMessageApi_2eproto}, {
      &scc_info_TransMsgHead_ExtenInfoEntry_DoNotUse_TransMessageApi_2eproto.base,}};

static void InitDefaultsscc_info_TransMsgHead_ExtenInfoEntry_DoNotUse_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgHead_ExtenInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::TransMsgHead_ExtenInfoEntry_DoNotUse();
  }
  ::TransMsgHead_ExtenInfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgHead_ExtenInfoEntry_DoNotUse_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgHead_ExtenInfoEntry_DoNotUse_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgHeartbeatReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgHeartbeatReqBody_default_instance_;
    new (ptr) ::TransMsgHeartbeatReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgHeartbeatReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgHeartbeatReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgHeartbeatReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgHeartbeatRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgHeartbeatRspBody_default_instance_;
    new (ptr) ::TransMsgHeartbeatRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgHeartbeatRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgHeartbeatRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgHeartbeatRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgLoginReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgLoginReqBody_default_instance_;
    new (ptr) ::TransMsgLoginReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgLoginReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgLoginReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgLoginReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgLoginRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgLoginRspBody_default_instance_;
    new (ptr) ::TransMsgLoginRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgLoginRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgLoginRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgLoginRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgLogoutReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgLogoutReqBody_default_instance_;
    new (ptr) ::TransMsgLogoutReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgLogoutReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgLogoutReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgLogoutReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgLogoutRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgLogoutRspBody_default_instance_;
    new (ptr) ::TransMsgLogoutRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgLogoutRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgLogoutRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgLogoutRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgResendDataNotifiReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgResendDataNotifiReqBody_default_instance_;
    new (ptr) ::TransMsgResendDataNotifiReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgResendDataNotifiReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgResendDataNotifiReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgResendDataNotifiReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgResendDataNotifiRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgResendDataNotifiRspBody_default_instance_;
    new (ptr) ::TransMsgResendDataNotifiRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgResendDataNotifiRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgResendDataNotifiRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgResendDataNotifiRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgSendDataReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgSendDataReqBody_default_instance_;
    new (ptr) ::TransMsgSendDataReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgSendDataReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgSendDataReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgSendDataReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgStopDownloadReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgStopDownloadReqBody_default_instance_;
    new (ptr) ::TransMsgStopDownloadReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgStopDownloadReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgStopDownloadReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgStopDownloadReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgStopDownloadRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgStopDownloadRspBody_default_instance_;
    new (ptr) ::TransMsgStopDownloadRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgStopDownloadRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgStopDownloadRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgStopDownloadRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgStopUploadReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgStopUploadReqBody_default_instance_;
    new (ptr) ::TransMsgStopUploadReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgStopUploadReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgStopUploadReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgStopUploadReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgStopUploadRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgStopUploadRspBody_default_instance_;
    new (ptr) ::TransMsgStopUploadRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgStopUploadRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgStopUploadRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgStopUploadRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgSvrNotifyCliEndDownloadReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgSvrNotifyCliEndDownloadReqBody_default_instance_;
    new (ptr) ::TransMsgSvrNotifyCliEndDownloadReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgSvrNotifyCliEndDownloadReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgSvrNotifyCliEndDownloadReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgSvrNotifyCliEndDownloadReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgSvrNotifyCliEndDownloadRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgSvrNotifyCliEndDownloadRspBody_default_instance_;
    new (ptr) ::TransMsgSvrNotifyCliEndDownloadRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgSvrNotifyCliEndDownloadRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgSvrNotifyCliEndDownloadRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgSvrNotifyCliEndDownloadRspBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgUploadFileReqBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgUploadFileReqBody_default_instance_;
    new (ptr) ::TransMsgUploadFileReqBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgUploadFileReqBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgUploadFileReqBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgUploadFileReqBody_TransMessageApi_2eproto}, {}};

static void InitDefaultsscc_info_TransMsgUploadFileRspBody_TransMessageApi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransMsgUploadFileRspBody_default_instance_;
    new (ptr) ::TransMsgUploadFileRspBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransMsgUploadFileRspBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransMsgUploadFileRspBody_TransMessageApi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransMsgUploadFileRspBody_TransMessageApi_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TransMessageApi_2eproto[28];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TransMessageApi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TransMessageApi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TransMessageApi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TransMsgHead_ExtenInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TransMsgHead_ExtenInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgHead_ExtenInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TransMsgHead_ExtenInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgHead, msg_name_),
  PROTOBUF_FIELD_OFFSET(::TransMsgHead, timestamp_),
  PROTOBUF_FIELD_OFFSET(::TransMsgHead, magic_),
  PROTOBUF_FIELD_OFFSET(::TransMsgHead, nonce_),
  PROTOBUF_FIELD_OFFSET(::TransMsgHead, session_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgHead, sign_),
  PROTOBUF_FIELD_OFFSET(::TransMsgHead, exten_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgLoginReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgLoginReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgLoginReqBody, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgLoginRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgLoginRspBody, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgHeartbeatReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgHeartbeatReqBody, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgHeartbeatRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgHeartbeatRspBody, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgLogoutReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgLogoutReqBody, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgLogoutRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgLogoutRspBody, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgSendDataReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgSendDataReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgSendDataReqBody, trans_session_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgSendDataReqBody, file_block_num_),
  PROTOBUF_FIELD_OFFSET(::TransMsgSendDataReqBody, file_block_data_),
  PROTOBUF_FIELD_OFFSET(::TransMsgSendDataReqBody, block_hash_),
  PROTOBUF_FIELD_OFFSET(::TransMsgSendDataReqBody, file_hash_),
  PROTOBUF_FIELD_OFFSET(::TransMsgSendDataReqBody, resend_notifi_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiReqBody, trans_session_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiReqBody, resend_notifi_timestamp_),
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiReqBody, group_total_packet_count_),
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiReqBody, group_packet_num_),
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiReqBody, max_received_file_block_num_),
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiReqBody, received_file_blocks_count_),
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiReqBody, resend_block_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiRspBody, status_),
  PROTOBUF_FIELD_OFFSET(::TransMsgResendDataNotifiRspBody, process_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgFinishNotifiReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgFinishNotifiReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgFinishNotifiReqBody, trans_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgFinishNotifiRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgFinishNotifiRspBody, status_),
  PROTOBUF_FIELD_OFFSET(::TransMsgFinishNotifiRspBody, trans_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgDirProcessReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgDirProcessReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDirProcessReqBody, trans_session_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDirProcessReqBody, process_type_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDirProcessReqBody, remote_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgDirProcessRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgDirProcessRspBody, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, exchange_type_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, remote_path_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, local_path_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, file_size_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, total_file_blocks_count_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, file_block_size_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, file_block_start_num_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, file_hash_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileReqBody, transfer_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileRspBody, status_),
  PROTOBUF_FIELD_OFFSET(::TransMsgUploadFileRspBody, trans_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgStopUploadReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgStopUploadReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgStopUploadReqBody, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgStopUploadReqBody, trans_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgStopUploadRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgStopUploadRspBody, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataReqBody, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataReqBody, exchange_type_),
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataReqBody, remote_path_),
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataReqBody, local_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataRspBody, status_),
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataRspBody, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataRspBody, total_file_size_),
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataRspBody, total_files_),
  PROTOBUF_FIELD_OFFSET(::TransMsgCliNotifySvrDownloadDataRspBody, total_dirs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, exchange_type_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, remote_path_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, local_path_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, file_size_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, total_file_blocks_count_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, file_block_size_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, file_block_start_num_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, file_hash_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, sync_trans_session_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileReqBody, transfer_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileRspBody, status_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileRspBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgDownloadFileRspBody, trans_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgSvrNotifyCliEndDownloadReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgSvrNotifyCliEndDownloadReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgSvrNotifyCliEndDownloadReqBody, usr_trans_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgSvrNotifyCliEndDownloadRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgSvrNotifyCliEndDownloadRspBody, status_),
  PROTOBUF_FIELD_OFFSET(::TransMsgSvrNotifyCliEndDownloadRspBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgSvrNotifyCliEndDownloadRspBody, usr_trans_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgStopDownloadReqBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgStopDownloadReqBody, node_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgStopDownloadReqBody, usr_trans_id_),
  PROTOBUF_FIELD_OFFSET(::TransMsgStopDownloadReqBody, trans_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMsgStopDownloadRspBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMsgStopDownloadRspBody, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TransMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TransMessage, head_),
  offsetof(::TransMessageDefaultTypeInternal, login_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, login_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, logout_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, logout_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, upload_file_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, upload_file_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, send_data_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, resend_data_notifi_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, resend_data_notifi_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, finish_notifi_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, finish_notifi_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, heartbeat_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, heartbeat_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, resend_data_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, dir_process_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, dir_process_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, cli_notify_svr_download_data_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, cli_notify_svr_download_data_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, download_file_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, download_file_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, svr_notify_cli_end_download_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, svr_notify_cli_end_download_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, stop_upload_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, stop_upload_rsp_body_),
  offsetof(::TransMessageDefaultTypeInternal, stop_download_req_body_),
  offsetof(::TransMessageDefaultTypeInternal, stop_download_rsp_body_),
  PROTOBUF_FIELD_OFFSET(::TransMessage, TransMsgBody_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TransMsgHead_ExtenInfoEntry_DoNotUse)},
  { 9, -1, sizeof(::TransMsgHead)},
  { 21, -1, sizeof(::TransMsgLoginReqBody)},
  { 28, -1, sizeof(::TransMsgLoginRspBody)},
  { 34, -1, sizeof(::TransMsgHeartbeatReqBody)},
  { 40, -1, sizeof(::TransMsgHeartbeatRspBody)},
  { 46, -1, sizeof(::TransMsgLogoutReqBody)},
  { 52, -1, sizeof(::TransMsgLogoutRspBody)},
  { 58, -1, sizeof(::TransMsgSendDataReqBody)},
  { 70, -1, sizeof(::TransMsgResendDataNotifiReqBody)},
  { 83, -1, sizeof(::TransMsgResendDataNotifiRspBody)},
  { 90, -1, sizeof(::TransMsgFinishNotifiReqBody)},
  { 97, -1, sizeof(::TransMsgFinishNotifiRspBody)},
  { 104, -1, sizeof(::TransMsgDirProcessReqBody)},
  { 113, -1, sizeof(::TransMsgDirProcessRspBody)},
  { 119, -1, sizeof(::TransMsgUploadFileReqBody)},
  { 135, -1, sizeof(::TransMsgUploadFileRspBody)},
  { 142, -1, sizeof(::TransMsgStopUploadReqBody)},
  { 150, -1, sizeof(::TransMsgStopUploadRspBody)},
  { 156, -1, sizeof(::TransMsgCliNotifySvrDownloadDataReqBody)},
  { 166, -1, sizeof(::TransMsgCliNotifySvrDownloadDataRspBody)},
  { 176, -1, sizeof(::TransMsgDownloadFileReqBody)},
  { 193, -1, sizeof(::TransMsgDownloadFileRspBody)},
  { 201, -1, sizeof(::TransMsgSvrNotifyCliEndDownloadReqBody)},
  { 208, -1, sizeof(::TransMsgSvrNotifyCliEndDownloadRspBody)},
  { 216, -1, sizeof(::TransMsgStopDownloadReqBody)},
  { 224, -1, sizeof(::TransMsgStopDownloadRspBody)},
  { 230, -1, sizeof(::TransMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgHead_ExtenInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgLoginReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgLoginRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgHeartbeatReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgHeartbeatRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgLogoutReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgLogoutRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgSendDataReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgResendDataNotifiReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgResendDataNotifiRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgFinishNotifiReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgFinishNotifiRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgDirProcessReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgDirProcessRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgUploadFileReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgUploadFileRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgStopUploadReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgStopUploadRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgCliNotifySvrDownloadDataReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgCliNotifySvrDownloadDataRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgDownloadFileReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgDownloadFileRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgSvrNotifyCliEndDownloadReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgSvrNotifyCliEndDownloadRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgStopDownloadReqBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMsgStopDownloadRspBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TransMessage_default_instance_),
};

const char descriptor_table_protodef_TransMessageApi_2eproto[] =
  "\n\025TransMessageApi.proto\"\327\001\n\014TransMsgHead"
  "\022\020\n\010msg_name\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\004\022\r\n"
  "\005magic\030\003 \001(\005\022\r\n\005nonce\030\004 \001(\t\022\022\n\nsession_i"
  "d\030\005 \001(\t\022\014\n\004sign\030\006 \001(\t\0220\n\nexten_info\030\007 \003("
  "\0132\034.TransMsgHead.ExtenInfoEntry\0320\n\016Exten"
  "InfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"8\n\024TransMsgLoginReqBody\022\017\n\007node_id\030\001 \001"
  "(\t\022\017\n\007version\030\002 \001(\t\"&\n\024TransMsgLoginRspB"
  "ody\022\016\n\006status\030\001 \001(\005\"+\n\030TransMsgHeartbeat"
  "ReqBody\022\017\n\007node_id\030\001 \001(\t\"*\n\030TransMsgHear"
  "tbeatRspBody\022\016\n\006status\030\001 \001(\005\"(\n\025TransMsg"
  "LogoutReqBody\022\017\n\007node_id\030\001 \001(\t\"\'\n\025TransM"
  "sgLogoutRspBody\022\016\n\006status\030\001 \001(\005\"\275\001\n\027Tran"
  "sMsgSendDataReqBody\022\017\n\007node_id\030\001 \001(\t\022\030\n\020"
  "trans_session_id\030\002 \001(\t\022\026\n\016file_block_num"
  "\030\003 \001(\004\022\027\n\017file_block_data\030\004 \001(\014\022\022\n\nblock"
  "_hash\030\005 \001(\004\022\021\n\tfile_hash\030\006 \001(\004\022\037\n\027resend"
  "_notifi_timestamp\030\007 \001(\004\"\215\002\n\037TransMsgRese"
  "ndDataNotifiReqBody\022\017\n\007node_id\030\001 \001(\t\022\030\n\020"
  "trans_session_id\030\002 \001(\t\022\037\n\027resend_notifi_"
  "timestamp\030\003 \001(\004\022 \n\030group_total_packet_co"
  "unt\030\004 \001(\005\022\030\n\020group_packet_num\030\005 \001(\005\022#\n\033m"
  "ax_received_file_block_num\030\006 \001(\004\022\"\n\032rece"
  "ived_file_blocks_count\030\007 \001(\004\022\031\n\021resend_b"
  "lock_list\030\010 \003(\004\"H\n\037TransMsgResendDataNot"
  "ifiRspBody\022\016\n\006status\030\001 \001(\005\022\025\n\rprocess_ti"
  "mes\030\002 \001(\003\"H\n\033TransMsgFinishNotifiReqBody"
  "\022\017\n\007node_id\030\001 \001(\t\022\030\n\020trans_session_id\030\002 "
  "\001(\t\"G\n\033TransMsgFinishNotifiRspBody\022\016\n\006st"
  "atus\030\001 \001(\005\022\030\n\020trans_session_id\030\002 \001(\t\"q\n\031"
  "TransMsgDirProcessReqBody\022\017\n\007node_id\030\001 \001"
  "(\t\022\030\n\020trans_session_id\030\002 \001(\t\022\024\n\014process_"
  "type\030\003 \001(\005\022\023\n\013remote_path\030\004 \001(\t\"+\n\031Trans"
  "MsgDirProcessRspBody\022\016\n\006status\030\001 \001(\005\"\227\002\n"
  "\031TransMsgUploadFileReqBody\022\017\n\007node_id\030\001 "
  "\001(\t\022\024\n\014usr_trans_id\030\002 \001(\t\022\025\n\rexchange_ty"
  "pe\030\003 \001(\005\022\023\n\013remote_path\030\004 \001(\t\022\022\n\nlocal_p"
  "ath\030\005 \001(\t\022\021\n\tfile_size\030\006 \001(\004\022\037\n\027total_fi"
  "le_blocks_count\030\007 \001(\004\022\027\n\017file_block_size"
  "\030\010 \001(\004\022\034\n\024file_block_start_num\030\t \001(\004\022\021\n\t"
  "file_hash\030\n \001(\004\022\025\n\rtransfer_rate\030\013 \001(\004\"E"
  "\n\031TransMsgUploadFileRspBody\022\016\n\006status\030\001 "
  "\001(\005\022\030\n\020trans_session_id\030\002 \001(\t\"\\\n\031TransMs"
  "gStopUploadReqBody\022\017\n\007node_id\030\001 \001(\t\022\024\n\014u"
  "sr_trans_id\030\002 \001(\t\022\030\n\020trans_session_id\030\003 "
  "\001(\t\"+\n\031TransMsgStopUploadRspBody\022\016\n\006stat"
  "us\030\001 \001(\005\"\220\001\n\'TransMsgCliNotifySvrDownloa"
  "dDataReqBody\022\017\n\007node_id\030\001 \001(\t\022\024\n\014usr_tra"
  "ns_id\030\002 \001(\t\022\025\n\rexchange_type\030\003 \001(\005\022\023\n\013re"
  "mote_path\030\004 \003(\t\022\022\n\nlocal_path\030\005 \001(\t\"\221\001\n\'"
  "TransMsgCliNotifySvrDownloadDataRspBody\022"
  "\016\n\006status\030\001 \001(\005\022\024\n\014usr_trans_id\030\002 \001(\t\022\027\n"
  "\017total_file_size\030\003 \001(\003\022\023\n\013total_files\030\004 "
  "\001(\003\022\022\n\ntotal_dirs\030\005 \001(\003\"\270\002\n\033TransMsgDown"
  "loadFileReqBody\022\017\n\007node_id\030\001 \001(\t\022\024\n\014usr_"
  "trans_id\030\002 \001(\t\022\025\n\rexchange_type\030\003 \001(\005\022\023\n"
  "\013remote_path\030\004 \001(\t\022\022\n\nlocal_path\030\005 \001(\t\022\021"
  "\n\tfile_size\030\006 \001(\004\022\037\n\027total_file_blocks_c"
  "ount\030\007 \001(\004\022\027\n\017file_block_size\030\010 \001(\004\022\034\n\024f"
  "ile_block_start_num\030\t \001(\004\022\021\n\tfile_hash\030\n"
  " \001(\004\022\035\n\025sync_trans_session_id\030\013 \001(\t\022\025\n\rt"
  "ransfer_rate\030\014 \001(\004\"X\n\033TransMsgDownloadFi"
  "leRspBody\022\016\n\006status\030\001 \001(\005\022\017\n\007node_id\030\002 \001"
  "(\t\022\030\n\020trans_session_id\030\003 \001(\t\"O\n&TransMsg"
  "SvrNotifyCliEndDownloadReqBody\022\017\n\007node_i"
  "d\030\001 \001(\t\022\024\n\014usr_trans_id\030\002 \001(\t\"_\n&TransMs"
  "gSvrNotifyCliEndDownloadRspBody\022\016\n\006statu"
  "s\030\001 \001(\005\022\017\n\007node_id\030\002 \001(\t\022\024\n\014usr_trans_id"
  "\030\003 \001(\t\"^\n\033TransMsgStopDownloadReqBody\022\017\n"
  "\007node_id\030\001 \001(\t\022\024\n\014usr_trans_id\030\002 \001(\t\022\030\n\020"
  "trans_session_id\030\003 \001(\t\"-\n\033TransMsgStopDo"
  "wnloadRspBody\022\016\n\006status\030\001 \001(\005\"\307\r\n\014TransM"
  "essage\022\033\n\004head\030\001 \001(\0132\r.TransMsgHead\022/\n\016l"
  "ogin_req_body\030\002 \001(\0132\025.TransMsgLoginReqBo"
  "dyH\000\022/\n\016login_rsp_body\030\003 \001(\0132\025.TransMsgL"
  "oginRspBodyH\000\0221\n\017logout_req_body\030\004 \001(\0132\026"
  ".TransMsgLogoutReqBodyH\000\0221\n\017logout_rsp_b"
  "ody\030\005 \001(\0132\026.TransMsgLogoutRspBodyH\000\022:\n\024u"
  "pload_file_req_body\030\006 \001(\0132\032.TransMsgUplo"
  "adFileReqBodyH\000\022:\n\024upload_file_rsp_body\030"
  "\007 \001(\0132\032.TransMsgUploadFileRspBodyH\000\0226\n\022s"
  "end_data_req_body\030\010 \001(\0132\030.TransMsgSendDa"
  "taReqBodyH\000\022G\n\033resend_data_notifi_req_bo"
  "dy\030\t \001(\0132 .TransMsgResendDataNotifiReqBo"
  "dyH\000\022G\n\033resend_data_notifi_rsp_body\030\n \001("
  "\0132 .TransMsgResendDataNotifiRspBodyH\000\022>\n"
  "\026finish_notifi_req_body\030\013 \001(\0132\034.TransMsg"
  "FinishNotifiReqBodyH\000\022>\n\026finish_notifi_r"
  "sp_body\030\014 \001(\0132\034.TransMsgFinishNotifiRspB"
  "odyH\000\0227\n\022heartbeat_req_body\030\r \001(\0132\031.Tran"
  "sMsgHeartbeatReqBodyH\000\0227\n\022heartbeat_rsp_"
  "body\030\016 \001(\0132\031.TransMsgHeartbeatRspBodyH\000\022"
  "8\n\024resend_data_req_body\030\017 \001(\0132\030.TransMsg"
  "SendDataReqBodyH\000\022:\n\024dir_process_req_bod"
  "y\030\020 \001(\0132\032.TransMsgDirProcessReqBodyH\000\022:\n"
  "\024dir_process_rsp_body\030\021 \001(\0132\032.TransMsgDi"
  "rProcessRspBodyH\000\022Y\n%cli_notify_svr_down"
  "load_data_req_body\030\022 \001(\0132(.TransMsgCliNo"
  "tifySvrDownloadDataReqBodyH\000\022Y\n%cli_noti"
  "fy_svr_download_data_rsp_body\030\023 \001(\0132(.Tr"
  "ansMsgCliNotifySvrDownloadDataRspBodyH\000\022"
  ">\n\026download_file_req_body\030\024 \001(\0132\034.TransM"
  "sgDownloadFileReqBodyH\000\022>\n\026download_file"
  "_rsp_body\030\025 \001(\0132\034.TransMsgDownloadFileRs"
  "pBodyH\000\022W\n$svr_notify_cli_end_download_r"
  "eq_body\030\026 \001(\0132\'.TransMsgSvrNotifyCliEndD"
  "ownloadReqBodyH\000\022W\n$svr_notify_cli_end_d"
  "ownload_rsp_body\030\027 \001(\0132\'.TransMsgSvrNoti"
  "fyCliEndDownloadRspBodyH\000\022:\n\024stop_upload"
  "_req_body\030\030 \001(\0132\032.TransMsgStopUploadReqB"
  "odyH\000\022:\n\024stop_upload_rsp_body\030\031 \001(\0132\032.Tr"
  "ansMsgStopUploadRspBodyH\000\022>\n\026stop_downlo"
  "ad_req_body\030\032 \001(\0132\034.TransMsgStopDownload"
  "ReqBodyH\000\022<\n\026stop_download_rsp_body\030\033 \001("
  "\0132\032.TransMsgStopUploadRspBodyH\000B\016\n\014Trans"
  "MsgBodyb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TransMessageApi_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TransMessageApi_2eproto_sccs[28] = {
  &scc_info_TransMessage_TransMessageApi_2eproto.base,
  &scc_info_TransMsgCliNotifySvrDownloadDataReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgCliNotifySvrDownloadDataRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgDirProcessReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgDirProcessRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgDownloadFileReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgDownloadFileRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgFinishNotifiReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgFinishNotifiRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgHead_TransMessageApi_2eproto.base,
  &scc_info_TransMsgHead_ExtenInfoEntry_DoNotUse_TransMessageApi_2eproto.base,
  &scc_info_TransMsgHeartbeatReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgHeartbeatRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgLoginReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgLoginRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgLogoutReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgLogoutRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgResendDataNotifiReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgResendDataNotifiRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgSendDataReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgStopDownloadReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgStopDownloadRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgStopUploadReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgStopUploadRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgSvrNotifyCliEndDownloadReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgSvrNotifyCliEndDownloadRspBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgUploadFileReqBody_TransMessageApi_2eproto.base,
  &scc_info_TransMsgUploadFileRspBody_TransMessageApi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TransMessageApi_2eproto_once;
static bool descriptor_table_TransMessageApi_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TransMessageApi_2eproto = {
  &descriptor_table_TransMessageApi_2eproto_initialized, descriptor_table_protodef_TransMessageApi_2eproto, "TransMessageApi.proto", 4615,
  &descriptor_table_TransMessageApi_2eproto_once, descriptor_table_TransMessageApi_2eproto_sccs, descriptor_table_TransMessageApi_2eproto_deps, 28, 0,
  schemas, file_default_instances, TableStruct_TransMessageApi_2eproto::offsets,
  file_level_metadata_TransMessageApi_2eproto, 28, file_level_enum_descriptors_TransMessageApi_2eproto, file_level_service_descriptors_TransMessageApi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TransMessageApi_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TransMessageApi_2eproto), true);

// ===================================================================

TransMsgHead_ExtenInfoEntry_DoNotUse::TransMsgHead_ExtenInfoEntry_DoNotUse() {}
TransMsgHead_ExtenInfoEntry_DoNotUse::TransMsgHead_ExtenInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransMsgHead_ExtenInfoEntry_DoNotUse::MergeFrom(const TransMsgHead_ExtenInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransMsgHead_ExtenInfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TransMsgHead_ExtenInfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TransMsgHead::InitAsDefaultInstance() {
}
class TransMsgHead::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgHead::kMsgNameFieldNumber;
const int TransMsgHead::kTimestampFieldNumber;
const int TransMsgHead::kMagicFieldNumber;
const int TransMsgHead::kNonceFieldNumber;
const int TransMsgHead::kSessionIdFieldNumber;
const int TransMsgHead::kSignFieldNumber;
const int TransMsgHead::kExtenInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgHead::TransMsgHead()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgHead)
}
TransMsgHead::TransMsgHead(const TransMsgHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exten_info_.MergeFrom(from.exten_info_);
  msg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg_name().size() > 0) {
    msg_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_name_);
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.nonce().size() > 0) {
    nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&magic_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(magic_));
  // @@protoc_insertion_point(copy_constructor:TransMsgHead)
}

void TransMsgHead::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgHead_TransMessageApi_2eproto.base);
  msg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magic_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(magic_));
}

TransMsgHead::~TransMsgHead() {
  // @@protoc_insertion_point(destructor:TransMsgHead)
  SharedDtor();
}

void TransMsgHead::SharedDtor() {
  msg_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgHead& TransMsgHead::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgHead_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exten_info_.Clear();
  msg_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magic_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(magic_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg_name(), ptr, ctx, "TransMsgHead.msg_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 magic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nonce = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_nonce(), ptr, ctx, "TransMsgHead.nonce");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_session_id(), ptr, ctx, "TransMsgHead.session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sign(), ptr, ctx, "TransMsgHead.sign");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> exten_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&exten_info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgHead::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgHead)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg_name().data(), static_cast<int>(this->msg_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgHead.msg_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 magic = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nonce = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->nonce().data(), static_cast<int>(this->nonce().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgHead.nonce"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), static_cast<int>(this->session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgHead.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sign().data(), static_cast<int>(this->sign().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgHead.sign"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> exten_info = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          TransMsgHead_ExtenInfoEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              TransMsgHead_ExtenInfoEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&exten_info_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgHead.ExtenInfoEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgHead.ExtenInfoEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgHead)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgHead::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_name = 1;
  if (this->msg_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg_name().data(), static_cast<int>(this->msg_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHead.msg_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg_name(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // int32 magic = 3;
  if (this->magic() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->magic(), output);
  }

  // string nonce = 4;
  if (this->nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->nonce().data(), static_cast<int>(this->nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHead.nonce");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nonce(), output);
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHead.session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->session_id(), output);
  }

  // string sign = 6;
  if (this->sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHead.sign");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sign(), output);
  }

  // map<string, string> exten_info = 7;
  if (!this->exten_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TransMsgHead.ExtenInfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TransMsgHead.ExtenInfoEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->exten_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->exten_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->exten_info().begin();
          it != this->exten_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TransMsgHead_ExtenInfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(7, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->exten_info().begin();
          it != this->exten_info().end(); ++it) {
        TransMsgHead_ExtenInfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(7, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgHead)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgHead::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_name = 1;
  if (this->msg_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg_name().data(), static_cast<int>(this->msg_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHead.msg_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_name(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // int32 magic = 3;
  if (this->magic() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->magic(), target);
  }

  // string nonce = 4;
  if (this->nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->nonce().data(), static_cast<int>(this->nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHead.nonce");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->nonce(), target);
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), static_cast<int>(this->session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHead.session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->session_id(), target);
  }

  // string sign = 6;
  if (this->sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHead.sign");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->sign(), target);
  }

  // map<string, string> exten_info = 7;
  if (!this->exten_info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TransMsgHead.ExtenInfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "TransMsgHead.ExtenInfoEntry.value");
      }
    };

    if (false &&
        this->exten_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->exten_info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->exten_info().begin();
          it != this->exten_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TransMsgHead_ExtenInfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->exten_info().begin();
          it != this->exten_info().end(); ++it) {
        TransMsgHead_ExtenInfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgHead)
  return target;
}

size_t TransMsgHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> exten_info = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exten_info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->exten_info().begin();
      it != this->exten_info().end(); ++it) {
    TransMsgHead_ExtenInfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // string msg_name = 1;
  if (this->msg_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg_name());
  }

  // string nonce = 4;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->nonce());
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string sign = 6;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sign());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // int32 magic = 3;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->magic());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgHead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgHead)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgHead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgHead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgHead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgHead)
    MergeFrom(*source);
  }
}

void TransMsgHead::MergeFrom(const TransMsgHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exten_info_.MergeFrom(from.exten_info_);
  if (from.msg_name().size() > 0) {

    msg_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_name_);
  }
  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  if (from.session_id().size() > 0) {

    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.magic() != 0) {
    set_magic(from.magic());
  }
}

void TransMsgHead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgHead::CopyFrom(const TransMsgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgHead::IsInitialized() const {
  return true;
}

void TransMsgHead::Swap(TransMsgHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgHead::InternalSwap(TransMsgHead* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exten_info_.Swap(&other->exten_info_);
  msg_name_.Swap(&other->msg_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_.Swap(&other->sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(magic_, other->magic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgHead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgLoginReqBody::InitAsDefaultInstance() {
}
class TransMsgLoginReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgLoginReqBody::kNodeIdFieldNumber;
const int TransMsgLoginReqBody::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgLoginReqBody::TransMsgLoginReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgLoginReqBody)
}
TransMsgLoginReqBody::TransMsgLoginReqBody(const TransMsgLoginReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:TransMsgLoginReqBody)
}

void TransMsgLoginReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgLoginReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransMsgLoginReqBody::~TransMsgLoginReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgLoginReqBody)
  SharedDtor();
}

void TransMsgLoginReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgLoginReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgLoginReqBody& TransMsgLoginReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgLoginReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgLoginReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgLoginReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgLoginReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgLoginReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_version(), ptr, ctx, "TransMsgLoginReqBody.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgLoginReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgLoginReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgLoginReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgLoginReqBody.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgLoginReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgLoginReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgLoginReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgLoginReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgLoginReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgLoginReqBody.version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgLoginReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgLoginReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgLoginReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgLoginReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgLoginReqBody.version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgLoginReqBody)
  return target;
}

size_t TransMsgLoginReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgLoginReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgLoginReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgLoginReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgLoginReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgLoginReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgLoginReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgLoginReqBody)
    MergeFrom(*source);
  }
}

void TransMsgLoginReqBody::MergeFrom(const TransMsgLoginReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgLoginReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void TransMsgLoginReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgLoginReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgLoginReqBody::CopyFrom(const TransMsgLoginReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgLoginReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgLoginReqBody::IsInitialized() const {
  return true;
}

void TransMsgLoginReqBody::Swap(TransMsgLoginReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgLoginReqBody::InternalSwap(TransMsgLoginReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgLoginReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgLoginRspBody::InitAsDefaultInstance() {
}
class TransMsgLoginRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgLoginRspBody::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgLoginRspBody::TransMsgLoginRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgLoginRspBody)
}
TransMsgLoginRspBody::TransMsgLoginRspBody(const TransMsgLoginRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgLoginRspBody)
}

void TransMsgLoginRspBody::SharedCtor() {
  status_ = 0;
}

TransMsgLoginRspBody::~TransMsgLoginRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgLoginRspBody)
  SharedDtor();
}

void TransMsgLoginRspBody::SharedDtor() {
}

void TransMsgLoginRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgLoginRspBody& TransMsgLoginRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgLoginRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgLoginRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgLoginRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgLoginRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgLoginRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgLoginRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgLoginRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgLoginRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgLoginRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgLoginRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgLoginRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgLoginRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgLoginRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgLoginRspBody)
  return target;
}

size_t TransMsgLoginRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgLoginRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgLoginRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgLoginRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgLoginRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgLoginRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgLoginRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgLoginRspBody)
    MergeFrom(*source);
  }
}

void TransMsgLoginRspBody::MergeFrom(const TransMsgLoginRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgLoginRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgLoginRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgLoginRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgLoginRspBody::CopyFrom(const TransMsgLoginRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgLoginRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgLoginRspBody::IsInitialized() const {
  return true;
}

void TransMsgLoginRspBody::Swap(TransMsgLoginRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgLoginRspBody::InternalSwap(TransMsgLoginRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgLoginRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgHeartbeatReqBody::InitAsDefaultInstance() {
}
class TransMsgHeartbeatReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgHeartbeatReqBody::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgHeartbeatReqBody::TransMsgHeartbeatReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgHeartbeatReqBody)
}
TransMsgHeartbeatReqBody::TransMsgHeartbeatReqBody(const TransMsgHeartbeatReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TransMsgHeartbeatReqBody)
}

void TransMsgHeartbeatReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgHeartbeatReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransMsgHeartbeatReqBody::~TransMsgHeartbeatReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgHeartbeatReqBody)
  SharedDtor();
}

void TransMsgHeartbeatReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgHeartbeatReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgHeartbeatReqBody& TransMsgHeartbeatReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgHeartbeatReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgHeartbeatReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgHeartbeatReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgHeartbeatReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgHeartbeatReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgHeartbeatReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgHeartbeatReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgHeartbeatReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgHeartbeatReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgHeartbeatReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgHeartbeatReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgHeartbeatReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHeartbeatReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgHeartbeatReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgHeartbeatReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgHeartbeatReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgHeartbeatReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgHeartbeatReqBody)
  return target;
}

size_t TransMsgHeartbeatReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgHeartbeatReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgHeartbeatReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgHeartbeatReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgHeartbeatReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgHeartbeatReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgHeartbeatReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgHeartbeatReqBody)
    MergeFrom(*source);
  }
}

void TransMsgHeartbeatReqBody::MergeFrom(const TransMsgHeartbeatReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgHeartbeatReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
}

void TransMsgHeartbeatReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgHeartbeatReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgHeartbeatReqBody::CopyFrom(const TransMsgHeartbeatReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgHeartbeatReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgHeartbeatReqBody::IsInitialized() const {
  return true;
}

void TransMsgHeartbeatReqBody::Swap(TransMsgHeartbeatReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgHeartbeatReqBody::InternalSwap(TransMsgHeartbeatReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgHeartbeatReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgHeartbeatRspBody::InitAsDefaultInstance() {
}
class TransMsgHeartbeatRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgHeartbeatRspBody::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgHeartbeatRspBody::TransMsgHeartbeatRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgHeartbeatRspBody)
}
TransMsgHeartbeatRspBody::TransMsgHeartbeatRspBody(const TransMsgHeartbeatRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgHeartbeatRspBody)
}

void TransMsgHeartbeatRspBody::SharedCtor() {
  status_ = 0;
}

TransMsgHeartbeatRspBody::~TransMsgHeartbeatRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgHeartbeatRspBody)
  SharedDtor();
}

void TransMsgHeartbeatRspBody::SharedDtor() {
}

void TransMsgHeartbeatRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgHeartbeatRspBody& TransMsgHeartbeatRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgHeartbeatRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgHeartbeatRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgHeartbeatRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgHeartbeatRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgHeartbeatRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgHeartbeatRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgHeartbeatRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgHeartbeatRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgHeartbeatRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgHeartbeatRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgHeartbeatRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgHeartbeatRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgHeartbeatRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgHeartbeatRspBody)
  return target;
}

size_t TransMsgHeartbeatRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgHeartbeatRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgHeartbeatRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgHeartbeatRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgHeartbeatRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgHeartbeatRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgHeartbeatRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgHeartbeatRspBody)
    MergeFrom(*source);
  }
}

void TransMsgHeartbeatRspBody::MergeFrom(const TransMsgHeartbeatRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgHeartbeatRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgHeartbeatRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgHeartbeatRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgHeartbeatRspBody::CopyFrom(const TransMsgHeartbeatRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgHeartbeatRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgHeartbeatRspBody::IsInitialized() const {
  return true;
}

void TransMsgHeartbeatRspBody::Swap(TransMsgHeartbeatRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgHeartbeatRspBody::InternalSwap(TransMsgHeartbeatRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgHeartbeatRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgLogoutReqBody::InitAsDefaultInstance() {
}
class TransMsgLogoutReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgLogoutReqBody::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgLogoutReqBody::TransMsgLogoutReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgLogoutReqBody)
}
TransMsgLogoutReqBody::TransMsgLogoutReqBody(const TransMsgLogoutReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TransMsgLogoutReqBody)
}

void TransMsgLogoutReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgLogoutReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransMsgLogoutReqBody::~TransMsgLogoutReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgLogoutReqBody)
  SharedDtor();
}

void TransMsgLogoutReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgLogoutReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgLogoutReqBody& TransMsgLogoutReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgLogoutReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgLogoutReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgLogoutReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgLogoutReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgLogoutReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgLogoutReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgLogoutReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgLogoutReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgLogoutReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgLogoutReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgLogoutReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgLogoutReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgLogoutReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgLogoutReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgLogoutReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgLogoutReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgLogoutReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgLogoutReqBody)
  return target;
}

size_t TransMsgLogoutReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgLogoutReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgLogoutReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgLogoutReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgLogoutReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgLogoutReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgLogoutReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgLogoutReqBody)
    MergeFrom(*source);
  }
}

void TransMsgLogoutReqBody::MergeFrom(const TransMsgLogoutReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgLogoutReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
}

void TransMsgLogoutReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgLogoutReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgLogoutReqBody::CopyFrom(const TransMsgLogoutReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgLogoutReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgLogoutReqBody::IsInitialized() const {
  return true;
}

void TransMsgLogoutReqBody::Swap(TransMsgLogoutReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgLogoutReqBody::InternalSwap(TransMsgLogoutReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgLogoutReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgLogoutRspBody::InitAsDefaultInstance() {
}
class TransMsgLogoutRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgLogoutRspBody::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgLogoutRspBody::TransMsgLogoutRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgLogoutRspBody)
}
TransMsgLogoutRspBody::TransMsgLogoutRspBody(const TransMsgLogoutRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgLogoutRspBody)
}

void TransMsgLogoutRspBody::SharedCtor() {
  status_ = 0;
}

TransMsgLogoutRspBody::~TransMsgLogoutRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgLogoutRspBody)
  SharedDtor();
}

void TransMsgLogoutRspBody::SharedDtor() {
}

void TransMsgLogoutRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgLogoutRspBody& TransMsgLogoutRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgLogoutRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgLogoutRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgLogoutRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgLogoutRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgLogoutRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgLogoutRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgLogoutRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgLogoutRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgLogoutRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgLogoutRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgLogoutRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgLogoutRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgLogoutRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgLogoutRspBody)
  return target;
}

size_t TransMsgLogoutRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgLogoutRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgLogoutRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgLogoutRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgLogoutRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgLogoutRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgLogoutRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgLogoutRspBody)
    MergeFrom(*source);
  }
}

void TransMsgLogoutRspBody::MergeFrom(const TransMsgLogoutRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgLogoutRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgLogoutRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgLogoutRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgLogoutRspBody::CopyFrom(const TransMsgLogoutRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgLogoutRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgLogoutRspBody::IsInitialized() const {
  return true;
}

void TransMsgLogoutRspBody::Swap(TransMsgLogoutRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgLogoutRspBody::InternalSwap(TransMsgLogoutRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgLogoutRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgSendDataReqBody::InitAsDefaultInstance() {
}
class TransMsgSendDataReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgSendDataReqBody::kNodeIdFieldNumber;
const int TransMsgSendDataReqBody::kTransSessionIdFieldNumber;
const int TransMsgSendDataReqBody::kFileBlockNumFieldNumber;
const int TransMsgSendDataReqBody::kFileBlockDataFieldNumber;
const int TransMsgSendDataReqBody::kBlockHashFieldNumber;
const int TransMsgSendDataReqBody::kFileHashFieldNumber;
const int TransMsgSendDataReqBody::kResendNotifiTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgSendDataReqBody::TransMsgSendDataReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgSendDataReqBody)
}
TransMsgSendDataReqBody::TransMsgSendDataReqBody(const TransMsgSendDataReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  file_block_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.file_block_data().size() > 0) {
    file_block_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_block_data_);
  }
  ::memcpy(&file_block_num_, &from.file_block_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&resend_notifi_timestamp_) -
    reinterpret_cast<char*>(&file_block_num_)) + sizeof(resend_notifi_timestamp_));
  // @@protoc_insertion_point(copy_constructor:TransMsgSendDataReqBody)
}

void TransMsgSendDataReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgSendDataReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_block_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_block_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resend_notifi_timestamp_) -
      reinterpret_cast<char*>(&file_block_num_)) + sizeof(resend_notifi_timestamp_));
}

TransMsgSendDataReqBody::~TransMsgSendDataReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgSendDataReqBody)
  SharedDtor();
}

void TransMsgSendDataReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_block_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgSendDataReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgSendDataReqBody& TransMsgSendDataReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgSendDataReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgSendDataReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgSendDataReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_block_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_block_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resend_notifi_timestamp_) -
      reinterpret_cast<char*>(&file_block_num_)) + sizeof(resend_notifi_timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgSendDataReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgSendDataReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "TransMsgSendDataReqBody.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_block_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes file_block_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_file_block_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          block_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 resend_notifi_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          resend_notifi_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgSendDataReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgSendDataReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgSendDataReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgSendDataReqBody.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_block_num = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes file_block_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_block_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 block_hash = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_hash = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 resend_notifi_timestamp = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resend_notifi_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgSendDataReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgSendDataReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgSendDataReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgSendDataReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSendDataReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSendDataReqBody.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trans_session_id(), output);
  }

  // uint64 file_block_num = 3;
  if (this->file_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->file_block_num(), output);
  }

  // bytes file_block_data = 4;
  if (this->file_block_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->file_block_data(), output);
  }

  // uint64 block_hash = 5;
  if (this->block_hash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->block_hash(), output);
  }

  // uint64 file_hash = 6;
  if (this->file_hash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->file_hash(), output);
  }

  // uint64 resend_notifi_timestamp = 7;
  if (this->resend_notifi_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->resend_notifi_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgSendDataReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgSendDataReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgSendDataReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSendDataReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSendDataReqBody.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trans_session_id(), target);
  }

  // uint64 file_block_num = 3;
  if (this->file_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_block_num(), target);
  }

  // bytes file_block_data = 4;
  if (this->file_block_data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->file_block_data(), target);
  }

  // uint64 block_hash = 5;
  if (this->block_hash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->block_hash(), target);
  }

  // uint64 file_hash = 6;
  if (this->file_hash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->file_hash(), target);
  }

  // uint64 resend_notifi_timestamp = 7;
  if (this->resend_notifi_timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->resend_notifi_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgSendDataReqBody)
  return target;
}

size_t TransMsgSendDataReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgSendDataReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // bytes file_block_data = 4;
  if (this->file_block_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->file_block_data());
  }

  // uint64 file_block_num = 3;
  if (this->file_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_block_num());
  }

  // uint64 block_hash = 5;
  if (this->block_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->block_hash());
  }

  // uint64 file_hash = 6;
  if (this->file_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_hash());
  }

  // uint64 resend_notifi_timestamp = 7;
  if (this->resend_notifi_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->resend_notifi_timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgSendDataReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgSendDataReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgSendDataReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgSendDataReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgSendDataReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgSendDataReqBody)
    MergeFrom(*source);
  }
}

void TransMsgSendDataReqBody::MergeFrom(const TransMsgSendDataReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgSendDataReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.file_block_data().size() > 0) {

    file_block_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_block_data_);
  }
  if (from.file_block_num() != 0) {
    set_file_block_num(from.file_block_num());
  }
  if (from.block_hash() != 0) {
    set_block_hash(from.block_hash());
  }
  if (from.file_hash() != 0) {
    set_file_hash(from.file_hash());
  }
  if (from.resend_notifi_timestamp() != 0) {
    set_resend_notifi_timestamp(from.resend_notifi_timestamp());
  }
}

void TransMsgSendDataReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgSendDataReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgSendDataReqBody::CopyFrom(const TransMsgSendDataReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgSendDataReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgSendDataReqBody::IsInitialized() const {
  return true;
}

void TransMsgSendDataReqBody::Swap(TransMsgSendDataReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgSendDataReqBody::InternalSwap(TransMsgSendDataReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_block_data_.Swap(&other->file_block_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_block_num_, other->file_block_num_);
  swap(block_hash_, other->block_hash_);
  swap(file_hash_, other->file_hash_);
  swap(resend_notifi_timestamp_, other->resend_notifi_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgSendDataReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgResendDataNotifiReqBody::InitAsDefaultInstance() {
}
class TransMsgResendDataNotifiReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgResendDataNotifiReqBody::kNodeIdFieldNumber;
const int TransMsgResendDataNotifiReqBody::kTransSessionIdFieldNumber;
const int TransMsgResendDataNotifiReqBody::kResendNotifiTimestampFieldNumber;
const int TransMsgResendDataNotifiReqBody::kGroupTotalPacketCountFieldNumber;
const int TransMsgResendDataNotifiReqBody::kGroupPacketNumFieldNumber;
const int TransMsgResendDataNotifiReqBody::kMaxReceivedFileBlockNumFieldNumber;
const int TransMsgResendDataNotifiReqBody::kReceivedFileBlocksCountFieldNumber;
const int TransMsgResendDataNotifiReqBody::kResendBlockListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgResendDataNotifiReqBody::TransMsgResendDataNotifiReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgResendDataNotifiReqBody)
}
TransMsgResendDataNotifiReqBody::TransMsgResendDataNotifiReqBody(const TransMsgResendDataNotifiReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      resend_block_list_(from.resend_block_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  ::memcpy(&resend_notifi_timestamp_, &from.resend_notifi_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&received_file_blocks_count_) -
    reinterpret_cast<char*>(&resend_notifi_timestamp_)) + sizeof(received_file_blocks_count_));
  // @@protoc_insertion_point(copy_constructor:TransMsgResendDataNotifiReqBody)
}

void TransMsgResendDataNotifiReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgResendDataNotifiReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resend_notifi_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_file_blocks_count_) -
      reinterpret_cast<char*>(&resend_notifi_timestamp_)) + sizeof(received_file_blocks_count_));
}

TransMsgResendDataNotifiReqBody::~TransMsgResendDataNotifiReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgResendDataNotifiReqBody)
  SharedDtor();
}

void TransMsgResendDataNotifiReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgResendDataNotifiReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgResendDataNotifiReqBody& TransMsgResendDataNotifiReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgResendDataNotifiReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgResendDataNotifiReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgResendDataNotifiReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resend_block_list_.Clear();
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resend_notifi_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&received_file_blocks_count_) -
      reinterpret_cast<char*>(&resend_notifi_timestamp_)) + sizeof(received_file_blocks_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgResendDataNotifiReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgResendDataNotifiReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "TransMsgResendDataNotifiReqBody.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 resend_notifi_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          resend_notifi_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_total_packet_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          group_total_packet_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 group_packet_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          group_packet_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_received_file_block_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_received_file_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 received_file_blocks_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          received_file_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 resend_block_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_resend_block_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          add_resend_block_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgResendDataNotifiReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgResendDataNotifiReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgResendDataNotifiReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgResendDataNotifiReqBody.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 resend_notifi_timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resend_notifi_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group_total_packet_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_total_packet_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group_packet_num = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_packet_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_received_file_block_num = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_received_file_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 received_file_blocks_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_file_blocks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 resend_block_list = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_resend_block_list())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 66u, input, this->mutable_resend_block_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgResendDataNotifiReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgResendDataNotifiReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgResendDataNotifiReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgResendDataNotifiReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgResendDataNotifiReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgResendDataNotifiReqBody.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trans_session_id(), output);
  }

  // uint64 resend_notifi_timestamp = 3;
  if (this->resend_notifi_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->resend_notifi_timestamp(), output);
  }

  // int32 group_total_packet_count = 4;
  if (this->group_total_packet_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->group_total_packet_count(), output);
  }

  // int32 group_packet_num = 5;
  if (this->group_packet_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->group_packet_num(), output);
  }

  // uint64 max_received_file_block_num = 6;
  if (this->max_received_file_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->max_received_file_block_num(), output);
  }

  // uint64 received_file_blocks_count = 7;
  if (this->received_file_blocks_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->received_file_blocks_count(), output);
  }

  // repeated uint64 resend_block_list = 8;
  if (this->resend_block_list_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(8, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_resend_block_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->resend_block_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->resend_block_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgResendDataNotifiReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgResendDataNotifiReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgResendDataNotifiReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgResendDataNotifiReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgResendDataNotifiReqBody.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trans_session_id(), target);
  }

  // uint64 resend_notifi_timestamp = 3;
  if (this->resend_notifi_timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->resend_notifi_timestamp(), target);
  }

  // int32 group_total_packet_count = 4;
  if (this->group_total_packet_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->group_total_packet_count(), target);
  }

  // int32 group_packet_num = 5;
  if (this->group_packet_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->group_packet_num(), target);
  }

  // uint64 max_received_file_block_num = 6;
  if (this->max_received_file_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->max_received_file_block_num(), target);
  }

  // uint64 received_file_blocks_count = 7;
  if (this->received_file_blocks_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->received_file_blocks_count(), target);
  }

  // repeated uint64 resend_block_list = 8;
  if (this->resend_block_list_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      8,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _resend_block_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->resend_block_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgResendDataNotifiReqBody)
  return target;
}

size_t TransMsgResendDataNotifiReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgResendDataNotifiReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 resend_block_list = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->resend_block_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _resend_block_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // uint64 resend_notifi_timestamp = 3;
  if (this->resend_notifi_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->resend_notifi_timestamp());
  }

  // int32 group_total_packet_count = 4;
  if (this->group_total_packet_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->group_total_packet_count());
  }

  // int32 group_packet_num = 5;
  if (this->group_packet_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->group_packet_num());
  }

  // uint64 max_received_file_block_num = 6;
  if (this->max_received_file_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->max_received_file_block_num());
  }

  // uint64 received_file_blocks_count = 7;
  if (this->received_file_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->received_file_blocks_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgResendDataNotifiReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgResendDataNotifiReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgResendDataNotifiReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgResendDataNotifiReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgResendDataNotifiReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgResendDataNotifiReqBody)
    MergeFrom(*source);
  }
}

void TransMsgResendDataNotifiReqBody::MergeFrom(const TransMsgResendDataNotifiReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgResendDataNotifiReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resend_block_list_.MergeFrom(from.resend_block_list_);
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.resend_notifi_timestamp() != 0) {
    set_resend_notifi_timestamp(from.resend_notifi_timestamp());
  }
  if (from.group_total_packet_count() != 0) {
    set_group_total_packet_count(from.group_total_packet_count());
  }
  if (from.group_packet_num() != 0) {
    set_group_packet_num(from.group_packet_num());
  }
  if (from.max_received_file_block_num() != 0) {
    set_max_received_file_block_num(from.max_received_file_block_num());
  }
  if (from.received_file_blocks_count() != 0) {
    set_received_file_blocks_count(from.received_file_blocks_count());
  }
}

void TransMsgResendDataNotifiReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgResendDataNotifiReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgResendDataNotifiReqBody::CopyFrom(const TransMsgResendDataNotifiReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgResendDataNotifiReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgResendDataNotifiReqBody::IsInitialized() const {
  return true;
}

void TransMsgResendDataNotifiReqBody::Swap(TransMsgResendDataNotifiReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgResendDataNotifiReqBody::InternalSwap(TransMsgResendDataNotifiReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resend_block_list_.InternalSwap(&other->resend_block_list_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resend_notifi_timestamp_, other->resend_notifi_timestamp_);
  swap(group_total_packet_count_, other->group_total_packet_count_);
  swap(group_packet_num_, other->group_packet_num_);
  swap(max_received_file_block_num_, other->max_received_file_block_num_);
  swap(received_file_blocks_count_, other->received_file_blocks_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgResendDataNotifiReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgResendDataNotifiRspBody::InitAsDefaultInstance() {
}
class TransMsgResendDataNotifiRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgResendDataNotifiRspBody::kStatusFieldNumber;
const int TransMsgResendDataNotifiRspBody::kProcessTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgResendDataNotifiRspBody::TransMsgResendDataNotifiRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgResendDataNotifiRspBody)
}
TransMsgResendDataNotifiRspBody::TransMsgResendDataNotifiRspBody(const TransMsgResendDataNotifiRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&process_times_, &from.process_times_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&process_times_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:TransMsgResendDataNotifiRspBody)
}

void TransMsgResendDataNotifiRspBody::SharedCtor() {
  ::memset(&process_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&process_times_)) + sizeof(status_));
}

TransMsgResendDataNotifiRspBody::~TransMsgResendDataNotifiRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgResendDataNotifiRspBody)
  SharedDtor();
}

void TransMsgResendDataNotifiRspBody::SharedDtor() {
}

void TransMsgResendDataNotifiRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgResendDataNotifiRspBody& TransMsgResendDataNotifiRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgResendDataNotifiRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgResendDataNotifiRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgResendDataNotifiRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&process_times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&process_times_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgResendDataNotifiRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 process_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          process_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgResendDataNotifiRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgResendDataNotifiRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 process_times = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &process_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgResendDataNotifiRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgResendDataNotifiRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgResendDataNotifiRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgResendDataNotifiRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // int64 process_times = 2;
  if (this->process_times() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->process_times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgResendDataNotifiRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgResendDataNotifiRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgResendDataNotifiRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // int64 process_times = 2;
  if (this->process_times() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->process_times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgResendDataNotifiRspBody)
  return target;
}

size_t TransMsgResendDataNotifiRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgResendDataNotifiRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 process_times = 2;
  if (this->process_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->process_times());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgResendDataNotifiRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgResendDataNotifiRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgResendDataNotifiRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgResendDataNotifiRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgResendDataNotifiRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgResendDataNotifiRspBody)
    MergeFrom(*source);
  }
}

void TransMsgResendDataNotifiRspBody::MergeFrom(const TransMsgResendDataNotifiRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgResendDataNotifiRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.process_times() != 0) {
    set_process_times(from.process_times());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgResendDataNotifiRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgResendDataNotifiRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgResendDataNotifiRspBody::CopyFrom(const TransMsgResendDataNotifiRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgResendDataNotifiRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgResendDataNotifiRspBody::IsInitialized() const {
  return true;
}

void TransMsgResendDataNotifiRspBody::Swap(TransMsgResendDataNotifiRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgResendDataNotifiRspBody::InternalSwap(TransMsgResendDataNotifiRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(process_times_, other->process_times_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgResendDataNotifiRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgFinishNotifiReqBody::InitAsDefaultInstance() {
}
class TransMsgFinishNotifiReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgFinishNotifiReqBody::kNodeIdFieldNumber;
const int TransMsgFinishNotifiReqBody::kTransSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgFinishNotifiReqBody::TransMsgFinishNotifiReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgFinishNotifiReqBody)
}
TransMsgFinishNotifiReqBody::TransMsgFinishNotifiReqBody(const TransMsgFinishNotifiReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TransMsgFinishNotifiReqBody)
}

void TransMsgFinishNotifiReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgFinishNotifiReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransMsgFinishNotifiReqBody::~TransMsgFinishNotifiReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgFinishNotifiReqBody)
  SharedDtor();
}

void TransMsgFinishNotifiReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgFinishNotifiReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgFinishNotifiReqBody& TransMsgFinishNotifiReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgFinishNotifiReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgFinishNotifiReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgFinishNotifiReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgFinishNotifiReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgFinishNotifiReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "TransMsgFinishNotifiReqBody.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgFinishNotifiReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgFinishNotifiReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgFinishNotifiReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgFinishNotifiReqBody.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgFinishNotifiReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgFinishNotifiReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgFinishNotifiReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgFinishNotifiReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgFinishNotifiReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgFinishNotifiReqBody.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trans_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgFinishNotifiReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgFinishNotifiReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgFinishNotifiReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgFinishNotifiReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgFinishNotifiReqBody.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trans_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgFinishNotifiReqBody)
  return target;
}

size_t TransMsgFinishNotifiReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgFinishNotifiReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgFinishNotifiReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgFinishNotifiReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgFinishNotifiReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgFinishNotifiReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgFinishNotifiReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgFinishNotifiReqBody)
    MergeFrom(*source);
  }
}

void TransMsgFinishNotifiReqBody::MergeFrom(const TransMsgFinishNotifiReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgFinishNotifiReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
}

void TransMsgFinishNotifiReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgFinishNotifiReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgFinishNotifiReqBody::CopyFrom(const TransMsgFinishNotifiReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgFinishNotifiReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgFinishNotifiReqBody::IsInitialized() const {
  return true;
}

void TransMsgFinishNotifiReqBody::Swap(TransMsgFinishNotifiReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgFinishNotifiReqBody::InternalSwap(TransMsgFinishNotifiReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgFinishNotifiReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgFinishNotifiRspBody::InitAsDefaultInstance() {
}
class TransMsgFinishNotifiRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgFinishNotifiRspBody::kStatusFieldNumber;
const int TransMsgFinishNotifiRspBody::kTransSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgFinishNotifiRspBody::TransMsgFinishNotifiRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgFinishNotifiRspBody)
}
TransMsgFinishNotifiRspBody::TransMsgFinishNotifiRspBody(const TransMsgFinishNotifiRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgFinishNotifiRspBody)
}

void TransMsgFinishNotifiRspBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgFinishNotifiRspBody_TransMessageApi_2eproto.base);
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

TransMsgFinishNotifiRspBody::~TransMsgFinishNotifiRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgFinishNotifiRspBody)
  SharedDtor();
}

void TransMsgFinishNotifiRspBody::SharedDtor() {
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgFinishNotifiRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgFinishNotifiRspBody& TransMsgFinishNotifiRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgFinishNotifiRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgFinishNotifiRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgFinishNotifiRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgFinishNotifiRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "TransMsgFinishNotifiRspBody.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgFinishNotifiRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgFinishNotifiRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgFinishNotifiRspBody.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgFinishNotifiRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgFinishNotifiRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgFinishNotifiRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgFinishNotifiRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgFinishNotifiRspBody.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trans_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgFinishNotifiRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgFinishNotifiRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgFinishNotifiRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgFinishNotifiRspBody.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trans_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgFinishNotifiRspBody)
  return target;
}

size_t TransMsgFinishNotifiRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgFinishNotifiRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgFinishNotifiRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgFinishNotifiRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgFinishNotifiRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgFinishNotifiRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgFinishNotifiRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgFinishNotifiRspBody)
    MergeFrom(*source);
  }
}

void TransMsgFinishNotifiRspBody::MergeFrom(const TransMsgFinishNotifiRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgFinishNotifiRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgFinishNotifiRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgFinishNotifiRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgFinishNotifiRspBody::CopyFrom(const TransMsgFinishNotifiRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgFinishNotifiRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgFinishNotifiRspBody::IsInitialized() const {
  return true;
}

void TransMsgFinishNotifiRspBody::Swap(TransMsgFinishNotifiRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgFinishNotifiRspBody::InternalSwap(TransMsgFinishNotifiRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgFinishNotifiRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgDirProcessReqBody::InitAsDefaultInstance() {
}
class TransMsgDirProcessReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgDirProcessReqBody::kNodeIdFieldNumber;
const int TransMsgDirProcessReqBody::kTransSessionIdFieldNumber;
const int TransMsgDirProcessReqBody::kProcessTypeFieldNumber;
const int TransMsgDirProcessReqBody::kRemotePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgDirProcessReqBody::TransMsgDirProcessReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgDirProcessReqBody)
}
TransMsgDirProcessReqBody::TransMsgDirProcessReqBody(const TransMsgDirProcessReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.remote_path().size() > 0) {
    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  process_type_ = from.process_type_;
  // @@protoc_insertion_point(copy_constructor:TransMsgDirProcessReqBody)
}

void TransMsgDirProcessReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgDirProcessReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_type_ = 0;
}

TransMsgDirProcessReqBody::~TransMsgDirProcessReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgDirProcessReqBody)
  SharedDtor();
}

void TransMsgDirProcessReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgDirProcessReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgDirProcessReqBody& TransMsgDirProcessReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgDirProcessReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgDirProcessReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgDirProcessReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgDirProcessReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgDirProcessReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "TransMsgDirProcessReqBody.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 process_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          process_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_path(), ptr, ctx, "TransMsgDirProcessReqBody.remote_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgDirProcessReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgDirProcessReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDirProcessReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDirProcessReqBody.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 process_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_path = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_path().data(), static_cast<int>(this->remote_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDirProcessReqBody.remote_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgDirProcessReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgDirProcessReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgDirProcessReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgDirProcessReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDirProcessReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDirProcessReqBody.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trans_session_id(), output);
  }

  // int32 process_type = 3;
  if (this->process_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->process_type(), output);
  }

  // string remote_path = 4;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDirProcessReqBody.remote_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remote_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgDirProcessReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgDirProcessReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgDirProcessReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDirProcessReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDirProcessReqBody.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trans_session_id(), target);
  }

  // int32 process_type = 3;
  if (this->process_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->process_type(), target);
  }

  // string remote_path = 4;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDirProcessReqBody.remote_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->remote_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgDirProcessReqBody)
  return target;
}

size_t TransMsgDirProcessReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgDirProcessReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // string remote_path = 4;
  if (this->remote_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_path());
  }

  // int32 process_type = 3;
  if (this->process_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->process_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgDirProcessReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgDirProcessReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgDirProcessReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgDirProcessReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgDirProcessReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgDirProcessReqBody)
    MergeFrom(*source);
  }
}

void TransMsgDirProcessReqBody::MergeFrom(const TransMsgDirProcessReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgDirProcessReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.remote_path().size() > 0) {

    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  if (from.process_type() != 0) {
    set_process_type(from.process_type());
  }
}

void TransMsgDirProcessReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgDirProcessReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgDirProcessReqBody::CopyFrom(const TransMsgDirProcessReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgDirProcessReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgDirProcessReqBody::IsInitialized() const {
  return true;
}

void TransMsgDirProcessReqBody::Swap(TransMsgDirProcessReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgDirProcessReqBody::InternalSwap(TransMsgDirProcessReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(process_type_, other->process_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgDirProcessReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgDirProcessRspBody::InitAsDefaultInstance() {
}
class TransMsgDirProcessRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgDirProcessRspBody::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgDirProcessRspBody::TransMsgDirProcessRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgDirProcessRspBody)
}
TransMsgDirProcessRspBody::TransMsgDirProcessRspBody(const TransMsgDirProcessRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgDirProcessRspBody)
}

void TransMsgDirProcessRspBody::SharedCtor() {
  status_ = 0;
}

TransMsgDirProcessRspBody::~TransMsgDirProcessRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgDirProcessRspBody)
  SharedDtor();
}

void TransMsgDirProcessRspBody::SharedDtor() {
}

void TransMsgDirProcessRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgDirProcessRspBody& TransMsgDirProcessRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgDirProcessRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgDirProcessRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgDirProcessRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgDirProcessRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgDirProcessRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgDirProcessRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgDirProcessRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgDirProcessRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgDirProcessRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgDirProcessRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgDirProcessRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgDirProcessRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgDirProcessRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgDirProcessRspBody)
  return target;
}

size_t TransMsgDirProcessRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgDirProcessRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgDirProcessRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgDirProcessRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgDirProcessRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgDirProcessRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgDirProcessRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgDirProcessRspBody)
    MergeFrom(*source);
  }
}

void TransMsgDirProcessRspBody::MergeFrom(const TransMsgDirProcessRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgDirProcessRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgDirProcessRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgDirProcessRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgDirProcessRspBody::CopyFrom(const TransMsgDirProcessRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgDirProcessRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgDirProcessRspBody::IsInitialized() const {
  return true;
}

void TransMsgDirProcessRspBody::Swap(TransMsgDirProcessRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgDirProcessRspBody::InternalSwap(TransMsgDirProcessRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgDirProcessRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgUploadFileReqBody::InitAsDefaultInstance() {
}
class TransMsgUploadFileReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgUploadFileReqBody::kNodeIdFieldNumber;
const int TransMsgUploadFileReqBody::kUsrTransIdFieldNumber;
const int TransMsgUploadFileReqBody::kExchangeTypeFieldNumber;
const int TransMsgUploadFileReqBody::kRemotePathFieldNumber;
const int TransMsgUploadFileReqBody::kLocalPathFieldNumber;
const int TransMsgUploadFileReqBody::kFileSizeFieldNumber;
const int TransMsgUploadFileReqBody::kTotalFileBlocksCountFieldNumber;
const int TransMsgUploadFileReqBody::kFileBlockSizeFieldNumber;
const int TransMsgUploadFileReqBody::kFileBlockStartNumFieldNumber;
const int TransMsgUploadFileReqBody::kFileHashFieldNumber;
const int TransMsgUploadFileReqBody::kTransferRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgUploadFileReqBody::TransMsgUploadFileReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgUploadFileReqBody)
}
TransMsgUploadFileReqBody::TransMsgUploadFileReqBody(const TransMsgUploadFileReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.remote_path().size() > 0) {
    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.local_path().size() > 0) {
    local_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_type_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(exchange_type_));
  // @@protoc_insertion_point(copy_constructor:TransMsgUploadFileReqBody)
}

void TransMsgUploadFileReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgUploadFileReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_type_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(exchange_type_));
}

TransMsgUploadFileReqBody::~TransMsgUploadFileReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgUploadFileReqBody)
  SharedDtor();
}

void TransMsgUploadFileReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgUploadFileReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgUploadFileReqBody& TransMsgUploadFileReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgUploadFileReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgUploadFileReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgUploadFileReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_type_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(exchange_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgUploadFileReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgUploadFileReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "TransMsgUploadFileReqBody.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exchange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_path(), ptr, ctx, "TransMsgUploadFileReqBody.remote_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_local_path(), ptr, ctx, "TransMsgUploadFileReqBody.local_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_file_blocks_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_file_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_block_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          file_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_block_start_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          file_block_start_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          file_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transfer_rate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          transfer_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgUploadFileReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgUploadFileReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgUploadFileReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgUploadFileReqBody.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exchange_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_path = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_path().data(), static_cast<int>(this->remote_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgUploadFileReqBody.remote_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_path = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_local_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->local_path().data(), static_cast<int>(this->local_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgUploadFileReqBody.local_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_file_blocks_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_file_blocks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_block_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_block_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_block_start_num = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_block_start_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_hash = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 transfer_rate = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transfer_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgUploadFileReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgUploadFileReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgUploadFileReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgUploadFileReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileReqBody.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr_trans_id(), output);
  }

  // int32 exchange_type = 3;
  if (this->exchange_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->exchange_type(), output);
  }

  // string remote_path = 4;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileReqBody.remote_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remote_path(), output);
  }

  // string local_path = 5;
  if (this->local_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileReqBody.local_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->local_path(), output);
  }

  // uint64 file_size = 6;
  if (this->file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->file_size(), output);
  }

  // uint64 total_file_blocks_count = 7;
  if (this->total_file_blocks_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->total_file_blocks_count(), output);
  }

  // uint64 file_block_size = 8;
  if (this->file_block_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->file_block_size(), output);
  }

  // uint64 file_block_start_num = 9;
  if (this->file_block_start_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->file_block_start_num(), output);
  }

  // uint64 file_hash = 10;
  if (this->file_hash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->file_hash(), output);
  }

  // uint64 transfer_rate = 11;
  if (this->transfer_rate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->transfer_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgUploadFileReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgUploadFileReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgUploadFileReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileReqBody.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->usr_trans_id(), target);
  }

  // int32 exchange_type = 3;
  if (this->exchange_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->exchange_type(), target);
  }

  // string remote_path = 4;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileReqBody.remote_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->remote_path(), target);
  }

  // string local_path = 5;
  if (this->local_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileReqBody.local_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->local_path(), target);
  }

  // uint64 file_size = 6;
  if (this->file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->file_size(), target);
  }

  // uint64 total_file_blocks_count = 7;
  if (this->total_file_blocks_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->total_file_blocks_count(), target);
  }

  // uint64 file_block_size = 8;
  if (this->file_block_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->file_block_size(), target);
  }

  // uint64 file_block_start_num = 9;
  if (this->file_block_start_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->file_block_start_num(), target);
  }

  // uint64 file_hash = 10;
  if (this->file_hash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->file_hash(), target);
  }

  // uint64 transfer_rate = 11;
  if (this->transfer_rate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->transfer_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgUploadFileReqBody)
  return target;
}

size_t TransMsgUploadFileReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgUploadFileReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // string remote_path = 4;
  if (this->remote_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_path());
  }

  // string local_path = 5;
  if (this->local_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->local_path());
  }

  // uint64 file_size = 6;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // uint64 total_file_blocks_count = 7;
  if (this->total_file_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->total_file_blocks_count());
  }

  // uint64 file_block_size = 8;
  if (this->file_block_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_block_size());
  }

  // uint64 file_block_start_num = 9;
  if (this->file_block_start_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_block_start_num());
  }

  // uint64 file_hash = 10;
  if (this->file_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_hash());
  }

  // uint64 transfer_rate = 11;
  if (this->transfer_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->transfer_rate());
  }

  // int32 exchange_type = 3;
  if (this->exchange_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgUploadFileReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgUploadFileReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgUploadFileReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgUploadFileReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgUploadFileReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgUploadFileReqBody)
    MergeFrom(*source);
  }
}

void TransMsgUploadFileReqBody::MergeFrom(const TransMsgUploadFileReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgUploadFileReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.remote_path().size() > 0) {

    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  if (from.local_path().size() > 0) {

    local_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.total_file_blocks_count() != 0) {
    set_total_file_blocks_count(from.total_file_blocks_count());
  }
  if (from.file_block_size() != 0) {
    set_file_block_size(from.file_block_size());
  }
  if (from.file_block_start_num() != 0) {
    set_file_block_start_num(from.file_block_start_num());
  }
  if (from.file_hash() != 0) {
    set_file_hash(from.file_hash());
  }
  if (from.transfer_rate() != 0) {
    set_transfer_rate(from.transfer_rate());
  }
  if (from.exchange_type() != 0) {
    set_exchange_type(from.exchange_type());
  }
}

void TransMsgUploadFileReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgUploadFileReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgUploadFileReqBody::CopyFrom(const TransMsgUploadFileReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgUploadFileReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgUploadFileReqBody::IsInitialized() const {
  return true;
}

void TransMsgUploadFileReqBody::Swap(TransMsgUploadFileReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgUploadFileReqBody::InternalSwap(TransMsgUploadFileReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_path_.Swap(&other->local_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
  swap(total_file_blocks_count_, other->total_file_blocks_count_);
  swap(file_block_size_, other->file_block_size_);
  swap(file_block_start_num_, other->file_block_start_num_);
  swap(file_hash_, other->file_hash_);
  swap(transfer_rate_, other->transfer_rate_);
  swap(exchange_type_, other->exchange_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgUploadFileReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgUploadFileRspBody::InitAsDefaultInstance() {
}
class TransMsgUploadFileRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgUploadFileRspBody::kStatusFieldNumber;
const int TransMsgUploadFileRspBody::kTransSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgUploadFileRspBody::TransMsgUploadFileRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgUploadFileRspBody)
}
TransMsgUploadFileRspBody::TransMsgUploadFileRspBody(const TransMsgUploadFileRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgUploadFileRspBody)
}

void TransMsgUploadFileRspBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgUploadFileRspBody_TransMessageApi_2eproto.base);
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

TransMsgUploadFileRspBody::~TransMsgUploadFileRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgUploadFileRspBody)
  SharedDtor();
}

void TransMsgUploadFileRspBody::SharedDtor() {
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgUploadFileRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgUploadFileRspBody& TransMsgUploadFileRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgUploadFileRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgUploadFileRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgUploadFileRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgUploadFileRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "TransMsgUploadFileRspBody.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgUploadFileRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgUploadFileRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgUploadFileRspBody.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgUploadFileRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgUploadFileRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgUploadFileRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgUploadFileRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileRspBody.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trans_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgUploadFileRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgUploadFileRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgUploadFileRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgUploadFileRspBody.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->trans_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgUploadFileRspBody)
  return target;
}

size_t TransMsgUploadFileRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgUploadFileRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trans_session_id = 2;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgUploadFileRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgUploadFileRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgUploadFileRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgUploadFileRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgUploadFileRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgUploadFileRspBody)
    MergeFrom(*source);
  }
}

void TransMsgUploadFileRspBody::MergeFrom(const TransMsgUploadFileRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgUploadFileRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgUploadFileRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgUploadFileRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgUploadFileRspBody::CopyFrom(const TransMsgUploadFileRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgUploadFileRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgUploadFileRspBody::IsInitialized() const {
  return true;
}

void TransMsgUploadFileRspBody::Swap(TransMsgUploadFileRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgUploadFileRspBody::InternalSwap(TransMsgUploadFileRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgUploadFileRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgStopUploadReqBody::InitAsDefaultInstance() {
}
class TransMsgStopUploadReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgStopUploadReqBody::kNodeIdFieldNumber;
const int TransMsgStopUploadReqBody::kUsrTransIdFieldNumber;
const int TransMsgStopUploadReqBody::kTransSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgStopUploadReqBody::TransMsgStopUploadReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgStopUploadReqBody)
}
TransMsgStopUploadReqBody::TransMsgStopUploadReqBody(const TransMsgStopUploadReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TransMsgStopUploadReqBody)
}

void TransMsgStopUploadReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgStopUploadReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransMsgStopUploadReqBody::~TransMsgStopUploadReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgStopUploadReqBody)
  SharedDtor();
}

void TransMsgStopUploadReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgStopUploadReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgStopUploadReqBody& TransMsgStopUploadReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgStopUploadReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgStopUploadReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgStopUploadReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgStopUploadReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgStopUploadReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "TransMsgStopUploadReqBody.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "TransMsgStopUploadReqBody.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgStopUploadReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgStopUploadReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgStopUploadReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgStopUploadReqBody.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgStopUploadReqBody.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgStopUploadReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgStopUploadReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgStopUploadReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgStopUploadReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopUploadReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopUploadReqBody.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr_trans_id(), output);
  }

  // string trans_session_id = 3;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopUploadReqBody.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trans_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgStopUploadReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgStopUploadReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgStopUploadReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopUploadReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopUploadReqBody.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->usr_trans_id(), target);
  }

  // string trans_session_id = 3;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopUploadReqBody.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->trans_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgStopUploadReqBody)
  return target;
}

size_t TransMsgStopUploadReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgStopUploadReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // string trans_session_id = 3;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgStopUploadReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgStopUploadReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgStopUploadReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgStopUploadReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgStopUploadReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgStopUploadReqBody)
    MergeFrom(*source);
  }
}

void TransMsgStopUploadReqBody::MergeFrom(const TransMsgStopUploadReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgStopUploadReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
}

void TransMsgStopUploadReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgStopUploadReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgStopUploadReqBody::CopyFrom(const TransMsgStopUploadReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgStopUploadReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgStopUploadReqBody::IsInitialized() const {
  return true;
}

void TransMsgStopUploadReqBody::Swap(TransMsgStopUploadReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgStopUploadReqBody::InternalSwap(TransMsgStopUploadReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgStopUploadReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgStopUploadRspBody::InitAsDefaultInstance() {
}
class TransMsgStopUploadRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgStopUploadRspBody::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgStopUploadRspBody::TransMsgStopUploadRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgStopUploadRspBody)
}
TransMsgStopUploadRspBody::TransMsgStopUploadRspBody(const TransMsgStopUploadRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgStopUploadRspBody)
}

void TransMsgStopUploadRspBody::SharedCtor() {
  status_ = 0;
}

TransMsgStopUploadRspBody::~TransMsgStopUploadRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgStopUploadRspBody)
  SharedDtor();
}

void TransMsgStopUploadRspBody::SharedDtor() {
}

void TransMsgStopUploadRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgStopUploadRspBody& TransMsgStopUploadRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgStopUploadRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgStopUploadRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgStopUploadRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgStopUploadRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgStopUploadRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgStopUploadRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgStopUploadRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgStopUploadRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgStopUploadRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgStopUploadRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgStopUploadRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgStopUploadRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgStopUploadRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgStopUploadRspBody)
  return target;
}

size_t TransMsgStopUploadRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgStopUploadRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgStopUploadRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgStopUploadRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgStopUploadRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgStopUploadRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgStopUploadRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgStopUploadRspBody)
    MergeFrom(*source);
  }
}

void TransMsgStopUploadRspBody::MergeFrom(const TransMsgStopUploadRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgStopUploadRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgStopUploadRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgStopUploadRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgStopUploadRspBody::CopyFrom(const TransMsgStopUploadRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgStopUploadRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgStopUploadRspBody::IsInitialized() const {
  return true;
}

void TransMsgStopUploadRspBody::Swap(TransMsgStopUploadRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgStopUploadRspBody::InternalSwap(TransMsgStopUploadRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgStopUploadRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgCliNotifySvrDownloadDataReqBody::InitAsDefaultInstance() {
}
class TransMsgCliNotifySvrDownloadDataReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgCliNotifySvrDownloadDataReqBody::kNodeIdFieldNumber;
const int TransMsgCliNotifySvrDownloadDataReqBody::kUsrTransIdFieldNumber;
const int TransMsgCliNotifySvrDownloadDataReqBody::kExchangeTypeFieldNumber;
const int TransMsgCliNotifySvrDownloadDataReqBody::kRemotePathFieldNumber;
const int TransMsgCliNotifySvrDownloadDataReqBody::kLocalPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgCliNotifySvrDownloadDataReqBody::TransMsgCliNotifySvrDownloadDataReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgCliNotifySvrDownloadDataReqBody)
}
TransMsgCliNotifySvrDownloadDataReqBody::TransMsgCliNotifySvrDownloadDataReqBody(const TransMsgCliNotifySvrDownloadDataReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      remote_path_(from.remote_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.local_path().size() > 0) {
    local_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  exchange_type_ = from.exchange_type_;
  // @@protoc_insertion_point(copy_constructor:TransMsgCliNotifySvrDownloadDataReqBody)
}

void TransMsgCliNotifySvrDownloadDataReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgCliNotifySvrDownloadDataReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_type_ = 0;
}

TransMsgCliNotifySvrDownloadDataReqBody::~TransMsgCliNotifySvrDownloadDataReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgCliNotifySvrDownloadDataReqBody)
  SharedDtor();
}

void TransMsgCliNotifySvrDownloadDataReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgCliNotifySvrDownloadDataReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgCliNotifySvrDownloadDataReqBody& TransMsgCliNotifySvrDownloadDataReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgCliNotifySvrDownloadDataReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgCliNotifySvrDownloadDataReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgCliNotifySvrDownloadDataReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_path_.Clear();
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgCliNotifySvrDownloadDataReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgCliNotifySvrDownloadDataReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exchange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string remote_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_remote_path(), ptr, ctx, "TransMsgCliNotifySvrDownloadDataReqBody.remote_path");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // string local_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_local_path(), ptr, ctx, "TransMsgCliNotifySvrDownloadDataReqBody.local_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgCliNotifySvrDownloadDataReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgCliNotifySvrDownloadDataReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgCliNotifySvrDownloadDataReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exchange_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string remote_path = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_remote_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_path(this->remote_path_size() - 1).data(),
            static_cast<int>(this->remote_path(this->remote_path_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgCliNotifySvrDownloadDataReqBody.remote_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_path = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_local_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->local_path().data(), static_cast<int>(this->local_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgCliNotifySvrDownloadDataReqBody.local_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgCliNotifySvrDownloadDataReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgCliNotifySvrDownloadDataReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgCliNotifySvrDownloadDataReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgCliNotifySvrDownloadDataReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr_trans_id(), output);
  }

  // int32 exchange_type = 3;
  if (this->exchange_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->exchange_type(), output);
  }

  // repeated string remote_path = 4;
  for (int i = 0, n = this->remote_path_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path(i).data(), static_cast<int>(this->remote_path(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataReqBody.remote_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->remote_path(i), output);
  }

  // string local_path = 5;
  if (this->local_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataReqBody.local_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->local_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgCliNotifySvrDownloadDataReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgCliNotifySvrDownloadDataReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgCliNotifySvrDownloadDataReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->usr_trans_id(), target);
  }

  // int32 exchange_type = 3;
  if (this->exchange_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->exchange_type(), target);
  }

  // repeated string remote_path = 4;
  for (int i = 0, n = this->remote_path_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path(i).data(), static_cast<int>(this->remote_path(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataReqBody.remote_path");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->remote_path(i), target);
  }

  // string local_path = 5;
  if (this->local_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataReqBody.local_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->local_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgCliNotifySvrDownloadDataReqBody)
  return target;
}

size_t TransMsgCliNotifySvrDownloadDataReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgCliNotifySvrDownloadDataReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string remote_path = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->remote_path_size());
  for (int i = 0, n = this->remote_path_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->remote_path(i));
  }

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // string local_path = 5;
  if (this->local_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->local_path());
  }

  // int32 exchange_type = 3;
  if (this->exchange_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgCliNotifySvrDownloadDataReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgCliNotifySvrDownloadDataReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgCliNotifySvrDownloadDataReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgCliNotifySvrDownloadDataReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgCliNotifySvrDownloadDataReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgCliNotifySvrDownloadDataReqBody)
    MergeFrom(*source);
  }
}

void TransMsgCliNotifySvrDownloadDataReqBody::MergeFrom(const TransMsgCliNotifySvrDownloadDataReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgCliNotifySvrDownloadDataReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remote_path_.MergeFrom(from.remote_path_);
  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.local_path().size() > 0) {

    local_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  if (from.exchange_type() != 0) {
    set_exchange_type(from.exchange_type());
  }
}

void TransMsgCliNotifySvrDownloadDataReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgCliNotifySvrDownloadDataReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgCliNotifySvrDownloadDataReqBody::CopyFrom(const TransMsgCliNotifySvrDownloadDataReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgCliNotifySvrDownloadDataReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgCliNotifySvrDownloadDataReqBody::IsInitialized() const {
  return true;
}

void TransMsgCliNotifySvrDownloadDataReqBody::Swap(TransMsgCliNotifySvrDownloadDataReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgCliNotifySvrDownloadDataReqBody::InternalSwap(TransMsgCliNotifySvrDownloadDataReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remote_path_.InternalSwap(CastToBase(&other->remote_path_));
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_path_.Swap(&other->local_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exchange_type_, other->exchange_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgCliNotifySvrDownloadDataReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgCliNotifySvrDownloadDataRspBody::InitAsDefaultInstance() {
}
class TransMsgCliNotifySvrDownloadDataRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgCliNotifySvrDownloadDataRspBody::kStatusFieldNumber;
const int TransMsgCliNotifySvrDownloadDataRspBody::kUsrTransIdFieldNumber;
const int TransMsgCliNotifySvrDownloadDataRspBody::kTotalFileSizeFieldNumber;
const int TransMsgCliNotifySvrDownloadDataRspBody::kTotalFilesFieldNumber;
const int TransMsgCliNotifySvrDownloadDataRspBody::kTotalDirsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgCliNotifySvrDownloadDataRspBody::TransMsgCliNotifySvrDownloadDataRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgCliNotifySvrDownloadDataRspBody)
}
TransMsgCliNotifySvrDownloadDataRspBody::TransMsgCliNotifySvrDownloadDataRspBody(const TransMsgCliNotifySvrDownloadDataRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  ::memcpy(&total_file_size_, &from.total_file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&total_file_size_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:TransMsgCliNotifySvrDownloadDataRspBody)
}

void TransMsgCliNotifySvrDownloadDataRspBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgCliNotifySvrDownloadDataRspBody_TransMessageApi_2eproto.base);
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&total_file_size_)) + sizeof(status_));
}

TransMsgCliNotifySvrDownloadDataRspBody::~TransMsgCliNotifySvrDownloadDataRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgCliNotifySvrDownloadDataRspBody)
  SharedDtor();
}

void TransMsgCliNotifySvrDownloadDataRspBody::SharedDtor() {
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgCliNotifySvrDownloadDataRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgCliNotifySvrDownloadDataRspBody& TransMsgCliNotifySvrDownloadDataRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgCliNotifySvrDownloadDataRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgCliNotifySvrDownloadDataRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgCliNotifySvrDownloadDataRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&total_file_size_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgCliNotifySvrDownloadDataRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_file_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_files = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_dirs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_dirs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgCliNotifySvrDownloadDataRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgCliNotifySvrDownloadDataRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_file_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_files = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_files_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_dirs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_dirs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgCliNotifySvrDownloadDataRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgCliNotifySvrDownloadDataRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgCliNotifySvrDownloadDataRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgCliNotifySvrDownloadDataRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr_trans_id(), output);
  }

  // int64 total_file_size = 3;
  if (this->total_file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->total_file_size(), output);
  }

  // int64 total_files = 4;
  if (this->total_files() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->total_files(), output);
  }

  // int64 total_dirs = 5;
  if (this->total_dirs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->total_dirs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgCliNotifySvrDownloadDataRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgCliNotifySvrDownloadDataRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgCliNotifySvrDownloadDataRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->usr_trans_id(), target);
  }

  // int64 total_file_size = 3;
  if (this->total_file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->total_file_size(), target);
  }

  // int64 total_files = 4;
  if (this->total_files() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->total_files(), target);
  }

  // int64 total_dirs = 5;
  if (this->total_dirs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->total_dirs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgCliNotifySvrDownloadDataRspBody)
  return target;
}

size_t TransMsgCliNotifySvrDownloadDataRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgCliNotifySvrDownloadDataRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // int64 total_file_size = 3;
  if (this->total_file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->total_file_size());
  }

  // int64 total_files = 4;
  if (this->total_files() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->total_files());
  }

  // int64 total_dirs = 5;
  if (this->total_dirs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->total_dirs());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgCliNotifySvrDownloadDataRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgCliNotifySvrDownloadDataRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgCliNotifySvrDownloadDataRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgCliNotifySvrDownloadDataRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgCliNotifySvrDownloadDataRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgCliNotifySvrDownloadDataRspBody)
    MergeFrom(*source);
  }
}

void TransMsgCliNotifySvrDownloadDataRspBody::MergeFrom(const TransMsgCliNotifySvrDownloadDataRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgCliNotifySvrDownloadDataRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.total_file_size() != 0) {
    set_total_file_size(from.total_file_size());
  }
  if (from.total_files() != 0) {
    set_total_files(from.total_files());
  }
  if (from.total_dirs() != 0) {
    set_total_dirs(from.total_dirs());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgCliNotifySvrDownloadDataRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgCliNotifySvrDownloadDataRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgCliNotifySvrDownloadDataRspBody::CopyFrom(const TransMsgCliNotifySvrDownloadDataRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgCliNotifySvrDownloadDataRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgCliNotifySvrDownloadDataRspBody::IsInitialized() const {
  return true;
}

void TransMsgCliNotifySvrDownloadDataRspBody::Swap(TransMsgCliNotifySvrDownloadDataRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgCliNotifySvrDownloadDataRspBody::InternalSwap(TransMsgCliNotifySvrDownloadDataRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_file_size_, other->total_file_size_);
  swap(total_files_, other->total_files_);
  swap(total_dirs_, other->total_dirs_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgCliNotifySvrDownloadDataRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgDownloadFileReqBody::InitAsDefaultInstance() {
}
class TransMsgDownloadFileReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgDownloadFileReqBody::kNodeIdFieldNumber;
const int TransMsgDownloadFileReqBody::kUsrTransIdFieldNumber;
const int TransMsgDownloadFileReqBody::kExchangeTypeFieldNumber;
const int TransMsgDownloadFileReqBody::kRemotePathFieldNumber;
const int TransMsgDownloadFileReqBody::kLocalPathFieldNumber;
const int TransMsgDownloadFileReqBody::kFileSizeFieldNumber;
const int TransMsgDownloadFileReqBody::kTotalFileBlocksCountFieldNumber;
const int TransMsgDownloadFileReqBody::kFileBlockSizeFieldNumber;
const int TransMsgDownloadFileReqBody::kFileBlockStartNumFieldNumber;
const int TransMsgDownloadFileReqBody::kFileHashFieldNumber;
const int TransMsgDownloadFileReqBody::kSyncTransSessionIdFieldNumber;
const int TransMsgDownloadFileReqBody::kTransferRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgDownloadFileReqBody::TransMsgDownloadFileReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgDownloadFileReqBody)
}
TransMsgDownloadFileReqBody::TransMsgDownloadFileReqBody(const TransMsgDownloadFileReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.remote_path().size() > 0) {
    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.local_path().size() > 0) {
    local_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  sync_trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.sync_trans_session_id().size() > 0) {
    sync_trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sync_trans_session_id_);
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_type_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(exchange_type_));
  // @@protoc_insertion_point(copy_constructor:TransMsgDownloadFileReqBody)
}

void TransMsgDownloadFileReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgDownloadFileReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sync_trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_type_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(exchange_type_));
}

TransMsgDownloadFileReqBody::~TransMsgDownloadFileReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgDownloadFileReqBody)
  SharedDtor();
}

void TransMsgDownloadFileReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sync_trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgDownloadFileReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgDownloadFileReqBody& TransMsgDownloadFileReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgDownloadFileReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgDownloadFileReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgDownloadFileReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sync_trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_type_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(exchange_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgDownloadFileReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgDownloadFileReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "TransMsgDownloadFileReqBody.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exchange_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exchange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_path(), ptr, ctx, "TransMsgDownloadFileReqBody.remote_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_local_path(), ptr, ctx, "TransMsgDownloadFileReqBody.local_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_file_blocks_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_file_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_block_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          file_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_block_start_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          file_block_start_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 file_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          file_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sync_trans_session_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sync_trans_session_id(), ptr, ctx, "TransMsgDownloadFileReqBody.sync_trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transfer_rate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          transfer_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgDownloadFileReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgDownloadFileReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDownloadFileReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDownloadFileReqBody.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 exchange_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_path = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_path().data(), static_cast<int>(this->remote_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDownloadFileReqBody.remote_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_path = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_local_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->local_path().data(), static_cast<int>(this->local_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDownloadFileReqBody.local_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_file_blocks_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_file_blocks_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_block_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_block_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_block_start_num = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_block_start_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_hash = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sync_trans_session_id = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sync_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sync_trans_session_id().data(), static_cast<int>(this->sync_trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDownloadFileReqBody.sync_trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 transfer_rate = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transfer_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgDownloadFileReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgDownloadFileReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgDownloadFileReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgDownloadFileReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr_trans_id(), output);
  }

  // int32 exchange_type = 3;
  if (this->exchange_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->exchange_type(), output);
  }

  // string remote_path = 4;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.remote_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->remote_path(), output);
  }

  // string local_path = 5;
  if (this->local_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.local_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->local_path(), output);
  }

  // uint64 file_size = 6;
  if (this->file_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->file_size(), output);
  }

  // uint64 total_file_blocks_count = 7;
  if (this->total_file_blocks_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->total_file_blocks_count(), output);
  }

  // uint64 file_block_size = 8;
  if (this->file_block_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->file_block_size(), output);
  }

  // uint64 file_block_start_num = 9;
  if (this->file_block_start_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->file_block_start_num(), output);
  }

  // uint64 file_hash = 10;
  if (this->file_hash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->file_hash(), output);
  }

  // string sync_trans_session_id = 11;
  if (this->sync_trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sync_trans_session_id().data(), static_cast<int>(this->sync_trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.sync_trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sync_trans_session_id(), output);
  }

  // uint64 transfer_rate = 12;
  if (this->transfer_rate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(12, this->transfer_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgDownloadFileReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgDownloadFileReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgDownloadFileReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->usr_trans_id(), target);
  }

  // int32 exchange_type = 3;
  if (this->exchange_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->exchange_type(), target);
  }

  // string remote_path = 4;
  if (this->remote_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_path().data(), static_cast<int>(this->remote_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.remote_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->remote_path(), target);
  }

  // string local_path = 5;
  if (this->local_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_path().data(), static_cast<int>(this->local_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.local_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->local_path(), target);
  }

  // uint64 file_size = 6;
  if (this->file_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->file_size(), target);
  }

  // uint64 total_file_blocks_count = 7;
  if (this->total_file_blocks_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->total_file_blocks_count(), target);
  }

  // uint64 file_block_size = 8;
  if (this->file_block_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->file_block_size(), target);
  }

  // uint64 file_block_start_num = 9;
  if (this->file_block_start_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->file_block_start_num(), target);
  }

  // uint64 file_hash = 10;
  if (this->file_hash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->file_hash(), target);
  }

  // string sync_trans_session_id = 11;
  if (this->sync_trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sync_trans_session_id().data(), static_cast<int>(this->sync_trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileReqBody.sync_trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->sync_trans_session_id(), target);
  }

  // uint64 transfer_rate = 12;
  if (this->transfer_rate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->transfer_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgDownloadFileReqBody)
  return target;
}

size_t TransMsgDownloadFileReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgDownloadFileReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // string remote_path = 4;
  if (this->remote_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_path());
  }

  // string local_path = 5;
  if (this->local_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->local_path());
  }

  // string sync_trans_session_id = 11;
  if (this->sync_trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sync_trans_session_id());
  }

  // uint64 file_size = 6;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // uint64 total_file_blocks_count = 7;
  if (this->total_file_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->total_file_blocks_count());
  }

  // uint64 file_block_size = 8;
  if (this->file_block_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_block_size());
  }

  // uint64 file_block_start_num = 9;
  if (this->file_block_start_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_block_start_num());
  }

  // uint64 file_hash = 10;
  if (this->file_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->file_hash());
  }

  // uint64 transfer_rate = 12;
  if (this->transfer_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->transfer_rate());
  }

  // int32 exchange_type = 3;
  if (this->exchange_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->exchange_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgDownloadFileReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgDownloadFileReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgDownloadFileReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgDownloadFileReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgDownloadFileReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgDownloadFileReqBody)
    MergeFrom(*source);
  }
}

void TransMsgDownloadFileReqBody::MergeFrom(const TransMsgDownloadFileReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgDownloadFileReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.remote_path().size() > 0) {

    remote_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_path_);
  }
  if (from.local_path().size() > 0) {

    local_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_path_);
  }
  if (from.sync_trans_session_id().size() > 0) {

    sync_trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sync_trans_session_id_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.total_file_blocks_count() != 0) {
    set_total_file_blocks_count(from.total_file_blocks_count());
  }
  if (from.file_block_size() != 0) {
    set_file_block_size(from.file_block_size());
  }
  if (from.file_block_start_num() != 0) {
    set_file_block_start_num(from.file_block_start_num());
  }
  if (from.file_hash() != 0) {
    set_file_hash(from.file_hash());
  }
  if (from.transfer_rate() != 0) {
    set_transfer_rate(from.transfer_rate());
  }
  if (from.exchange_type() != 0) {
    set_exchange_type(from.exchange_type());
  }
}

void TransMsgDownloadFileReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgDownloadFileReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgDownloadFileReqBody::CopyFrom(const TransMsgDownloadFileReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgDownloadFileReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgDownloadFileReqBody::IsInitialized() const {
  return true;
}

void TransMsgDownloadFileReqBody::Swap(TransMsgDownloadFileReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgDownloadFileReqBody::InternalSwap(TransMsgDownloadFileReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_path_.Swap(&other->remote_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_path_.Swap(&other->local_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sync_trans_session_id_.Swap(&other->sync_trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
  swap(total_file_blocks_count_, other->total_file_blocks_count_);
  swap(file_block_size_, other->file_block_size_);
  swap(file_block_start_num_, other->file_block_start_num_);
  swap(file_hash_, other->file_hash_);
  swap(transfer_rate_, other->transfer_rate_);
  swap(exchange_type_, other->exchange_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgDownloadFileReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgDownloadFileRspBody::InitAsDefaultInstance() {
}
class TransMsgDownloadFileRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgDownloadFileRspBody::kStatusFieldNumber;
const int TransMsgDownloadFileRspBody::kNodeIdFieldNumber;
const int TransMsgDownloadFileRspBody::kTransSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgDownloadFileRspBody::TransMsgDownloadFileRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgDownloadFileRspBody)
}
TransMsgDownloadFileRspBody::TransMsgDownloadFileRspBody(const TransMsgDownloadFileRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgDownloadFileRspBody)
}

void TransMsgDownloadFileRspBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgDownloadFileRspBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

TransMsgDownloadFileRspBody::~TransMsgDownloadFileRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgDownloadFileRspBody)
  SharedDtor();
}

void TransMsgDownloadFileRspBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgDownloadFileRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgDownloadFileRspBody& TransMsgDownloadFileRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgDownloadFileRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgDownloadFileRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgDownloadFileRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgDownloadFileRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgDownloadFileRspBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "TransMsgDownloadFileRspBody.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgDownloadFileRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgDownloadFileRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDownloadFileRspBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgDownloadFileRspBody.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgDownloadFileRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgDownloadFileRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgDownloadFileRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgDownloadFileRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileRspBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_id(), output);
  }

  // string trans_session_id = 3;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileRspBody.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trans_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgDownloadFileRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgDownloadFileRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgDownloadFileRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileRspBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->node_id(), target);
  }

  // string trans_session_id = 3;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgDownloadFileRspBody.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->trans_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgDownloadFileRspBody)
  return target;
}

size_t TransMsgDownloadFileRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgDownloadFileRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string trans_session_id = 3;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgDownloadFileRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgDownloadFileRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgDownloadFileRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgDownloadFileRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgDownloadFileRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgDownloadFileRspBody)
    MergeFrom(*source);
  }
}

void TransMsgDownloadFileRspBody::MergeFrom(const TransMsgDownloadFileRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgDownloadFileRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgDownloadFileRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgDownloadFileRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgDownloadFileRspBody::CopyFrom(const TransMsgDownloadFileRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgDownloadFileRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgDownloadFileRspBody::IsInitialized() const {
  return true;
}

void TransMsgDownloadFileRspBody::Swap(TransMsgDownloadFileRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgDownloadFileRspBody::InternalSwap(TransMsgDownloadFileRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgDownloadFileRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgSvrNotifyCliEndDownloadReqBody::InitAsDefaultInstance() {
}
class TransMsgSvrNotifyCliEndDownloadReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgSvrNotifyCliEndDownloadReqBody::kNodeIdFieldNumber;
const int TransMsgSvrNotifyCliEndDownloadReqBody::kUsrTransIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgSvrNotifyCliEndDownloadReqBody::TransMsgSvrNotifyCliEndDownloadReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgSvrNotifyCliEndDownloadReqBody)
}
TransMsgSvrNotifyCliEndDownloadReqBody::TransMsgSvrNotifyCliEndDownloadReqBody(const TransMsgSvrNotifyCliEndDownloadReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TransMsgSvrNotifyCliEndDownloadReqBody)
}

void TransMsgSvrNotifyCliEndDownloadReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgSvrNotifyCliEndDownloadReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransMsgSvrNotifyCliEndDownloadReqBody::~TransMsgSvrNotifyCliEndDownloadReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgSvrNotifyCliEndDownloadReqBody)
  SharedDtor();
}

void TransMsgSvrNotifyCliEndDownloadReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgSvrNotifyCliEndDownloadReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgSvrNotifyCliEndDownloadReqBody& TransMsgSvrNotifyCliEndDownloadReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgSvrNotifyCliEndDownloadReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgSvrNotifyCliEndDownloadReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgSvrNotifyCliEndDownloadReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgSvrNotifyCliEndDownloadReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgSvrNotifyCliEndDownloadReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgSvrNotifyCliEndDownloadReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgSvrNotifyCliEndDownloadReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgSvrNotifyCliEndDownloadReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgSvrNotifyCliEndDownloadReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgSvrNotifyCliEndDownloadReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgSvrNotifyCliEndDownloadReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgSvrNotifyCliEndDownloadReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSvrNotifyCliEndDownloadReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr_trans_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgSvrNotifyCliEndDownloadReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgSvrNotifyCliEndDownloadReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgSvrNotifyCliEndDownloadReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSvrNotifyCliEndDownloadReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->usr_trans_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgSvrNotifyCliEndDownloadReqBody)
  return target;
}

size_t TransMsgSvrNotifyCliEndDownloadReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgSvrNotifyCliEndDownloadReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgSvrNotifyCliEndDownloadReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgSvrNotifyCliEndDownloadReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgSvrNotifyCliEndDownloadReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgSvrNotifyCliEndDownloadReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgSvrNotifyCliEndDownloadReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgSvrNotifyCliEndDownloadReqBody)
    MergeFrom(*source);
  }
}

void TransMsgSvrNotifyCliEndDownloadReqBody::MergeFrom(const TransMsgSvrNotifyCliEndDownloadReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgSvrNotifyCliEndDownloadReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
}

void TransMsgSvrNotifyCliEndDownloadReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgSvrNotifyCliEndDownloadReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgSvrNotifyCliEndDownloadReqBody::CopyFrom(const TransMsgSvrNotifyCliEndDownloadReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgSvrNotifyCliEndDownloadReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgSvrNotifyCliEndDownloadReqBody::IsInitialized() const {
  return true;
}

void TransMsgSvrNotifyCliEndDownloadReqBody::Swap(TransMsgSvrNotifyCliEndDownloadReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgSvrNotifyCliEndDownloadReqBody::InternalSwap(TransMsgSvrNotifyCliEndDownloadReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgSvrNotifyCliEndDownloadReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgSvrNotifyCliEndDownloadRspBody::InitAsDefaultInstance() {
}
class TransMsgSvrNotifyCliEndDownloadRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgSvrNotifyCliEndDownloadRspBody::kStatusFieldNumber;
const int TransMsgSvrNotifyCliEndDownloadRspBody::kNodeIdFieldNumber;
const int TransMsgSvrNotifyCliEndDownloadRspBody::kUsrTransIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgSvrNotifyCliEndDownloadRspBody::TransMsgSvrNotifyCliEndDownloadRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgSvrNotifyCliEndDownloadRspBody)
}
TransMsgSvrNotifyCliEndDownloadRspBody::TransMsgSvrNotifyCliEndDownloadRspBody(const TransMsgSvrNotifyCliEndDownloadRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgSvrNotifyCliEndDownloadRspBody)
}

void TransMsgSvrNotifyCliEndDownloadRspBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgSvrNotifyCliEndDownloadRspBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

TransMsgSvrNotifyCliEndDownloadRspBody::~TransMsgSvrNotifyCliEndDownloadRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgSvrNotifyCliEndDownloadRspBody)
  SharedDtor();
}

void TransMsgSvrNotifyCliEndDownloadRspBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgSvrNotifyCliEndDownloadRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgSvrNotifyCliEndDownloadRspBody& TransMsgSvrNotifyCliEndDownloadRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgSvrNotifyCliEndDownloadRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgSvrNotifyCliEndDownloadRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgSvrNotifyCliEndDownloadRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgSvrNotifyCliEndDownloadRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgSvrNotifyCliEndDownloadRspBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgSvrNotifyCliEndDownloadRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgSvrNotifyCliEndDownloadRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgSvrNotifyCliEndDownloadRspBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgSvrNotifyCliEndDownloadRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgSvrNotifyCliEndDownloadRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgSvrNotifyCliEndDownloadRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgSvrNotifyCliEndDownloadRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSvrNotifyCliEndDownloadRspBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_id(), output);
  }

  // string usr_trans_id = 3;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->usr_trans_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgSvrNotifyCliEndDownloadRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgSvrNotifyCliEndDownloadRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgSvrNotifyCliEndDownloadRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSvrNotifyCliEndDownloadRspBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->node_id(), target);
  }

  // string usr_trans_id = 3;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->usr_trans_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgSvrNotifyCliEndDownloadRspBody)
  return target;
}

size_t TransMsgSvrNotifyCliEndDownloadRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgSvrNotifyCliEndDownloadRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string usr_trans_id = 3;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgSvrNotifyCliEndDownloadRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgSvrNotifyCliEndDownloadRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgSvrNotifyCliEndDownloadRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgSvrNotifyCliEndDownloadRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgSvrNotifyCliEndDownloadRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgSvrNotifyCliEndDownloadRspBody)
    MergeFrom(*source);
  }
}

void TransMsgSvrNotifyCliEndDownloadRspBody::MergeFrom(const TransMsgSvrNotifyCliEndDownloadRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgSvrNotifyCliEndDownloadRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgSvrNotifyCliEndDownloadRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgSvrNotifyCliEndDownloadRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgSvrNotifyCliEndDownloadRspBody::CopyFrom(const TransMsgSvrNotifyCliEndDownloadRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgSvrNotifyCliEndDownloadRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgSvrNotifyCliEndDownloadRspBody::IsInitialized() const {
  return true;
}

void TransMsgSvrNotifyCliEndDownloadRspBody::Swap(TransMsgSvrNotifyCliEndDownloadRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgSvrNotifyCliEndDownloadRspBody::InternalSwap(TransMsgSvrNotifyCliEndDownloadRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgSvrNotifyCliEndDownloadRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgStopDownloadReqBody::InitAsDefaultInstance() {
}
class TransMsgStopDownloadReqBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgStopDownloadReqBody::kNodeIdFieldNumber;
const int TransMsgStopDownloadReqBody::kUsrTransIdFieldNumber;
const int TransMsgStopDownloadReqBody::kTransSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgStopDownloadReqBody::TransMsgStopDownloadReqBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgStopDownloadReqBody)
}
TransMsgStopDownloadReqBody::TransMsgStopDownloadReqBody(const TransMsgStopDownloadReqBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.usr_trans_id().size() > 0) {
    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.trans_session_id().size() > 0) {
    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TransMsgStopDownloadReqBody)
}

void TransMsgStopDownloadReqBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMsgStopDownloadReqBody_TransMessageApi_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransMsgStopDownloadReqBody::~TransMsgStopDownloadReqBody() {
  // @@protoc_insertion_point(destructor:TransMsgStopDownloadReqBody)
  SharedDtor();
}

void TransMsgStopDownloadReqBody::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransMsgStopDownloadReqBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgStopDownloadReqBody& TransMsgStopDownloadReqBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgStopDownloadReqBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgStopDownloadReqBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgStopDownloadReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgStopDownloadReqBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_node_id(), ptr, ctx, "TransMsgStopDownloadReqBody.node_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usr_trans_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_usr_trans_id(), ptr, ctx, "TransMsgStopDownloadReqBody.usr_trans_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trans_session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_trans_session_id(), ptr, ctx, "TransMsgStopDownloadReqBody.trans_session_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgStopDownloadReqBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgStopDownloadReqBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), static_cast<int>(this->node_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgStopDownloadReqBody.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr_trans_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_trans_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgStopDownloadReqBody.usr_trans_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trans_session_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_session_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "TransMsgStopDownloadReqBody.trans_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgStopDownloadReqBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgStopDownloadReqBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgStopDownloadReqBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgStopDownloadReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopDownloadReqBody.node_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopDownloadReqBody.usr_trans_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->usr_trans_id(), output);
  }

  // string trans_session_id = 3;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopDownloadReqBody.trans_session_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->trans_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgStopDownloadReqBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgStopDownloadReqBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgStopDownloadReqBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), static_cast<int>(this->node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopDownloadReqBody.node_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->usr_trans_id().data(), static_cast<int>(this->usr_trans_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopDownloadReqBody.usr_trans_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->usr_trans_id(), target);
  }

  // string trans_session_id = 3;
  if (this->trans_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->trans_session_id().data(), static_cast<int>(this->trans_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TransMsgStopDownloadReqBody.trans_session_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->trans_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgStopDownloadReqBody)
  return target;
}

size_t TransMsgStopDownloadReqBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgStopDownloadReqBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // string usr_trans_id = 2;
  if (this->usr_trans_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->usr_trans_id());
  }

  // string trans_session_id = 3;
  if (this->trans_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->trans_session_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgStopDownloadReqBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgStopDownloadReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgStopDownloadReqBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgStopDownloadReqBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgStopDownloadReqBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgStopDownloadReqBody)
    MergeFrom(*source);
  }
}

void TransMsgStopDownloadReqBody::MergeFrom(const TransMsgStopDownloadReqBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgStopDownloadReqBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.usr_trans_id().size() > 0) {

    usr_trans_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.usr_trans_id_);
  }
  if (from.trans_session_id().size() > 0) {

    trans_session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trans_session_id_);
  }
}

void TransMsgStopDownloadReqBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgStopDownloadReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgStopDownloadReqBody::CopyFrom(const TransMsgStopDownloadReqBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgStopDownloadReqBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgStopDownloadReqBody::IsInitialized() const {
  return true;
}

void TransMsgStopDownloadReqBody::Swap(TransMsgStopDownloadReqBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgStopDownloadReqBody::InternalSwap(TransMsgStopDownloadReqBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  usr_trans_id_.Swap(&other->usr_trans_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trans_session_id_.Swap(&other->trans_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgStopDownloadReqBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMsgStopDownloadRspBody::InitAsDefaultInstance() {
}
class TransMsgStopDownloadRspBody::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMsgStopDownloadRspBody::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMsgStopDownloadRspBody::TransMsgStopDownloadRspBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMsgStopDownloadRspBody)
}
TransMsgStopDownloadRspBody::TransMsgStopDownloadRspBody(const TransMsgStopDownloadRspBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:TransMsgStopDownloadRspBody)
}

void TransMsgStopDownloadRspBody::SharedCtor() {
  status_ = 0;
}

TransMsgStopDownloadRspBody::~TransMsgStopDownloadRspBody() {
  // @@protoc_insertion_point(destructor:TransMsgStopDownloadRspBody)
  SharedDtor();
}

void TransMsgStopDownloadRspBody::SharedDtor() {
}

void TransMsgStopDownloadRspBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMsgStopDownloadRspBody& TransMsgStopDownloadRspBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMsgStopDownloadRspBody_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMsgStopDownloadRspBody::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMsgStopDownloadRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMsgStopDownloadRspBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMsgStopDownloadRspBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMsgStopDownloadRspBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMsgStopDownloadRspBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMsgStopDownloadRspBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMsgStopDownloadRspBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMsgStopDownloadRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMsgStopDownloadRspBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMsgStopDownloadRspBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMsgStopDownloadRspBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMsgStopDownloadRspBody)
  return target;
}

size_t TransMsgStopDownloadRspBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMsgStopDownloadRspBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMsgStopDownloadRspBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMsgStopDownloadRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMsgStopDownloadRspBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMsgStopDownloadRspBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMsgStopDownloadRspBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMsgStopDownloadRspBody)
    MergeFrom(*source);
  }
}

void TransMsgStopDownloadRspBody::MergeFrom(const TransMsgStopDownloadRspBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMsgStopDownloadRspBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TransMsgStopDownloadRspBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMsgStopDownloadRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMsgStopDownloadRspBody::CopyFrom(const TransMsgStopDownloadRspBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMsgStopDownloadRspBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMsgStopDownloadRspBody::IsInitialized() const {
  return true;
}

void TransMsgStopDownloadRspBody::Swap(TransMsgStopDownloadRspBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMsgStopDownloadRspBody::InternalSwap(TransMsgStopDownloadRspBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMsgStopDownloadRspBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransMessage::InitAsDefaultInstance() {
  ::_TransMessage_default_instance_._instance.get_mutable()->head_ = const_cast< ::TransMsgHead*>(
      ::TransMsgHead::internal_default_instance());
  ::_TransMessage_default_instance_.login_req_body_ = const_cast< ::TransMsgLoginReqBody*>(
      ::TransMsgLoginReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.login_rsp_body_ = const_cast< ::TransMsgLoginRspBody*>(
      ::TransMsgLoginRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.logout_req_body_ = const_cast< ::TransMsgLogoutReqBody*>(
      ::TransMsgLogoutReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.logout_rsp_body_ = const_cast< ::TransMsgLogoutRspBody*>(
      ::TransMsgLogoutRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.upload_file_req_body_ = const_cast< ::TransMsgUploadFileReqBody*>(
      ::TransMsgUploadFileReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.upload_file_rsp_body_ = const_cast< ::TransMsgUploadFileRspBody*>(
      ::TransMsgUploadFileRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.send_data_req_body_ = const_cast< ::TransMsgSendDataReqBody*>(
      ::TransMsgSendDataReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.resend_data_notifi_req_body_ = const_cast< ::TransMsgResendDataNotifiReqBody*>(
      ::TransMsgResendDataNotifiReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.resend_data_notifi_rsp_body_ = const_cast< ::TransMsgResendDataNotifiRspBody*>(
      ::TransMsgResendDataNotifiRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.finish_notifi_req_body_ = const_cast< ::TransMsgFinishNotifiReqBody*>(
      ::TransMsgFinishNotifiReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.finish_notifi_rsp_body_ = const_cast< ::TransMsgFinishNotifiRspBody*>(
      ::TransMsgFinishNotifiRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.heartbeat_req_body_ = const_cast< ::TransMsgHeartbeatReqBody*>(
      ::TransMsgHeartbeatReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.heartbeat_rsp_body_ = const_cast< ::TransMsgHeartbeatRspBody*>(
      ::TransMsgHeartbeatRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.resend_data_req_body_ = const_cast< ::TransMsgSendDataReqBody*>(
      ::TransMsgSendDataReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.dir_process_req_body_ = const_cast< ::TransMsgDirProcessReqBody*>(
      ::TransMsgDirProcessReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.dir_process_rsp_body_ = const_cast< ::TransMsgDirProcessRspBody*>(
      ::TransMsgDirProcessRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.cli_notify_svr_download_data_req_body_ = const_cast< ::TransMsgCliNotifySvrDownloadDataReqBody*>(
      ::TransMsgCliNotifySvrDownloadDataReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.cli_notify_svr_download_data_rsp_body_ = const_cast< ::TransMsgCliNotifySvrDownloadDataRspBody*>(
      ::TransMsgCliNotifySvrDownloadDataRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.download_file_req_body_ = const_cast< ::TransMsgDownloadFileReqBody*>(
      ::TransMsgDownloadFileReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.download_file_rsp_body_ = const_cast< ::TransMsgDownloadFileRspBody*>(
      ::TransMsgDownloadFileRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.svr_notify_cli_end_download_req_body_ = const_cast< ::TransMsgSvrNotifyCliEndDownloadReqBody*>(
      ::TransMsgSvrNotifyCliEndDownloadReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.svr_notify_cli_end_download_rsp_body_ = const_cast< ::TransMsgSvrNotifyCliEndDownloadRspBody*>(
      ::TransMsgSvrNotifyCliEndDownloadRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.stop_upload_req_body_ = const_cast< ::TransMsgStopUploadReqBody*>(
      ::TransMsgStopUploadReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.stop_upload_rsp_body_ = const_cast< ::TransMsgStopUploadRspBody*>(
      ::TransMsgStopUploadRspBody::internal_default_instance());
  ::_TransMessage_default_instance_.stop_download_req_body_ = const_cast< ::TransMsgStopDownloadReqBody*>(
      ::TransMsgStopDownloadReqBody::internal_default_instance());
  ::_TransMessage_default_instance_.stop_download_rsp_body_ = const_cast< ::TransMsgStopUploadRspBody*>(
      ::TransMsgStopUploadRspBody::internal_default_instance());
}
class TransMessage::HasBitSetters {
 public:
  static const ::TransMsgHead& head(const TransMessage* msg);
  static const ::TransMsgLoginReqBody& login_req_body(const TransMessage* msg);
  static const ::TransMsgLoginRspBody& login_rsp_body(const TransMessage* msg);
  static const ::TransMsgLogoutReqBody& logout_req_body(const TransMessage* msg);
  static const ::TransMsgLogoutRspBody& logout_rsp_body(const TransMessage* msg);
  static const ::TransMsgUploadFileReqBody& upload_file_req_body(const TransMessage* msg);
  static const ::TransMsgUploadFileRspBody& upload_file_rsp_body(const TransMessage* msg);
  static const ::TransMsgSendDataReqBody& send_data_req_body(const TransMessage* msg);
  static const ::TransMsgResendDataNotifiReqBody& resend_data_notifi_req_body(const TransMessage* msg);
  static const ::TransMsgResendDataNotifiRspBody& resend_data_notifi_rsp_body(const TransMessage* msg);
  static const ::TransMsgFinishNotifiReqBody& finish_notifi_req_body(const TransMessage* msg);
  static const ::TransMsgFinishNotifiRspBody& finish_notifi_rsp_body(const TransMessage* msg);
  static const ::TransMsgHeartbeatReqBody& heartbeat_req_body(const TransMessage* msg);
  static const ::TransMsgHeartbeatRspBody& heartbeat_rsp_body(const TransMessage* msg);
  static const ::TransMsgSendDataReqBody& resend_data_req_body(const TransMessage* msg);
  static const ::TransMsgDirProcessReqBody& dir_process_req_body(const TransMessage* msg);
  static const ::TransMsgDirProcessRspBody& dir_process_rsp_body(const TransMessage* msg);
  static const ::TransMsgCliNotifySvrDownloadDataReqBody& cli_notify_svr_download_data_req_body(const TransMessage* msg);
  static const ::TransMsgCliNotifySvrDownloadDataRspBody& cli_notify_svr_download_data_rsp_body(const TransMessage* msg);
  static const ::TransMsgDownloadFileReqBody& download_file_req_body(const TransMessage* msg);
  static const ::TransMsgDownloadFileRspBody& download_file_rsp_body(const TransMessage* msg);
  static const ::TransMsgSvrNotifyCliEndDownloadReqBody& svr_notify_cli_end_download_req_body(const TransMessage* msg);
  static const ::TransMsgSvrNotifyCliEndDownloadRspBody& svr_notify_cli_end_download_rsp_body(const TransMessage* msg);
  static const ::TransMsgStopUploadReqBody& stop_upload_req_body(const TransMessage* msg);
  static const ::TransMsgStopUploadRspBody& stop_upload_rsp_body(const TransMessage* msg);
  static const ::TransMsgStopDownloadReqBody& stop_download_req_body(const TransMessage* msg);
  static const ::TransMsgStopUploadRspBody& stop_download_rsp_body(const TransMessage* msg);
};

const ::TransMsgHead&
TransMessage::HasBitSetters::head(const TransMessage* msg) {
  return *msg->head_;
}
const ::TransMsgLoginReqBody&
TransMessage::HasBitSetters::login_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.login_req_body_;
}
const ::TransMsgLoginRspBody&
TransMessage::HasBitSetters::login_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.login_rsp_body_;
}
const ::TransMsgLogoutReqBody&
TransMessage::HasBitSetters::logout_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.logout_req_body_;
}
const ::TransMsgLogoutRspBody&
TransMessage::HasBitSetters::logout_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.logout_rsp_body_;
}
const ::TransMsgUploadFileReqBody&
TransMessage::HasBitSetters::upload_file_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.upload_file_req_body_;
}
const ::TransMsgUploadFileRspBody&
TransMessage::HasBitSetters::upload_file_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.upload_file_rsp_body_;
}
const ::TransMsgSendDataReqBody&
TransMessage::HasBitSetters::send_data_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.send_data_req_body_;
}
const ::TransMsgResendDataNotifiReqBody&
TransMessage::HasBitSetters::resend_data_notifi_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.resend_data_notifi_req_body_;
}
const ::TransMsgResendDataNotifiRspBody&
TransMessage::HasBitSetters::resend_data_notifi_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.resend_data_notifi_rsp_body_;
}
const ::TransMsgFinishNotifiReqBody&
TransMessage::HasBitSetters::finish_notifi_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.finish_notifi_req_body_;
}
const ::TransMsgFinishNotifiRspBody&
TransMessage::HasBitSetters::finish_notifi_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.finish_notifi_rsp_body_;
}
const ::TransMsgHeartbeatReqBody&
TransMessage::HasBitSetters::heartbeat_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.heartbeat_req_body_;
}
const ::TransMsgHeartbeatRspBody&
TransMessage::HasBitSetters::heartbeat_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.heartbeat_rsp_body_;
}
const ::TransMsgSendDataReqBody&
TransMessage::HasBitSetters::resend_data_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.resend_data_req_body_;
}
const ::TransMsgDirProcessReqBody&
TransMessage::HasBitSetters::dir_process_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.dir_process_req_body_;
}
const ::TransMsgDirProcessRspBody&
TransMessage::HasBitSetters::dir_process_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.dir_process_rsp_body_;
}
const ::TransMsgCliNotifySvrDownloadDataReqBody&
TransMessage::HasBitSetters::cli_notify_svr_download_data_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.cli_notify_svr_download_data_req_body_;
}
const ::TransMsgCliNotifySvrDownloadDataRspBody&
TransMessage::HasBitSetters::cli_notify_svr_download_data_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.cli_notify_svr_download_data_rsp_body_;
}
const ::TransMsgDownloadFileReqBody&
TransMessage::HasBitSetters::download_file_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.download_file_req_body_;
}
const ::TransMsgDownloadFileRspBody&
TransMessage::HasBitSetters::download_file_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.download_file_rsp_body_;
}
const ::TransMsgSvrNotifyCliEndDownloadReqBody&
TransMessage::HasBitSetters::svr_notify_cli_end_download_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.svr_notify_cli_end_download_req_body_;
}
const ::TransMsgSvrNotifyCliEndDownloadRspBody&
TransMessage::HasBitSetters::svr_notify_cli_end_download_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.svr_notify_cli_end_download_rsp_body_;
}
const ::TransMsgStopUploadReqBody&
TransMessage::HasBitSetters::stop_upload_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.stop_upload_req_body_;
}
const ::TransMsgStopUploadRspBody&
TransMessage::HasBitSetters::stop_upload_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.stop_upload_rsp_body_;
}
const ::TransMsgStopDownloadReqBody&
TransMessage::HasBitSetters::stop_download_req_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.stop_download_req_body_;
}
const ::TransMsgStopUploadRspBody&
TransMessage::HasBitSetters::stop_download_rsp_body(const TransMessage* msg) {
  return *msg->TransMsgBody_.stop_download_rsp_body_;
}
void TransMessage::set_allocated_login_req_body(::TransMsgLoginReqBody* login_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (login_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      login_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_req_body, submessage_arena);
    }
    set_has_login_req_body();
    TransMsgBody_.login_req_body_ = login_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.login_req_body)
}
void TransMessage::set_allocated_login_rsp_body(::TransMsgLoginRspBody* login_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (login_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      login_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_rsp_body, submessage_arena);
    }
    set_has_login_rsp_body();
    TransMsgBody_.login_rsp_body_ = login_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.login_rsp_body)
}
void TransMessage::set_allocated_logout_req_body(::TransMsgLogoutReqBody* logout_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (logout_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logout_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logout_req_body, submessage_arena);
    }
    set_has_logout_req_body();
    TransMsgBody_.logout_req_body_ = logout_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.logout_req_body)
}
void TransMessage::set_allocated_logout_rsp_body(::TransMsgLogoutRspBody* logout_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (logout_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logout_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logout_rsp_body, submessage_arena);
    }
    set_has_logout_rsp_body();
    TransMsgBody_.logout_rsp_body_ = logout_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.logout_rsp_body)
}
void TransMessage::set_allocated_upload_file_req_body(::TransMsgUploadFileReqBody* upload_file_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (upload_file_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upload_file_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_file_req_body, submessage_arena);
    }
    set_has_upload_file_req_body();
    TransMsgBody_.upload_file_req_body_ = upload_file_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.upload_file_req_body)
}
void TransMessage::set_allocated_upload_file_rsp_body(::TransMsgUploadFileRspBody* upload_file_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (upload_file_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upload_file_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_file_rsp_body, submessage_arena);
    }
    set_has_upload_file_rsp_body();
    TransMsgBody_.upload_file_rsp_body_ = upload_file_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.upload_file_rsp_body)
}
void TransMessage::set_allocated_send_data_req_body(::TransMsgSendDataReqBody* send_data_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (send_data_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      send_data_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_data_req_body, submessage_arena);
    }
    set_has_send_data_req_body();
    TransMsgBody_.send_data_req_body_ = send_data_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.send_data_req_body)
}
void TransMessage::set_allocated_resend_data_notifi_req_body(::TransMsgResendDataNotifiReqBody* resend_data_notifi_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (resend_data_notifi_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resend_data_notifi_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resend_data_notifi_req_body, submessage_arena);
    }
    set_has_resend_data_notifi_req_body();
    TransMsgBody_.resend_data_notifi_req_body_ = resend_data_notifi_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.resend_data_notifi_req_body)
}
void TransMessage::set_allocated_resend_data_notifi_rsp_body(::TransMsgResendDataNotifiRspBody* resend_data_notifi_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (resend_data_notifi_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resend_data_notifi_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resend_data_notifi_rsp_body, submessage_arena);
    }
    set_has_resend_data_notifi_rsp_body();
    TransMsgBody_.resend_data_notifi_rsp_body_ = resend_data_notifi_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.resend_data_notifi_rsp_body)
}
void TransMessage::set_allocated_finish_notifi_req_body(::TransMsgFinishNotifiReqBody* finish_notifi_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (finish_notifi_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      finish_notifi_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_notifi_req_body, submessage_arena);
    }
    set_has_finish_notifi_req_body();
    TransMsgBody_.finish_notifi_req_body_ = finish_notifi_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.finish_notifi_req_body)
}
void TransMessage::set_allocated_finish_notifi_rsp_body(::TransMsgFinishNotifiRspBody* finish_notifi_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (finish_notifi_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      finish_notifi_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finish_notifi_rsp_body, submessage_arena);
    }
    set_has_finish_notifi_rsp_body();
    TransMsgBody_.finish_notifi_rsp_body_ = finish_notifi_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.finish_notifi_rsp_body)
}
void TransMessage::set_allocated_heartbeat_req_body(::TransMsgHeartbeatReqBody* heartbeat_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (heartbeat_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heartbeat_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat_req_body, submessage_arena);
    }
    set_has_heartbeat_req_body();
    TransMsgBody_.heartbeat_req_body_ = heartbeat_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.heartbeat_req_body)
}
void TransMessage::set_allocated_heartbeat_rsp_body(::TransMsgHeartbeatRspBody* heartbeat_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (heartbeat_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heartbeat_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat_rsp_body, submessage_arena);
    }
    set_has_heartbeat_rsp_body();
    TransMsgBody_.heartbeat_rsp_body_ = heartbeat_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.heartbeat_rsp_body)
}
void TransMessage::set_allocated_resend_data_req_body(::TransMsgSendDataReqBody* resend_data_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (resend_data_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resend_data_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resend_data_req_body, submessage_arena);
    }
    set_has_resend_data_req_body();
    TransMsgBody_.resend_data_req_body_ = resend_data_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.resend_data_req_body)
}
void TransMessage::set_allocated_dir_process_req_body(::TransMsgDirProcessReqBody* dir_process_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (dir_process_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dir_process_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dir_process_req_body, submessage_arena);
    }
    set_has_dir_process_req_body();
    TransMsgBody_.dir_process_req_body_ = dir_process_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.dir_process_req_body)
}
void TransMessage::set_allocated_dir_process_rsp_body(::TransMsgDirProcessRspBody* dir_process_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (dir_process_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dir_process_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dir_process_rsp_body, submessage_arena);
    }
    set_has_dir_process_rsp_body();
    TransMsgBody_.dir_process_rsp_body_ = dir_process_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.dir_process_rsp_body)
}
void TransMessage::set_allocated_cli_notify_svr_download_data_req_body(::TransMsgCliNotifySvrDownloadDataReqBody* cli_notify_svr_download_data_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (cli_notify_svr_download_data_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cli_notify_svr_download_data_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cli_notify_svr_download_data_req_body, submessage_arena);
    }
    set_has_cli_notify_svr_download_data_req_body();
    TransMsgBody_.cli_notify_svr_download_data_req_body_ = cli_notify_svr_download_data_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.cli_notify_svr_download_data_req_body)
}
void TransMessage::set_allocated_cli_notify_svr_download_data_rsp_body(::TransMsgCliNotifySvrDownloadDataRspBody* cli_notify_svr_download_data_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (cli_notify_svr_download_data_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cli_notify_svr_download_data_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cli_notify_svr_download_data_rsp_body, submessage_arena);
    }
    set_has_cli_notify_svr_download_data_rsp_body();
    TransMsgBody_.cli_notify_svr_download_data_rsp_body_ = cli_notify_svr_download_data_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.cli_notify_svr_download_data_rsp_body)
}
void TransMessage::set_allocated_download_file_req_body(::TransMsgDownloadFileReqBody* download_file_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (download_file_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      download_file_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download_file_req_body, submessage_arena);
    }
    set_has_download_file_req_body();
    TransMsgBody_.download_file_req_body_ = download_file_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.download_file_req_body)
}
void TransMessage::set_allocated_download_file_rsp_body(::TransMsgDownloadFileRspBody* download_file_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (download_file_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      download_file_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download_file_rsp_body, submessage_arena);
    }
    set_has_download_file_rsp_body();
    TransMsgBody_.download_file_rsp_body_ = download_file_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.download_file_rsp_body)
}
void TransMessage::set_allocated_svr_notify_cli_end_download_req_body(::TransMsgSvrNotifyCliEndDownloadReqBody* svr_notify_cli_end_download_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (svr_notify_cli_end_download_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      svr_notify_cli_end_download_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, svr_notify_cli_end_download_req_body, submessage_arena);
    }
    set_has_svr_notify_cli_end_download_req_body();
    TransMsgBody_.svr_notify_cli_end_download_req_body_ = svr_notify_cli_end_download_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.svr_notify_cli_end_download_req_body)
}
void TransMessage::set_allocated_svr_notify_cli_end_download_rsp_body(::TransMsgSvrNotifyCliEndDownloadRspBody* svr_notify_cli_end_download_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (svr_notify_cli_end_download_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      svr_notify_cli_end_download_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, svr_notify_cli_end_download_rsp_body, submessage_arena);
    }
    set_has_svr_notify_cli_end_download_rsp_body();
    TransMsgBody_.svr_notify_cli_end_download_rsp_body_ = svr_notify_cli_end_download_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.svr_notify_cli_end_download_rsp_body)
}
void TransMessage::set_allocated_stop_upload_req_body(::TransMsgStopUploadReqBody* stop_upload_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (stop_upload_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_upload_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_upload_req_body, submessage_arena);
    }
    set_has_stop_upload_req_body();
    TransMsgBody_.stop_upload_req_body_ = stop_upload_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.stop_upload_req_body)
}
void TransMessage::set_allocated_stop_upload_rsp_body(::TransMsgStopUploadRspBody* stop_upload_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (stop_upload_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_upload_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_upload_rsp_body, submessage_arena);
    }
    set_has_stop_upload_rsp_body();
    TransMsgBody_.stop_upload_rsp_body_ = stop_upload_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.stop_upload_rsp_body)
}
void TransMessage::set_allocated_stop_download_req_body(::TransMsgStopDownloadReqBody* stop_download_req_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (stop_download_req_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_download_req_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_download_req_body, submessage_arena);
    }
    set_has_stop_download_req_body();
    TransMsgBody_.stop_download_req_body_ = stop_download_req_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.stop_download_req_body)
}
void TransMessage::set_allocated_stop_download_rsp_body(::TransMsgStopUploadRspBody* stop_download_rsp_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_TransMsgBody();
  if (stop_download_rsp_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_download_rsp_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_download_rsp_body, submessage_arena);
    }
    set_has_stop_download_rsp_body();
    TransMsgBody_.stop_download_rsp_body_ = stop_download_rsp_body;
  }
  // @@protoc_insertion_point(field_set_allocated:TransMessage.stop_download_rsp_body)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransMessage::kHeadFieldNumber;
const int TransMessage::kLoginReqBodyFieldNumber;
const int TransMessage::kLoginRspBodyFieldNumber;
const int TransMessage::kLogoutReqBodyFieldNumber;
const int TransMessage::kLogoutRspBodyFieldNumber;
const int TransMessage::kUploadFileReqBodyFieldNumber;
const int TransMessage::kUploadFileRspBodyFieldNumber;
const int TransMessage::kSendDataReqBodyFieldNumber;
const int TransMessage::kResendDataNotifiReqBodyFieldNumber;
const int TransMessage::kResendDataNotifiRspBodyFieldNumber;
const int TransMessage::kFinishNotifiReqBodyFieldNumber;
const int TransMessage::kFinishNotifiRspBodyFieldNumber;
const int TransMessage::kHeartbeatReqBodyFieldNumber;
const int TransMessage::kHeartbeatRspBodyFieldNumber;
const int TransMessage::kResendDataReqBodyFieldNumber;
const int TransMessage::kDirProcessReqBodyFieldNumber;
const int TransMessage::kDirProcessRspBodyFieldNumber;
const int TransMessage::kCliNotifySvrDownloadDataReqBodyFieldNumber;
const int TransMessage::kCliNotifySvrDownloadDataRspBodyFieldNumber;
const int TransMessage::kDownloadFileReqBodyFieldNumber;
const int TransMessage::kDownloadFileRspBodyFieldNumber;
const int TransMessage::kSvrNotifyCliEndDownloadReqBodyFieldNumber;
const int TransMessage::kSvrNotifyCliEndDownloadRspBodyFieldNumber;
const int TransMessage::kStopUploadReqBodyFieldNumber;
const int TransMessage::kStopUploadRspBodyFieldNumber;
const int TransMessage::kStopDownloadReqBodyFieldNumber;
const int TransMessage::kStopDownloadRspBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransMessage::TransMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransMessage)
}
TransMessage::TransMessage(const TransMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head()) {
    head_ = new ::TransMsgHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  clear_has_TransMsgBody();
  switch (from.TransMsgBody_case()) {
    case kLoginReqBody: {
      mutable_login_req_body()->::TransMsgLoginReqBody::MergeFrom(from.login_req_body());
      break;
    }
    case kLoginRspBody: {
      mutable_login_rsp_body()->::TransMsgLoginRspBody::MergeFrom(from.login_rsp_body());
      break;
    }
    case kLogoutReqBody: {
      mutable_logout_req_body()->::TransMsgLogoutReqBody::MergeFrom(from.logout_req_body());
      break;
    }
    case kLogoutRspBody: {
      mutable_logout_rsp_body()->::TransMsgLogoutRspBody::MergeFrom(from.logout_rsp_body());
      break;
    }
    case kUploadFileReqBody: {
      mutable_upload_file_req_body()->::TransMsgUploadFileReqBody::MergeFrom(from.upload_file_req_body());
      break;
    }
    case kUploadFileRspBody: {
      mutable_upload_file_rsp_body()->::TransMsgUploadFileRspBody::MergeFrom(from.upload_file_rsp_body());
      break;
    }
    case kSendDataReqBody: {
      mutable_send_data_req_body()->::TransMsgSendDataReqBody::MergeFrom(from.send_data_req_body());
      break;
    }
    case kResendDataNotifiReqBody: {
      mutable_resend_data_notifi_req_body()->::TransMsgResendDataNotifiReqBody::MergeFrom(from.resend_data_notifi_req_body());
      break;
    }
    case kResendDataNotifiRspBody: {
      mutable_resend_data_notifi_rsp_body()->::TransMsgResendDataNotifiRspBody::MergeFrom(from.resend_data_notifi_rsp_body());
      break;
    }
    case kFinishNotifiReqBody: {
      mutable_finish_notifi_req_body()->::TransMsgFinishNotifiReqBody::MergeFrom(from.finish_notifi_req_body());
      break;
    }
    case kFinishNotifiRspBody: {
      mutable_finish_notifi_rsp_body()->::TransMsgFinishNotifiRspBody::MergeFrom(from.finish_notifi_rsp_body());
      break;
    }
    case kHeartbeatReqBody: {
      mutable_heartbeat_req_body()->::TransMsgHeartbeatReqBody::MergeFrom(from.heartbeat_req_body());
      break;
    }
    case kHeartbeatRspBody: {
      mutable_heartbeat_rsp_body()->::TransMsgHeartbeatRspBody::MergeFrom(from.heartbeat_rsp_body());
      break;
    }
    case kResendDataReqBody: {
      mutable_resend_data_req_body()->::TransMsgSendDataReqBody::MergeFrom(from.resend_data_req_body());
      break;
    }
    case kDirProcessReqBody: {
      mutable_dir_process_req_body()->::TransMsgDirProcessReqBody::MergeFrom(from.dir_process_req_body());
      break;
    }
    case kDirProcessRspBody: {
      mutable_dir_process_rsp_body()->::TransMsgDirProcessRspBody::MergeFrom(from.dir_process_rsp_body());
      break;
    }
    case kCliNotifySvrDownloadDataReqBody: {
      mutable_cli_notify_svr_download_data_req_body()->::TransMsgCliNotifySvrDownloadDataReqBody::MergeFrom(from.cli_notify_svr_download_data_req_body());
      break;
    }
    case kCliNotifySvrDownloadDataRspBody: {
      mutable_cli_notify_svr_download_data_rsp_body()->::TransMsgCliNotifySvrDownloadDataRspBody::MergeFrom(from.cli_notify_svr_download_data_rsp_body());
      break;
    }
    case kDownloadFileReqBody: {
      mutable_download_file_req_body()->::TransMsgDownloadFileReqBody::MergeFrom(from.download_file_req_body());
      break;
    }
    case kDownloadFileRspBody: {
      mutable_download_file_rsp_body()->::TransMsgDownloadFileRspBody::MergeFrom(from.download_file_rsp_body());
      break;
    }
    case kSvrNotifyCliEndDownloadReqBody: {
      mutable_svr_notify_cli_end_download_req_body()->::TransMsgSvrNotifyCliEndDownloadReqBody::MergeFrom(from.svr_notify_cli_end_download_req_body());
      break;
    }
    case kSvrNotifyCliEndDownloadRspBody: {
      mutable_svr_notify_cli_end_download_rsp_body()->::TransMsgSvrNotifyCliEndDownloadRspBody::MergeFrom(from.svr_notify_cli_end_download_rsp_body());
      break;
    }
    case kStopUploadReqBody: {
      mutable_stop_upload_req_body()->::TransMsgStopUploadReqBody::MergeFrom(from.stop_upload_req_body());
      break;
    }
    case kStopUploadRspBody: {
      mutable_stop_upload_rsp_body()->::TransMsgStopUploadRspBody::MergeFrom(from.stop_upload_rsp_body());
      break;
    }
    case kStopDownloadReqBody: {
      mutable_stop_download_req_body()->::TransMsgStopDownloadReqBody::MergeFrom(from.stop_download_req_body());
      break;
    }
    case kStopDownloadRspBody: {
      mutable_stop_download_rsp_body()->::TransMsgStopUploadRspBody::MergeFrom(from.stop_download_rsp_body());
      break;
    }
    case TRANSMSGBODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TransMessage)
}

void TransMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransMessage_TransMessageApi_2eproto.base);
  head_ = nullptr;
  clear_has_TransMsgBody();
}

TransMessage::~TransMessage() {
  // @@protoc_insertion_point(destructor:TransMessage)
  SharedDtor();
}

void TransMessage::SharedDtor() {
  if (this != internal_default_instance()) delete head_;
  if (has_TransMsgBody()) {
    clear_TransMsgBody();
  }
}

void TransMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransMessage& TransMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransMessage_TransMessageApi_2eproto.base);
  return *internal_default_instance();
}


void TransMessage::clear_TransMsgBody() {
// @@protoc_insertion_point(one_of_clear_start:TransMessage)
  switch (TransMsgBody_case()) {
    case kLoginReqBody: {
      delete TransMsgBody_.login_req_body_;
      break;
    }
    case kLoginRspBody: {
      delete TransMsgBody_.login_rsp_body_;
      break;
    }
    case kLogoutReqBody: {
      delete TransMsgBody_.logout_req_body_;
      break;
    }
    case kLogoutRspBody: {
      delete TransMsgBody_.logout_rsp_body_;
      break;
    }
    case kUploadFileReqBody: {
      delete TransMsgBody_.upload_file_req_body_;
      break;
    }
    case kUploadFileRspBody: {
      delete TransMsgBody_.upload_file_rsp_body_;
      break;
    }
    case kSendDataReqBody: {
      delete TransMsgBody_.send_data_req_body_;
      break;
    }
    case kResendDataNotifiReqBody: {
      delete TransMsgBody_.resend_data_notifi_req_body_;
      break;
    }
    case kResendDataNotifiRspBody: {
      delete TransMsgBody_.resend_data_notifi_rsp_body_;
      break;
    }
    case kFinishNotifiReqBody: {
      delete TransMsgBody_.finish_notifi_req_body_;
      break;
    }
    case kFinishNotifiRspBody: {
      delete TransMsgBody_.finish_notifi_rsp_body_;
      break;
    }
    case kHeartbeatReqBody: {
      delete TransMsgBody_.heartbeat_req_body_;
      break;
    }
    case kHeartbeatRspBody: {
      delete TransMsgBody_.heartbeat_rsp_body_;
      break;
    }
    case kResendDataReqBody: {
      delete TransMsgBody_.resend_data_req_body_;
      break;
    }
    case kDirProcessReqBody: {
      delete TransMsgBody_.dir_process_req_body_;
      break;
    }
    case kDirProcessRspBody: {
      delete TransMsgBody_.dir_process_rsp_body_;
      break;
    }
    case kCliNotifySvrDownloadDataReqBody: {
      delete TransMsgBody_.cli_notify_svr_download_data_req_body_;
      break;
    }
    case kCliNotifySvrDownloadDataRspBody: {
      delete TransMsgBody_.cli_notify_svr_download_data_rsp_body_;
      break;
    }
    case kDownloadFileReqBody: {
      delete TransMsgBody_.download_file_req_body_;
      break;
    }
    case kDownloadFileRspBody: {
      delete TransMsgBody_.download_file_rsp_body_;
      break;
    }
    case kSvrNotifyCliEndDownloadReqBody: {
      delete TransMsgBody_.svr_notify_cli_end_download_req_body_;
      break;
    }
    case kSvrNotifyCliEndDownloadRspBody: {
      delete TransMsgBody_.svr_notify_cli_end_download_rsp_body_;
      break;
    }
    case kStopUploadReqBody: {
      delete TransMsgBody_.stop_upload_req_body_;
      break;
    }
    case kStopUploadRspBody: {
      delete TransMsgBody_.stop_upload_rsp_body_;
      break;
    }
    case kStopDownloadReqBody: {
      delete TransMsgBody_.stop_download_req_body_;
      break;
    }
    case kStopDownloadRspBody: {
      delete TransMsgBody_.stop_download_rsp_body_;
      break;
    }
    case TRANSMSGBODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSMSGBODY_NOT_SET;
}


void TransMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TransMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  clear_TransMsgBody();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TransMsgHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgLoginReqBody login_req_body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_login_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgLoginRspBody login_rsp_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_login_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgLogoutReqBody logout_req_body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_logout_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgLogoutRspBody logout_rsp_body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_logout_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgUploadFileReqBody upload_file_req_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_upload_file_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgUploadFileRspBody upload_file_rsp_body = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_upload_file_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgSendDataReqBody send_data_req_body = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_send_data_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgResendDataNotifiReqBody resend_data_notifi_req_body = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_resend_data_notifi_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgResendDataNotifiRspBody resend_data_notifi_rsp_body = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_resend_data_notifi_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgFinishNotifiReqBody finish_notifi_req_body = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_finish_notifi_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgFinishNotifiRspBody finish_notifi_rsp_body = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_finish_notifi_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgHeartbeatReqBody heartbeat_req_body = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_heartbeat_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgHeartbeatRspBody heartbeat_rsp_body = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_heartbeat_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgSendDataReqBody resend_data_req_body = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_resend_data_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgDirProcessReqBody dir_process_req_body = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_dir_process_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgDirProcessRspBody dir_process_rsp_body = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_dir_process_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgCliNotifySvrDownloadDataReqBody cli_notify_svr_download_data_req_body = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_cli_notify_svr_download_data_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgCliNotifySvrDownloadDataRspBody cli_notify_svr_download_data_rsp_body = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_cli_notify_svr_download_data_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgDownloadFileReqBody download_file_req_body = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_download_file_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgDownloadFileRspBody download_file_rsp_body = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_download_file_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgSvrNotifyCliEndDownloadReqBody svr_notify_cli_end_download_req_body = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_svr_notify_cli_end_download_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgSvrNotifyCliEndDownloadRspBody svr_notify_cli_end_download_rsp_body = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_svr_notify_cli_end_download_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgStopUploadReqBody stop_upload_req_body = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_stop_upload_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgStopUploadRspBody stop_upload_rsp_body = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_stop_upload_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgStopDownloadReqBody stop_download_req_body = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_stop_download_req_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TransMsgStopUploadRspBody stop_download_rsp_body = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_stop_download_rsp_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TransMsgHead head = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgLoginReqBody login_req_body = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_login_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgLoginRspBody login_rsp_body = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_login_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgLogoutReqBody logout_req_body = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logout_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgLogoutRspBody logout_rsp_body = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logout_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgUploadFileReqBody upload_file_req_body = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_upload_file_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgUploadFileRspBody upload_file_rsp_body = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_upload_file_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgSendDataReqBody send_data_req_body = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_send_data_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgResendDataNotifiReqBody resend_data_notifi_req_body = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_resend_data_notifi_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgResendDataNotifiRspBody resend_data_notifi_rsp_body = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_resend_data_notifi_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgFinishNotifiReqBody finish_notifi_req_body = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_finish_notifi_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgFinishNotifiRspBody finish_notifi_rsp_body = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_finish_notifi_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgHeartbeatReqBody heartbeat_req_body = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgHeartbeatRspBody heartbeat_rsp_body = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgSendDataReqBody resend_data_req_body = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_resend_data_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgDirProcessReqBody dir_process_req_body = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dir_process_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgDirProcessRspBody dir_process_rsp_body = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dir_process_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgCliNotifySvrDownloadDataReqBody cli_notify_svr_download_data_req_body = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cli_notify_svr_download_data_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgCliNotifySvrDownloadDataRspBody cli_notify_svr_download_data_rsp_body = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cli_notify_svr_download_data_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgDownloadFileReqBody download_file_req_body = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_download_file_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgDownloadFileRspBody download_file_rsp_body = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_download_file_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgSvrNotifyCliEndDownloadReqBody svr_notify_cli_end_download_req_body = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_svr_notify_cli_end_download_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgSvrNotifyCliEndDownloadRspBody svr_notify_cli_end_download_rsp_body = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_svr_notify_cli_end_download_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgStopUploadReqBody stop_upload_req_body = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_upload_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgStopUploadRspBody stop_upload_rsp_body = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_upload_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgStopDownloadReqBody stop_download_req_body = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_download_req_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TransMsgStopUploadRspBody stop_download_rsp_body = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_download_rsp_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransMsgHead head = 1;
  if (this->has_head()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::head(this), output);
  }

  // .TransMsgLoginReqBody login_req_body = 2;
  if (has_login_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::login_req_body(this), output);
  }

  // .TransMsgLoginRspBody login_rsp_body = 3;
  if (has_login_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::login_rsp_body(this), output);
  }

  // .TransMsgLogoutReqBody logout_req_body = 4;
  if (has_logout_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::logout_req_body(this), output);
  }

  // .TransMsgLogoutRspBody logout_rsp_body = 5;
  if (has_logout_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::logout_rsp_body(this), output);
  }

  // .TransMsgUploadFileReqBody upload_file_req_body = 6;
  if (has_upload_file_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::upload_file_req_body(this), output);
  }

  // .TransMsgUploadFileRspBody upload_file_rsp_body = 7;
  if (has_upload_file_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::upload_file_rsp_body(this), output);
  }

  // .TransMsgSendDataReqBody send_data_req_body = 8;
  if (has_send_data_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::send_data_req_body(this), output);
  }

  // .TransMsgResendDataNotifiReqBody resend_data_notifi_req_body = 9;
  if (has_resend_data_notifi_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::resend_data_notifi_req_body(this), output);
  }

  // .TransMsgResendDataNotifiRspBody resend_data_notifi_rsp_body = 10;
  if (has_resend_data_notifi_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::resend_data_notifi_rsp_body(this), output);
  }

  // .TransMsgFinishNotifiReqBody finish_notifi_req_body = 11;
  if (has_finish_notifi_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::finish_notifi_req_body(this), output);
  }

  // .TransMsgFinishNotifiRspBody finish_notifi_rsp_body = 12;
  if (has_finish_notifi_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::finish_notifi_rsp_body(this), output);
  }

  // .TransMsgHeartbeatReqBody heartbeat_req_body = 13;
  if (has_heartbeat_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::heartbeat_req_body(this), output);
  }

  // .TransMsgHeartbeatRspBody heartbeat_rsp_body = 14;
  if (has_heartbeat_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::heartbeat_rsp_body(this), output);
  }

  // .TransMsgSendDataReqBody resend_data_req_body = 15;
  if (has_resend_data_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::resend_data_req_body(this), output);
  }

  // .TransMsgDirProcessReqBody dir_process_req_body = 16;
  if (has_dir_process_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::dir_process_req_body(this), output);
  }

  // .TransMsgDirProcessRspBody dir_process_rsp_body = 17;
  if (has_dir_process_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::dir_process_rsp_body(this), output);
  }

  // .TransMsgCliNotifySvrDownloadDataReqBody cli_notify_svr_download_data_req_body = 18;
  if (has_cli_notify_svr_download_data_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::cli_notify_svr_download_data_req_body(this), output);
  }

  // .TransMsgCliNotifySvrDownloadDataRspBody cli_notify_svr_download_data_rsp_body = 19;
  if (has_cli_notify_svr_download_data_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::cli_notify_svr_download_data_rsp_body(this), output);
  }

  // .TransMsgDownloadFileReqBody download_file_req_body = 20;
  if (has_download_file_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::download_file_req_body(this), output);
  }

  // .TransMsgDownloadFileRspBody download_file_rsp_body = 21;
  if (has_download_file_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, HasBitSetters::download_file_rsp_body(this), output);
  }

  // .TransMsgSvrNotifyCliEndDownloadReqBody svr_notify_cli_end_download_req_body = 22;
  if (has_svr_notify_cli_end_download_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::svr_notify_cli_end_download_req_body(this), output);
  }

  // .TransMsgSvrNotifyCliEndDownloadRspBody svr_notify_cli_end_download_rsp_body = 23;
  if (has_svr_notify_cli_end_download_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::svr_notify_cli_end_download_rsp_body(this), output);
  }

  // .TransMsgStopUploadReqBody stop_upload_req_body = 24;
  if (has_stop_upload_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, HasBitSetters::stop_upload_req_body(this), output);
  }

  // .TransMsgStopUploadRspBody stop_upload_rsp_body = 25;
  if (has_stop_upload_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, HasBitSetters::stop_upload_rsp_body(this), output);
  }

  // .TransMsgStopDownloadReqBody stop_download_req_body = 26;
  if (has_stop_download_req_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, HasBitSetters::stop_download_req_body(this), output);
  }

  // .TransMsgStopUploadRspBody stop_download_rsp_body = 27;
  if (has_stop_download_rsp_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, HasBitSetters::stop_download_rsp_body(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransMsgHead head = 1;
  if (this->has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::head(this), target);
  }

  // .TransMsgLoginReqBody login_req_body = 2;
  if (has_login_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::login_req_body(this), target);
  }

  // .TransMsgLoginRspBody login_rsp_body = 3;
  if (has_login_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::login_rsp_body(this), target);
  }

  // .TransMsgLogoutReqBody logout_req_body = 4;
  if (has_logout_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::logout_req_body(this), target);
  }

  // .TransMsgLogoutRspBody logout_rsp_body = 5;
  if (has_logout_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::logout_rsp_body(this), target);
  }

  // .TransMsgUploadFileReqBody upload_file_req_body = 6;
  if (has_upload_file_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::upload_file_req_body(this), target);
  }

  // .TransMsgUploadFileRspBody upload_file_rsp_body = 7;
  if (has_upload_file_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::upload_file_rsp_body(this), target);
  }

  // .TransMsgSendDataReqBody send_data_req_body = 8;
  if (has_send_data_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::send_data_req_body(this), target);
  }

  // .TransMsgResendDataNotifiReqBody resend_data_notifi_req_body = 9;
  if (has_resend_data_notifi_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::resend_data_notifi_req_body(this), target);
  }

  // .TransMsgResendDataNotifiRspBody resend_data_notifi_rsp_body = 10;
  if (has_resend_data_notifi_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::resend_data_notifi_rsp_body(this), target);
  }

  // .TransMsgFinishNotifiReqBody finish_notifi_req_body = 11;
  if (has_finish_notifi_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::finish_notifi_req_body(this), target);
  }

  // .TransMsgFinishNotifiRspBody finish_notifi_rsp_body = 12;
  if (has_finish_notifi_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::finish_notifi_rsp_body(this), target);
  }

  // .TransMsgHeartbeatReqBody heartbeat_req_body = 13;
  if (has_heartbeat_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::heartbeat_req_body(this), target);
  }

  // .TransMsgHeartbeatRspBody heartbeat_rsp_body = 14;
  if (has_heartbeat_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::heartbeat_rsp_body(this), target);
  }

  // .TransMsgSendDataReqBody resend_data_req_body = 15;
  if (has_resend_data_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::resend_data_req_body(this), target);
  }

  // .TransMsgDirProcessReqBody dir_process_req_body = 16;
  if (has_dir_process_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::dir_process_req_body(this), target);
  }

  // .TransMsgDirProcessRspBody dir_process_rsp_body = 17;
  if (has_dir_process_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::dir_process_rsp_body(this), target);
  }

  // .TransMsgCliNotifySvrDownloadDataReqBody cli_notify_svr_download_data_req_body = 18;
  if (has_cli_notify_svr_download_data_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::cli_notify_svr_download_data_req_body(this), target);
  }

  // .TransMsgCliNotifySvrDownloadDataRspBody cli_notify_svr_download_data_rsp_body = 19;
  if (has_cli_notify_svr_download_data_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::cli_notify_svr_download_data_rsp_body(this), target);
  }

  // .TransMsgDownloadFileReqBody download_file_req_body = 20;
  if (has_download_file_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::download_file_req_body(this), target);
  }

  // .TransMsgDownloadFileRspBody download_file_rsp_body = 21;
  if (has_download_file_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, HasBitSetters::download_file_rsp_body(this), target);
  }

  // .TransMsgSvrNotifyCliEndDownloadReqBody svr_notify_cli_end_download_req_body = 22;
  if (has_svr_notify_cli_end_download_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::svr_notify_cli_end_download_req_body(this), target);
  }

  // .TransMsgSvrNotifyCliEndDownloadRspBody svr_notify_cli_end_download_rsp_body = 23;
  if (has_svr_notify_cli_end_download_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::svr_notify_cli_end_download_rsp_body(this), target);
  }

  // .TransMsgStopUploadReqBody stop_upload_req_body = 24;
  if (has_stop_upload_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, HasBitSetters::stop_upload_req_body(this), target);
  }

  // .TransMsgStopUploadRspBody stop_upload_rsp_body = 25;
  if (has_stop_upload_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, HasBitSetters::stop_upload_rsp_body(this), target);
  }

  // .TransMsgStopDownloadReqBody stop_download_req_body = 26;
  if (has_stop_download_req_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, HasBitSetters::stop_download_req_body(this), target);
  }

  // .TransMsgStopUploadRspBody stop_download_rsp_body = 27;
  if (has_stop_download_rsp_body()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, HasBitSetters::stop_download_rsp_body(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransMessage)
  return target;
}

size_t TransMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TransMsgHead head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  switch (TransMsgBody_case()) {
    // .TransMsgLoginReqBody login_req_body = 2;
    case kLoginReqBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.login_req_body_);
      break;
    }
    // .TransMsgLoginRspBody login_rsp_body = 3;
    case kLoginRspBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.login_rsp_body_);
      break;
    }
    // .TransMsgLogoutReqBody logout_req_body = 4;
    case kLogoutReqBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.logout_req_body_);
      break;
    }
    // .TransMsgLogoutRspBody logout_rsp_body = 5;
    case kLogoutRspBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.logout_rsp_body_);
      break;
    }
    // .TransMsgUploadFileReqBody upload_file_req_body = 6;
    case kUploadFileReqBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.upload_file_req_body_);
      break;
    }
    // .TransMsgUploadFileRspBody upload_file_rsp_body = 7;
    case kUploadFileRspBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.upload_file_rsp_body_);
      break;
    }
    // .TransMsgSendDataReqBody send_data_req_body = 8;
    case kSendDataReqBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.send_data_req_body_);
      break;
    }
    // .TransMsgResendDataNotifiReqBody resend_data_notifi_req_body = 9;
    case kResendDataNotifiReqBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.resend_data_notifi_req_body_);
      break;
    }
    // .TransMsgResendDataNotifiRspBody resend_data_notifi_rsp_body = 10;
    case kResendDataNotifiRspBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.resend_data_notifi_rsp_body_);
      break;
    }
    // .TransMsgFinishNotifiReqBody finish_notifi_req_body = 11;
    case kFinishNotifiReqBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.finish_notifi_req_body_);
      break;
    }
    // .TransMsgFinishNotifiRspBody finish_notifi_rsp_body = 12;
    case kFinishNotifiRspBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.finish_notifi_rsp_body_);
      break;
    }
    // .TransMsgHeartbeatReqBody heartbeat_req_body = 13;
    case kHeartbeatReqBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.heartbeat_req_body_);
      break;
    }
    // .TransMsgHeartbeatRspBody heartbeat_rsp_body = 14;
    case kHeartbeatRspBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.heartbeat_rsp_body_);
      break;
    }
    // .TransMsgSendDataReqBody resend_data_req_body = 15;
    case kResendDataReqBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.resend_data_req_body_);
      break;
    }
    // .TransMsgDirProcessReqBody dir_process_req_body = 16;
    case kDirProcessReqBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.dir_process_req_body_);
      break;
    }
    // .TransMsgDirProcessRspBody dir_process_rsp_body = 17;
    case kDirProcessRspBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.dir_process_rsp_body_);
      break;
    }
    // .TransMsgCliNotifySvrDownloadDataReqBody cli_notify_svr_download_data_req_body = 18;
    case kCliNotifySvrDownloadDataReqBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.cli_notify_svr_download_data_req_body_);
      break;
    }
    // .TransMsgCliNotifySvrDownloadDataRspBody cli_notify_svr_download_data_rsp_body = 19;
    case kCliNotifySvrDownloadDataRspBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.cli_notify_svr_download_data_rsp_body_);
      break;
    }
    // .TransMsgDownloadFileReqBody download_file_req_body = 20;
    case kDownloadFileReqBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.download_file_req_body_);
      break;
    }
    // .TransMsgDownloadFileRspBody download_file_rsp_body = 21;
    case kDownloadFileRspBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.download_file_rsp_body_);
      break;
    }
    // .TransMsgSvrNotifyCliEndDownloadReqBody svr_notify_cli_end_download_req_body = 22;
    case kSvrNotifyCliEndDownloadReqBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.svr_notify_cli_end_download_req_body_);
      break;
    }
    // .TransMsgSvrNotifyCliEndDownloadRspBody svr_notify_cli_end_download_rsp_body = 23;
    case kSvrNotifyCliEndDownloadRspBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.svr_notify_cli_end_download_rsp_body_);
      break;
    }
    // .TransMsgStopUploadReqBody stop_upload_req_body = 24;
    case kStopUploadReqBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.stop_upload_req_body_);
      break;
    }
    // .TransMsgStopUploadRspBody stop_upload_rsp_body = 25;
    case kStopUploadRspBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.stop_upload_rsp_body_);
      break;
    }
    // .TransMsgStopDownloadReqBody stop_download_req_body = 26;
    case kStopDownloadReqBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.stop_download_req_body_);
      break;
    }
    // .TransMsgStopUploadRspBody stop_download_rsp_body = 27;
    case kStopDownloadRspBody: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *TransMsgBody_.stop_download_rsp_body_);
      break;
    }
    case TRANSMSGBODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TransMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransMessage)
    MergeFrom(*source);
  }
}

void TransMessage::MergeFrom(const TransMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head()) {
    mutable_head()->::TransMsgHead::MergeFrom(from.head());
  }
  switch (from.TransMsgBody_case()) {
    case kLoginReqBody: {
      mutable_login_req_body()->::TransMsgLoginReqBody::MergeFrom(from.login_req_body());
      break;
    }
    case kLoginRspBody: {
      mutable_login_rsp_body()->::TransMsgLoginRspBody::MergeFrom(from.login_rsp_body());
      break;
    }
    case kLogoutReqBody: {
      mutable_logout_req_body()->::TransMsgLogoutReqBody::MergeFrom(from.logout_req_body());
      break;
    }
    case kLogoutRspBody: {
      mutable_logout_rsp_body()->::TransMsgLogoutRspBody::MergeFrom(from.logout_rsp_body());
      break;
    }
    case kUploadFileReqBody: {
      mutable_upload_file_req_body()->::TransMsgUploadFileReqBody::MergeFrom(from.upload_file_req_body());
      break;
    }
    case kUploadFileRspBody: {
      mutable_upload_file_rsp_body()->::TransMsgUploadFileRspBody::MergeFrom(from.upload_file_rsp_body());
      break;
    }
    case kSendDataReqBody: {
      mutable_send_data_req_body()->::TransMsgSendDataReqBody::MergeFrom(from.send_data_req_body());
      break;
    }
    case kResendDataNotifiReqBody: {
      mutable_resend_data_notifi_req_body()->::TransMsgResendDataNotifiReqBody::MergeFrom(from.resend_data_notifi_req_body());
      break;
    }
    case kResendDataNotifiRspBody: {
      mutable_resend_data_notifi_rsp_body()->::TransMsgResendDataNotifiRspBody::MergeFrom(from.resend_data_notifi_rsp_body());
      break;
    }
    case kFinishNotifiReqBody: {
      mutable_finish_notifi_req_body()->::TransMsgFinishNotifiReqBody::MergeFrom(from.finish_notifi_req_body());
      break;
    }
    case kFinishNotifiRspBody: {
      mutable_finish_notifi_rsp_body()->::TransMsgFinishNotifiRspBody::MergeFrom(from.finish_notifi_rsp_body());
      break;
    }
    case kHeartbeatReqBody: {
      mutable_heartbeat_req_body()->::TransMsgHeartbeatReqBody::MergeFrom(from.heartbeat_req_body());
      break;
    }
    case kHeartbeatRspBody: {
      mutable_heartbeat_rsp_body()->::TransMsgHeartbeatRspBody::MergeFrom(from.heartbeat_rsp_body());
      break;
    }
    case kResendDataReqBody: {
      mutable_resend_data_req_body()->::TransMsgSendDataReqBody::MergeFrom(from.resend_data_req_body());
      break;
    }
    case kDirProcessReqBody: {
      mutable_dir_process_req_body()->::TransMsgDirProcessReqBody::MergeFrom(from.dir_process_req_body());
      break;
    }
    case kDirProcessRspBody: {
      mutable_dir_process_rsp_body()->::TransMsgDirProcessRspBody::MergeFrom(from.dir_process_rsp_body());
      break;
    }
    case kCliNotifySvrDownloadDataReqBody: {
      mutable_cli_notify_svr_download_data_req_body()->::TransMsgCliNotifySvrDownloadDataReqBody::MergeFrom(from.cli_notify_svr_download_data_req_body());
      break;
    }
    case kCliNotifySvrDownloadDataRspBody: {
      mutable_cli_notify_svr_download_data_rsp_body()->::TransMsgCliNotifySvrDownloadDataRspBody::MergeFrom(from.cli_notify_svr_download_data_rsp_body());
      break;
    }
    case kDownloadFileReqBody: {
      mutable_download_file_req_body()->::TransMsgDownloadFileReqBody::MergeFrom(from.download_file_req_body());
      break;
    }
    case kDownloadFileRspBody: {
      mutable_download_file_rsp_body()->::TransMsgDownloadFileRspBody::MergeFrom(from.download_file_rsp_body());
      break;
    }
    case kSvrNotifyCliEndDownloadReqBody: {
      mutable_svr_notify_cli_end_download_req_body()->::TransMsgSvrNotifyCliEndDownloadReqBody::MergeFrom(from.svr_notify_cli_end_download_req_body());
      break;
    }
    case kSvrNotifyCliEndDownloadRspBody: {
      mutable_svr_notify_cli_end_download_rsp_body()->::TransMsgSvrNotifyCliEndDownloadRspBody::MergeFrom(from.svr_notify_cli_end_download_rsp_body());
      break;
    }
    case kStopUploadReqBody: {
      mutable_stop_upload_req_body()->::TransMsgStopUploadReqBody::MergeFrom(from.stop_upload_req_body());
      break;
    }
    case kStopUploadRspBody: {
      mutable_stop_upload_rsp_body()->::TransMsgStopUploadRspBody::MergeFrom(from.stop_upload_rsp_body());
      break;
    }
    case kStopDownloadReqBody: {
      mutable_stop_download_req_body()->::TransMsgStopDownloadReqBody::MergeFrom(from.stop_download_req_body());
      break;
    }
    case kStopDownloadRspBody: {
      mutable_stop_download_rsp_body()->::TransMsgStopUploadRspBody::MergeFrom(from.stop_download_rsp_body());
      break;
    }
    case TRANSMSGBODY_NOT_SET: {
      break;
    }
  }
}

void TransMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransMessage::CopyFrom(const TransMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransMessage::IsInitialized() const {
  return true;
}

void TransMessage::Swap(TransMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransMessage::InternalSwap(TransMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(head_, other->head_);
  swap(TransMsgBody_, other->TransMsgBody_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TransMsgHead_ExtenInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::TransMsgHead_ExtenInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgHead_ExtenInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgHead* Arena::CreateMaybeMessage< ::TransMsgHead >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgHead >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgLoginReqBody* Arena::CreateMaybeMessage< ::TransMsgLoginReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgLoginReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgLoginRspBody* Arena::CreateMaybeMessage< ::TransMsgLoginRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgLoginRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgHeartbeatReqBody* Arena::CreateMaybeMessage< ::TransMsgHeartbeatReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgHeartbeatReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgHeartbeatRspBody* Arena::CreateMaybeMessage< ::TransMsgHeartbeatRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgHeartbeatRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgLogoutReqBody* Arena::CreateMaybeMessage< ::TransMsgLogoutReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgLogoutReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgLogoutRspBody* Arena::CreateMaybeMessage< ::TransMsgLogoutRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgLogoutRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgSendDataReqBody* Arena::CreateMaybeMessage< ::TransMsgSendDataReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgSendDataReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgResendDataNotifiReqBody* Arena::CreateMaybeMessage< ::TransMsgResendDataNotifiReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgResendDataNotifiReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgResendDataNotifiRspBody* Arena::CreateMaybeMessage< ::TransMsgResendDataNotifiRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgResendDataNotifiRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgFinishNotifiReqBody* Arena::CreateMaybeMessage< ::TransMsgFinishNotifiReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgFinishNotifiReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgFinishNotifiRspBody* Arena::CreateMaybeMessage< ::TransMsgFinishNotifiRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgFinishNotifiRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgDirProcessReqBody* Arena::CreateMaybeMessage< ::TransMsgDirProcessReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgDirProcessReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgDirProcessRspBody* Arena::CreateMaybeMessage< ::TransMsgDirProcessRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgDirProcessRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgUploadFileReqBody* Arena::CreateMaybeMessage< ::TransMsgUploadFileReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgUploadFileReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgUploadFileRspBody* Arena::CreateMaybeMessage< ::TransMsgUploadFileRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgUploadFileRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgStopUploadReqBody* Arena::CreateMaybeMessage< ::TransMsgStopUploadReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgStopUploadReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgStopUploadRspBody* Arena::CreateMaybeMessage< ::TransMsgStopUploadRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgStopUploadRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgCliNotifySvrDownloadDataReqBody* Arena::CreateMaybeMessage< ::TransMsgCliNotifySvrDownloadDataReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgCliNotifySvrDownloadDataReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgCliNotifySvrDownloadDataRspBody* Arena::CreateMaybeMessage< ::TransMsgCliNotifySvrDownloadDataRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgCliNotifySvrDownloadDataRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgDownloadFileReqBody* Arena::CreateMaybeMessage< ::TransMsgDownloadFileReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgDownloadFileReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgDownloadFileRspBody* Arena::CreateMaybeMessage< ::TransMsgDownloadFileRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgDownloadFileRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgSvrNotifyCliEndDownloadReqBody* Arena::CreateMaybeMessage< ::TransMsgSvrNotifyCliEndDownloadReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgSvrNotifyCliEndDownloadReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgSvrNotifyCliEndDownloadRspBody* Arena::CreateMaybeMessage< ::TransMsgSvrNotifyCliEndDownloadRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgSvrNotifyCliEndDownloadRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgStopDownloadReqBody* Arena::CreateMaybeMessage< ::TransMsgStopDownloadReqBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgStopDownloadReqBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMsgStopDownloadRspBody* Arena::CreateMaybeMessage< ::TransMsgStopDownloadRspBody >(Arena* arena) {
  return Arena::CreateInternal< ::TransMsgStopDownloadRspBody >(arena);
}
template<> PROTOBUF_NOINLINE ::TransMessage* Arena::CreateMaybeMessage< ::TransMessage >(Arena* arena) {
  return Arena::CreateInternal< ::TransMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
