// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TransMessageApi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TransMessageApi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TransMessageApi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TransMessageApi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TransMessageApi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TransMessageApi_2eproto;
class TransMessage;
class TransMessageDefaultTypeInternal;
extern TransMessageDefaultTypeInternal _TransMessage_default_instance_;
class TransMsgCliNotifySvrDownloadDataReqBody;
class TransMsgCliNotifySvrDownloadDataReqBodyDefaultTypeInternal;
extern TransMsgCliNotifySvrDownloadDataReqBodyDefaultTypeInternal _TransMsgCliNotifySvrDownloadDataReqBody_default_instance_;
class TransMsgCliNotifySvrDownloadDataRspBody;
class TransMsgCliNotifySvrDownloadDataRspBodyDefaultTypeInternal;
extern TransMsgCliNotifySvrDownloadDataRspBodyDefaultTypeInternal _TransMsgCliNotifySvrDownloadDataRspBody_default_instance_;
class TransMsgDirProcessReqBody;
class TransMsgDirProcessReqBodyDefaultTypeInternal;
extern TransMsgDirProcessReqBodyDefaultTypeInternal _TransMsgDirProcessReqBody_default_instance_;
class TransMsgDirProcessRspBody;
class TransMsgDirProcessRspBodyDefaultTypeInternal;
extern TransMsgDirProcessRspBodyDefaultTypeInternal _TransMsgDirProcessRspBody_default_instance_;
class TransMsgDownloadFileReqBody;
class TransMsgDownloadFileReqBodyDefaultTypeInternal;
extern TransMsgDownloadFileReqBodyDefaultTypeInternal _TransMsgDownloadFileReqBody_default_instance_;
class TransMsgDownloadFileRspBody;
class TransMsgDownloadFileRspBodyDefaultTypeInternal;
extern TransMsgDownloadFileRspBodyDefaultTypeInternal _TransMsgDownloadFileRspBody_default_instance_;
class TransMsgFinishNotifiReqBody;
class TransMsgFinishNotifiReqBodyDefaultTypeInternal;
extern TransMsgFinishNotifiReqBodyDefaultTypeInternal _TransMsgFinishNotifiReqBody_default_instance_;
class TransMsgFinishNotifiRspBody;
class TransMsgFinishNotifiRspBodyDefaultTypeInternal;
extern TransMsgFinishNotifiRspBodyDefaultTypeInternal _TransMsgFinishNotifiRspBody_default_instance_;
class TransMsgHead;
class TransMsgHeadDefaultTypeInternal;
extern TransMsgHeadDefaultTypeInternal _TransMsgHead_default_instance_;
class TransMsgHead_ExtenInfoEntry_DoNotUse;
class TransMsgHead_ExtenInfoEntry_DoNotUseDefaultTypeInternal;
extern TransMsgHead_ExtenInfoEntry_DoNotUseDefaultTypeInternal _TransMsgHead_ExtenInfoEntry_DoNotUse_default_instance_;
class TransMsgHeartbeatReqBody;
class TransMsgHeartbeatReqBodyDefaultTypeInternal;
extern TransMsgHeartbeatReqBodyDefaultTypeInternal _TransMsgHeartbeatReqBody_default_instance_;
class TransMsgHeartbeatRspBody;
class TransMsgHeartbeatRspBodyDefaultTypeInternal;
extern TransMsgHeartbeatRspBodyDefaultTypeInternal _TransMsgHeartbeatRspBody_default_instance_;
class TransMsgLoginReqBody;
class TransMsgLoginReqBodyDefaultTypeInternal;
extern TransMsgLoginReqBodyDefaultTypeInternal _TransMsgLoginReqBody_default_instance_;
class TransMsgLoginRspBody;
class TransMsgLoginRspBodyDefaultTypeInternal;
extern TransMsgLoginRspBodyDefaultTypeInternal _TransMsgLoginRspBody_default_instance_;
class TransMsgLogoutReqBody;
class TransMsgLogoutReqBodyDefaultTypeInternal;
extern TransMsgLogoutReqBodyDefaultTypeInternal _TransMsgLogoutReqBody_default_instance_;
class TransMsgLogoutRspBody;
class TransMsgLogoutRspBodyDefaultTypeInternal;
extern TransMsgLogoutRspBodyDefaultTypeInternal _TransMsgLogoutRspBody_default_instance_;
class TransMsgResendDataNotifiReqBody;
class TransMsgResendDataNotifiReqBodyDefaultTypeInternal;
extern TransMsgResendDataNotifiReqBodyDefaultTypeInternal _TransMsgResendDataNotifiReqBody_default_instance_;
class TransMsgResendDataNotifiRspBody;
class TransMsgResendDataNotifiRspBodyDefaultTypeInternal;
extern TransMsgResendDataNotifiRspBodyDefaultTypeInternal _TransMsgResendDataNotifiRspBody_default_instance_;
class TransMsgSendDataReqBody;
class TransMsgSendDataReqBodyDefaultTypeInternal;
extern TransMsgSendDataReqBodyDefaultTypeInternal _TransMsgSendDataReqBody_default_instance_;
class TransMsgStopDownloadReqBody;
class TransMsgStopDownloadReqBodyDefaultTypeInternal;
extern TransMsgStopDownloadReqBodyDefaultTypeInternal _TransMsgStopDownloadReqBody_default_instance_;
class TransMsgStopDownloadRspBody;
class TransMsgStopDownloadRspBodyDefaultTypeInternal;
extern TransMsgStopDownloadRspBodyDefaultTypeInternal _TransMsgStopDownloadRspBody_default_instance_;
class TransMsgStopUploadReqBody;
class TransMsgStopUploadReqBodyDefaultTypeInternal;
extern TransMsgStopUploadReqBodyDefaultTypeInternal _TransMsgStopUploadReqBody_default_instance_;
class TransMsgStopUploadRspBody;
class TransMsgStopUploadRspBodyDefaultTypeInternal;
extern TransMsgStopUploadRspBodyDefaultTypeInternal _TransMsgStopUploadRspBody_default_instance_;
class TransMsgSvrNotifyCliEndDownloadReqBody;
class TransMsgSvrNotifyCliEndDownloadReqBodyDefaultTypeInternal;
extern TransMsgSvrNotifyCliEndDownloadReqBodyDefaultTypeInternal _TransMsgSvrNotifyCliEndDownloadReqBody_default_instance_;
class TransMsgSvrNotifyCliEndDownloadRspBody;
class TransMsgSvrNotifyCliEndDownloadRspBodyDefaultTypeInternal;
extern TransMsgSvrNotifyCliEndDownloadRspBodyDefaultTypeInternal _TransMsgSvrNotifyCliEndDownloadRspBody_default_instance_;
class TransMsgUploadFileReqBody;
class TransMsgUploadFileReqBodyDefaultTypeInternal;
extern TransMsgUploadFileReqBodyDefaultTypeInternal _TransMsgUploadFileReqBody_default_instance_;
class TransMsgUploadFileRspBody;
class TransMsgUploadFileRspBodyDefaultTypeInternal;
extern TransMsgUploadFileRspBodyDefaultTypeInternal _TransMsgUploadFileRspBody_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TransMessage* Arena::CreateMaybeMessage<::TransMessage>(Arena*);
template<> ::TransMsgCliNotifySvrDownloadDataReqBody* Arena::CreateMaybeMessage<::TransMsgCliNotifySvrDownloadDataReqBody>(Arena*);
template<> ::TransMsgCliNotifySvrDownloadDataRspBody* Arena::CreateMaybeMessage<::TransMsgCliNotifySvrDownloadDataRspBody>(Arena*);
template<> ::TransMsgDirProcessReqBody* Arena::CreateMaybeMessage<::TransMsgDirProcessReqBody>(Arena*);
template<> ::TransMsgDirProcessRspBody* Arena::CreateMaybeMessage<::TransMsgDirProcessRspBody>(Arena*);
template<> ::TransMsgDownloadFileReqBody* Arena::CreateMaybeMessage<::TransMsgDownloadFileReqBody>(Arena*);
template<> ::TransMsgDownloadFileRspBody* Arena::CreateMaybeMessage<::TransMsgDownloadFileRspBody>(Arena*);
template<> ::TransMsgFinishNotifiReqBody* Arena::CreateMaybeMessage<::TransMsgFinishNotifiReqBody>(Arena*);
template<> ::TransMsgFinishNotifiRspBody* Arena::CreateMaybeMessage<::TransMsgFinishNotifiRspBody>(Arena*);
template<> ::TransMsgHead* Arena::CreateMaybeMessage<::TransMsgHead>(Arena*);
template<> ::TransMsgHead_ExtenInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::TransMsgHead_ExtenInfoEntry_DoNotUse>(Arena*);
template<> ::TransMsgHeartbeatReqBody* Arena::CreateMaybeMessage<::TransMsgHeartbeatReqBody>(Arena*);
template<> ::TransMsgHeartbeatRspBody* Arena::CreateMaybeMessage<::TransMsgHeartbeatRspBody>(Arena*);
template<> ::TransMsgLoginReqBody* Arena::CreateMaybeMessage<::TransMsgLoginReqBody>(Arena*);
template<> ::TransMsgLoginRspBody* Arena::CreateMaybeMessage<::TransMsgLoginRspBody>(Arena*);
template<> ::TransMsgLogoutReqBody* Arena::CreateMaybeMessage<::TransMsgLogoutReqBody>(Arena*);
template<> ::TransMsgLogoutRspBody* Arena::CreateMaybeMessage<::TransMsgLogoutRspBody>(Arena*);
template<> ::TransMsgResendDataNotifiReqBody* Arena::CreateMaybeMessage<::TransMsgResendDataNotifiReqBody>(Arena*);
template<> ::TransMsgResendDataNotifiRspBody* Arena::CreateMaybeMessage<::TransMsgResendDataNotifiRspBody>(Arena*);
template<> ::TransMsgSendDataReqBody* Arena::CreateMaybeMessage<::TransMsgSendDataReqBody>(Arena*);
template<> ::TransMsgStopDownloadReqBody* Arena::CreateMaybeMessage<::TransMsgStopDownloadReqBody>(Arena*);
template<> ::TransMsgStopDownloadRspBody* Arena::CreateMaybeMessage<::TransMsgStopDownloadRspBody>(Arena*);
template<> ::TransMsgStopUploadReqBody* Arena::CreateMaybeMessage<::TransMsgStopUploadReqBody>(Arena*);
template<> ::TransMsgStopUploadRspBody* Arena::CreateMaybeMessage<::TransMsgStopUploadRspBody>(Arena*);
template<> ::TransMsgSvrNotifyCliEndDownloadReqBody* Arena::CreateMaybeMessage<::TransMsgSvrNotifyCliEndDownloadReqBody>(Arena*);
template<> ::TransMsgSvrNotifyCliEndDownloadRspBody* Arena::CreateMaybeMessage<::TransMsgSvrNotifyCliEndDownloadRspBody>(Arena*);
template<> ::TransMsgUploadFileReqBody* Arena::CreateMaybeMessage<::TransMsgUploadFileReqBody>(Arena*);
template<> ::TransMsgUploadFileRspBody* Arena::CreateMaybeMessage<::TransMsgUploadFileRspBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TransMsgHead_ExtenInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransMsgHead_ExtenInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransMsgHead_ExtenInfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TransMsgHead_ExtenInfoEntry_DoNotUse();
  TransMsgHead_ExtenInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TransMsgHead_ExtenInfoEntry_DoNotUse& other);
  static const TransMsgHead_ExtenInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TransMsgHead_ExtenInfoEntry_DoNotUse*>(&_TransMsgHead_ExtenInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TransMsgHead.ExtenInfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "TransMsgHead.ExtenInfoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class TransMsgHead :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgHead) */ {
 public:
  TransMsgHead();
  virtual ~TransMsgHead();

  TransMsgHead(const TransMsgHead& from);
  TransMsgHead(TransMsgHead&& from) noexcept
    : TransMsgHead() {
    *this = ::std::move(from);
  }

  inline TransMsgHead& operator=(const TransMsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgHead& operator=(TransMsgHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgHead* internal_default_instance() {
    return reinterpret_cast<const TransMsgHead*>(
               &_TransMsgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TransMsgHead* other);
  friend void swap(TransMsgHead& a, TransMsgHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgHead* New() const final {
    return CreateMaybeMessage<TransMsgHead>(nullptr);
  }

  TransMsgHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgHead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgHead& from);
  void MergeFrom(const TransMsgHead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgHead";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> exten_info = 7;
  int exten_info_size() const;
  void clear_exten_info();
  static const int kExtenInfoFieldNumber = 7;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      exten_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_exten_info();

  // string msg_name = 1;
  void clear_msg_name();
  static const int kMsgNameFieldNumber = 1;
  const std::string& msg_name() const;
  void set_msg_name(const std::string& value);
  void set_msg_name(std::string&& value);
  void set_msg_name(const char* value);
  void set_msg_name(const char* value, size_t size);
  std::string* mutable_msg_name();
  std::string* release_msg_name();
  void set_allocated_msg_name(std::string* msg_name);

  // string nonce = 4;
  void clear_nonce();
  static const int kNonceFieldNumber = 4;
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);

  // string session_id = 5;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 5;
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);

  // string sign = 6;
  void clear_sign();
  static const int kSignFieldNumber = 6;
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 magic = 3;
  void clear_magic();
  static const int kMagicFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgHead)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TransMsgHead_ExtenInfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > exten_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 magic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgLoginReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgLoginReqBody) */ {
 public:
  TransMsgLoginReqBody();
  virtual ~TransMsgLoginReqBody();

  TransMsgLoginReqBody(const TransMsgLoginReqBody& from);
  TransMsgLoginReqBody(TransMsgLoginReqBody&& from) noexcept
    : TransMsgLoginReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgLoginReqBody& operator=(const TransMsgLoginReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgLoginReqBody& operator=(TransMsgLoginReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgLoginReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgLoginReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgLoginReqBody*>(
               &_TransMsgLoginReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TransMsgLoginReqBody* other);
  friend void swap(TransMsgLoginReqBody& a, TransMsgLoginReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgLoginReqBody* New() const final {
    return CreateMaybeMessage<TransMsgLoginReqBody>(nullptr);
  }

  TransMsgLoginReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgLoginReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgLoginReqBody& from);
  void MergeFrom(const TransMsgLoginReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgLoginReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgLoginReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // @@protoc_insertion_point(class_scope:TransMsgLoginReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgLoginRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgLoginRspBody) */ {
 public:
  TransMsgLoginRspBody();
  virtual ~TransMsgLoginRspBody();

  TransMsgLoginRspBody(const TransMsgLoginRspBody& from);
  TransMsgLoginRspBody(TransMsgLoginRspBody&& from) noexcept
    : TransMsgLoginRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgLoginRspBody& operator=(const TransMsgLoginRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgLoginRspBody& operator=(TransMsgLoginRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgLoginRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgLoginRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgLoginRspBody*>(
               &_TransMsgLoginRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TransMsgLoginRspBody* other);
  friend void swap(TransMsgLoginRspBody& a, TransMsgLoginRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgLoginRspBody* New() const final {
    return CreateMaybeMessage<TransMsgLoginRspBody>(nullptr);
  }

  TransMsgLoginRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgLoginRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgLoginRspBody& from);
  void MergeFrom(const TransMsgLoginRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgLoginRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgLoginRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgLoginRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgHeartbeatReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgHeartbeatReqBody) */ {
 public:
  TransMsgHeartbeatReqBody();
  virtual ~TransMsgHeartbeatReqBody();

  TransMsgHeartbeatReqBody(const TransMsgHeartbeatReqBody& from);
  TransMsgHeartbeatReqBody(TransMsgHeartbeatReqBody&& from) noexcept
    : TransMsgHeartbeatReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgHeartbeatReqBody& operator=(const TransMsgHeartbeatReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgHeartbeatReqBody& operator=(TransMsgHeartbeatReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgHeartbeatReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgHeartbeatReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgHeartbeatReqBody*>(
               &_TransMsgHeartbeatReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TransMsgHeartbeatReqBody* other);
  friend void swap(TransMsgHeartbeatReqBody& a, TransMsgHeartbeatReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgHeartbeatReqBody* New() const final {
    return CreateMaybeMessage<TransMsgHeartbeatReqBody>(nullptr);
  }

  TransMsgHeartbeatReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgHeartbeatReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgHeartbeatReqBody& from);
  void MergeFrom(const TransMsgHeartbeatReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgHeartbeatReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgHeartbeatReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // @@protoc_insertion_point(class_scope:TransMsgHeartbeatReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgHeartbeatRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgHeartbeatRspBody) */ {
 public:
  TransMsgHeartbeatRspBody();
  virtual ~TransMsgHeartbeatRspBody();

  TransMsgHeartbeatRspBody(const TransMsgHeartbeatRspBody& from);
  TransMsgHeartbeatRspBody(TransMsgHeartbeatRspBody&& from) noexcept
    : TransMsgHeartbeatRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgHeartbeatRspBody& operator=(const TransMsgHeartbeatRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgHeartbeatRspBody& operator=(TransMsgHeartbeatRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgHeartbeatRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgHeartbeatRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgHeartbeatRspBody*>(
               &_TransMsgHeartbeatRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TransMsgHeartbeatRspBody* other);
  friend void swap(TransMsgHeartbeatRspBody& a, TransMsgHeartbeatRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgHeartbeatRspBody* New() const final {
    return CreateMaybeMessage<TransMsgHeartbeatRspBody>(nullptr);
  }

  TransMsgHeartbeatRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgHeartbeatRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgHeartbeatRspBody& from);
  void MergeFrom(const TransMsgHeartbeatRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgHeartbeatRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgHeartbeatRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgHeartbeatRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgLogoutReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgLogoutReqBody) */ {
 public:
  TransMsgLogoutReqBody();
  virtual ~TransMsgLogoutReqBody();

  TransMsgLogoutReqBody(const TransMsgLogoutReqBody& from);
  TransMsgLogoutReqBody(TransMsgLogoutReqBody&& from) noexcept
    : TransMsgLogoutReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgLogoutReqBody& operator=(const TransMsgLogoutReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgLogoutReqBody& operator=(TransMsgLogoutReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgLogoutReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgLogoutReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgLogoutReqBody*>(
               &_TransMsgLogoutReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TransMsgLogoutReqBody* other);
  friend void swap(TransMsgLogoutReqBody& a, TransMsgLogoutReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgLogoutReqBody* New() const final {
    return CreateMaybeMessage<TransMsgLogoutReqBody>(nullptr);
  }

  TransMsgLogoutReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgLogoutReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgLogoutReqBody& from);
  void MergeFrom(const TransMsgLogoutReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgLogoutReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgLogoutReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // @@protoc_insertion_point(class_scope:TransMsgLogoutReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgLogoutRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgLogoutRspBody) */ {
 public:
  TransMsgLogoutRspBody();
  virtual ~TransMsgLogoutRspBody();

  TransMsgLogoutRspBody(const TransMsgLogoutRspBody& from);
  TransMsgLogoutRspBody(TransMsgLogoutRspBody&& from) noexcept
    : TransMsgLogoutRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgLogoutRspBody& operator=(const TransMsgLogoutRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgLogoutRspBody& operator=(TransMsgLogoutRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgLogoutRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgLogoutRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgLogoutRspBody*>(
               &_TransMsgLogoutRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TransMsgLogoutRspBody* other);
  friend void swap(TransMsgLogoutRspBody& a, TransMsgLogoutRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgLogoutRspBody* New() const final {
    return CreateMaybeMessage<TransMsgLogoutRspBody>(nullptr);
  }

  TransMsgLogoutRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgLogoutRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgLogoutRspBody& from);
  void MergeFrom(const TransMsgLogoutRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgLogoutRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgLogoutRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgLogoutRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgSendDataReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgSendDataReqBody) */ {
 public:
  TransMsgSendDataReqBody();
  virtual ~TransMsgSendDataReqBody();

  TransMsgSendDataReqBody(const TransMsgSendDataReqBody& from);
  TransMsgSendDataReqBody(TransMsgSendDataReqBody&& from) noexcept
    : TransMsgSendDataReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgSendDataReqBody& operator=(const TransMsgSendDataReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgSendDataReqBody& operator=(TransMsgSendDataReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgSendDataReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgSendDataReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgSendDataReqBody*>(
               &_TransMsgSendDataReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TransMsgSendDataReqBody* other);
  friend void swap(TransMsgSendDataReqBody& a, TransMsgSendDataReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgSendDataReqBody* New() const final {
    return CreateMaybeMessage<TransMsgSendDataReqBody>(nullptr);
  }

  TransMsgSendDataReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgSendDataReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgSendDataReqBody& from);
  void MergeFrom(const TransMsgSendDataReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgSendDataReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgSendDataReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string trans_session_id = 2;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 2;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // bytes file_block_data = 4;
  void clear_file_block_data();
  static const int kFileBlockDataFieldNumber = 4;
  const std::string& file_block_data() const;
  void set_file_block_data(const std::string& value);
  void set_file_block_data(std::string&& value);
  void set_file_block_data(const char* value);
  void set_file_block_data(const void* value, size_t size);
  std::string* mutable_file_block_data();
  std::string* release_file_block_data();
  void set_allocated_file_block_data(std::string* file_block_data);

  // uint64 file_block_num = 3;
  void clear_file_block_num();
  static const int kFileBlockNumFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_num() const;
  void set_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 block_hash = 5;
  void clear_block_hash();
  static const int kBlockHashFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_hash() const;
  void set_block_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_hash = 6;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash() const;
  void set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 resend_notifi_timestamp = 7;
  void clear_resend_notifi_timestamp();
  static const int kResendNotifiTimestampFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 resend_notifi_timestamp() const;
  void set_resend_notifi_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:TransMsgSendDataReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_block_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 resend_notifi_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgResendDataNotifiReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgResendDataNotifiReqBody) */ {
 public:
  TransMsgResendDataNotifiReqBody();
  virtual ~TransMsgResendDataNotifiReqBody();

  TransMsgResendDataNotifiReqBody(const TransMsgResendDataNotifiReqBody& from);
  TransMsgResendDataNotifiReqBody(TransMsgResendDataNotifiReqBody&& from) noexcept
    : TransMsgResendDataNotifiReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgResendDataNotifiReqBody& operator=(const TransMsgResendDataNotifiReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgResendDataNotifiReqBody& operator=(TransMsgResendDataNotifiReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgResendDataNotifiReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgResendDataNotifiReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgResendDataNotifiReqBody*>(
               &_TransMsgResendDataNotifiReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TransMsgResendDataNotifiReqBody* other);
  friend void swap(TransMsgResendDataNotifiReqBody& a, TransMsgResendDataNotifiReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgResendDataNotifiReqBody* New() const final {
    return CreateMaybeMessage<TransMsgResendDataNotifiReqBody>(nullptr);
  }

  TransMsgResendDataNotifiReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgResendDataNotifiReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgResendDataNotifiReqBody& from);
  void MergeFrom(const TransMsgResendDataNotifiReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgResendDataNotifiReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgResendDataNotifiReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 resend_block_list = 8;
  int resend_block_list_size() const;
  void clear_resend_block_list();
  static const int kResendBlockListFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 resend_block_list(int index) const;
  void set_resend_block_list(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_resend_block_list(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      resend_block_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_resend_block_list();

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string trans_session_id = 2;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 2;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // uint64 resend_notifi_timestamp = 3;
  void clear_resend_notifi_timestamp();
  static const int kResendNotifiTimestampFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 resend_notifi_timestamp() const;
  void set_resend_notifi_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 group_total_packet_count = 4;
  void clear_group_total_packet_count();
  static const int kGroupTotalPacketCountFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 group_total_packet_count() const;
  void set_group_total_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 group_packet_num = 5;
  void clear_group_packet_num();
  static const int kGroupPacketNumFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 group_packet_num() const;
  void set_group_packet_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint64 max_received_file_block_num = 6;
  void clear_max_received_file_block_num();
  static const int kMaxReceivedFileBlockNumFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num() const;
  void set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 received_file_blocks_count = 7;
  void clear_received_file_blocks_count();
  static const int kReceivedFileBlocksCountFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_file_blocks_count() const;
  void set_received_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:TransMsgResendDataNotifiReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > resend_block_list_;
  mutable std::atomic<int> _resend_block_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 resend_notifi_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_total_packet_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_packet_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_received_file_block_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 received_file_blocks_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgResendDataNotifiRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgResendDataNotifiRspBody) */ {
 public:
  TransMsgResendDataNotifiRspBody();
  virtual ~TransMsgResendDataNotifiRspBody();

  TransMsgResendDataNotifiRspBody(const TransMsgResendDataNotifiRspBody& from);
  TransMsgResendDataNotifiRspBody(TransMsgResendDataNotifiRspBody&& from) noexcept
    : TransMsgResendDataNotifiRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgResendDataNotifiRspBody& operator=(const TransMsgResendDataNotifiRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgResendDataNotifiRspBody& operator=(TransMsgResendDataNotifiRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgResendDataNotifiRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgResendDataNotifiRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgResendDataNotifiRspBody*>(
               &_TransMsgResendDataNotifiRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TransMsgResendDataNotifiRspBody* other);
  friend void swap(TransMsgResendDataNotifiRspBody& a, TransMsgResendDataNotifiRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgResendDataNotifiRspBody* New() const final {
    return CreateMaybeMessage<TransMsgResendDataNotifiRspBody>(nullptr);
  }

  TransMsgResendDataNotifiRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgResendDataNotifiRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgResendDataNotifiRspBody& from);
  void MergeFrom(const TransMsgResendDataNotifiRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgResendDataNotifiRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgResendDataNotifiRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 process_times = 2;
  void clear_process_times();
  static const int kProcessTimesFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 process_times() const;
  void set_process_times(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgResendDataNotifiRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 process_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgFinishNotifiReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgFinishNotifiReqBody) */ {
 public:
  TransMsgFinishNotifiReqBody();
  virtual ~TransMsgFinishNotifiReqBody();

  TransMsgFinishNotifiReqBody(const TransMsgFinishNotifiReqBody& from);
  TransMsgFinishNotifiReqBody(TransMsgFinishNotifiReqBody&& from) noexcept
    : TransMsgFinishNotifiReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgFinishNotifiReqBody& operator=(const TransMsgFinishNotifiReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgFinishNotifiReqBody& operator=(TransMsgFinishNotifiReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgFinishNotifiReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgFinishNotifiReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgFinishNotifiReqBody*>(
               &_TransMsgFinishNotifiReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TransMsgFinishNotifiReqBody* other);
  friend void swap(TransMsgFinishNotifiReqBody& a, TransMsgFinishNotifiReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgFinishNotifiReqBody* New() const final {
    return CreateMaybeMessage<TransMsgFinishNotifiReqBody>(nullptr);
  }

  TransMsgFinishNotifiReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgFinishNotifiReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgFinishNotifiReqBody& from);
  void MergeFrom(const TransMsgFinishNotifiReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgFinishNotifiReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgFinishNotifiReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string trans_session_id = 2;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 2;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // @@protoc_insertion_point(class_scope:TransMsgFinishNotifiReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgFinishNotifiRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgFinishNotifiRspBody) */ {
 public:
  TransMsgFinishNotifiRspBody();
  virtual ~TransMsgFinishNotifiRspBody();

  TransMsgFinishNotifiRspBody(const TransMsgFinishNotifiRspBody& from);
  TransMsgFinishNotifiRspBody(TransMsgFinishNotifiRspBody&& from) noexcept
    : TransMsgFinishNotifiRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgFinishNotifiRspBody& operator=(const TransMsgFinishNotifiRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgFinishNotifiRspBody& operator=(TransMsgFinishNotifiRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgFinishNotifiRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgFinishNotifiRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgFinishNotifiRspBody*>(
               &_TransMsgFinishNotifiRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TransMsgFinishNotifiRspBody* other);
  friend void swap(TransMsgFinishNotifiRspBody& a, TransMsgFinishNotifiRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgFinishNotifiRspBody* New() const final {
    return CreateMaybeMessage<TransMsgFinishNotifiRspBody>(nullptr);
  }

  TransMsgFinishNotifiRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgFinishNotifiRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgFinishNotifiRspBody& from);
  void MergeFrom(const TransMsgFinishNotifiRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgFinishNotifiRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgFinishNotifiRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string trans_session_id = 2;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 2;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgFinishNotifiRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgDirProcessReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgDirProcessReqBody) */ {
 public:
  TransMsgDirProcessReqBody();
  virtual ~TransMsgDirProcessReqBody();

  TransMsgDirProcessReqBody(const TransMsgDirProcessReqBody& from);
  TransMsgDirProcessReqBody(TransMsgDirProcessReqBody&& from) noexcept
    : TransMsgDirProcessReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgDirProcessReqBody& operator=(const TransMsgDirProcessReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgDirProcessReqBody& operator=(TransMsgDirProcessReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgDirProcessReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgDirProcessReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgDirProcessReqBody*>(
               &_TransMsgDirProcessReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TransMsgDirProcessReqBody* other);
  friend void swap(TransMsgDirProcessReqBody& a, TransMsgDirProcessReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgDirProcessReqBody* New() const final {
    return CreateMaybeMessage<TransMsgDirProcessReqBody>(nullptr);
  }

  TransMsgDirProcessReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgDirProcessReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgDirProcessReqBody& from);
  void MergeFrom(const TransMsgDirProcessReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgDirProcessReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgDirProcessReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string trans_session_id = 2;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 2;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // string remote_path = 4;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 4;
  const std::string& remote_path() const;
  void set_remote_path(const std::string& value);
  void set_remote_path(std::string&& value);
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  std::string* mutable_remote_path();
  std::string* release_remote_path();
  void set_allocated_remote_path(std::string* remote_path);

  // int32 process_type = 3;
  void clear_process_type();
  static const int kProcessTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type() const;
  void set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgDirProcessReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgDirProcessRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgDirProcessRspBody) */ {
 public:
  TransMsgDirProcessRspBody();
  virtual ~TransMsgDirProcessRspBody();

  TransMsgDirProcessRspBody(const TransMsgDirProcessRspBody& from);
  TransMsgDirProcessRspBody(TransMsgDirProcessRspBody&& from) noexcept
    : TransMsgDirProcessRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgDirProcessRspBody& operator=(const TransMsgDirProcessRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgDirProcessRspBody& operator=(TransMsgDirProcessRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgDirProcessRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgDirProcessRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgDirProcessRspBody*>(
               &_TransMsgDirProcessRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(TransMsgDirProcessRspBody* other);
  friend void swap(TransMsgDirProcessRspBody& a, TransMsgDirProcessRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgDirProcessRspBody* New() const final {
    return CreateMaybeMessage<TransMsgDirProcessRspBody>(nullptr);
  }

  TransMsgDirProcessRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgDirProcessRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgDirProcessRspBody& from);
  void MergeFrom(const TransMsgDirProcessRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgDirProcessRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgDirProcessRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgDirProcessRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgUploadFileReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgUploadFileReqBody) */ {
 public:
  TransMsgUploadFileReqBody();
  virtual ~TransMsgUploadFileReqBody();

  TransMsgUploadFileReqBody(const TransMsgUploadFileReqBody& from);
  TransMsgUploadFileReqBody(TransMsgUploadFileReqBody&& from) noexcept
    : TransMsgUploadFileReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgUploadFileReqBody& operator=(const TransMsgUploadFileReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgUploadFileReqBody& operator=(TransMsgUploadFileReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgUploadFileReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgUploadFileReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgUploadFileReqBody*>(
               &_TransMsgUploadFileReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(TransMsgUploadFileReqBody* other);
  friend void swap(TransMsgUploadFileReqBody& a, TransMsgUploadFileReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgUploadFileReqBody* New() const final {
    return CreateMaybeMessage<TransMsgUploadFileReqBody>(nullptr);
  }

  TransMsgUploadFileReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgUploadFileReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgUploadFileReqBody& from);
  void MergeFrom(const TransMsgUploadFileReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgUploadFileReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgUploadFileReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string usr_trans_id = 2;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 2;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // string remote_path = 4;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 4;
  const std::string& remote_path() const;
  void set_remote_path(const std::string& value);
  void set_remote_path(std::string&& value);
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  std::string* mutable_remote_path();
  std::string* release_remote_path();
  void set_allocated_remote_path(std::string* remote_path);

  // string local_path = 5;
  void clear_local_path();
  static const int kLocalPathFieldNumber = 5;
  const std::string& local_path() const;
  void set_local_path(const std::string& value);
  void set_local_path(std::string&& value);
  void set_local_path(const char* value);
  void set_local_path(const char* value, size_t size);
  std::string* mutable_local_path();
  std::string* release_local_path();
  void set_allocated_local_path(std::string* local_path);

  // uint64 file_size = 6;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 total_file_blocks_count = 7;
  void clear_total_file_blocks_count();
  static const int kTotalFileBlocksCountFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count() const;
  void set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_block_size = 8;
  void clear_file_block_size();
  static const int kFileBlockSizeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_size() const;
  void set_file_block_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_block_start_num = 9;
  void clear_file_block_start_num();
  static const int kFileBlockStartNumFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_start_num() const;
  void set_file_block_start_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_hash = 10;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash() const;
  void set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 transfer_rate = 11;
  void clear_transfer_rate();
  static const int kTransferRateFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::uint64 transfer_rate() const;
  void set_transfer_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 exchange_type = 3;
  void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type() const;
  void set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgUploadFileReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_start_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transfer_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgUploadFileRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgUploadFileRspBody) */ {
 public:
  TransMsgUploadFileRspBody();
  virtual ~TransMsgUploadFileRspBody();

  TransMsgUploadFileRspBody(const TransMsgUploadFileRspBody& from);
  TransMsgUploadFileRspBody(TransMsgUploadFileRspBody&& from) noexcept
    : TransMsgUploadFileRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgUploadFileRspBody& operator=(const TransMsgUploadFileRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgUploadFileRspBody& operator=(TransMsgUploadFileRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgUploadFileRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgUploadFileRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgUploadFileRspBody*>(
               &_TransMsgUploadFileRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TransMsgUploadFileRspBody* other);
  friend void swap(TransMsgUploadFileRspBody& a, TransMsgUploadFileRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgUploadFileRspBody* New() const final {
    return CreateMaybeMessage<TransMsgUploadFileRspBody>(nullptr);
  }

  TransMsgUploadFileRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgUploadFileRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgUploadFileRspBody& from);
  void MergeFrom(const TransMsgUploadFileRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgUploadFileRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgUploadFileRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string trans_session_id = 2;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 2;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgUploadFileRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgStopUploadReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgStopUploadReqBody) */ {
 public:
  TransMsgStopUploadReqBody();
  virtual ~TransMsgStopUploadReqBody();

  TransMsgStopUploadReqBody(const TransMsgStopUploadReqBody& from);
  TransMsgStopUploadReqBody(TransMsgStopUploadReqBody&& from) noexcept
    : TransMsgStopUploadReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgStopUploadReqBody& operator=(const TransMsgStopUploadReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgStopUploadReqBody& operator=(TransMsgStopUploadReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgStopUploadReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgStopUploadReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgStopUploadReqBody*>(
               &_TransMsgStopUploadReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(TransMsgStopUploadReqBody* other);
  friend void swap(TransMsgStopUploadReqBody& a, TransMsgStopUploadReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgStopUploadReqBody* New() const final {
    return CreateMaybeMessage<TransMsgStopUploadReqBody>(nullptr);
  }

  TransMsgStopUploadReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgStopUploadReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgStopUploadReqBody& from);
  void MergeFrom(const TransMsgStopUploadReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgStopUploadReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgStopUploadReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string usr_trans_id = 2;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 2;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // string trans_session_id = 3;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 3;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // @@protoc_insertion_point(class_scope:TransMsgStopUploadReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgStopUploadRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgStopUploadRspBody) */ {
 public:
  TransMsgStopUploadRspBody();
  virtual ~TransMsgStopUploadRspBody();

  TransMsgStopUploadRspBody(const TransMsgStopUploadRspBody& from);
  TransMsgStopUploadRspBody(TransMsgStopUploadRspBody&& from) noexcept
    : TransMsgStopUploadRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgStopUploadRspBody& operator=(const TransMsgStopUploadRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgStopUploadRspBody& operator=(TransMsgStopUploadRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgStopUploadRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgStopUploadRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgStopUploadRspBody*>(
               &_TransMsgStopUploadRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(TransMsgStopUploadRspBody* other);
  friend void swap(TransMsgStopUploadRspBody& a, TransMsgStopUploadRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgStopUploadRspBody* New() const final {
    return CreateMaybeMessage<TransMsgStopUploadRspBody>(nullptr);
  }

  TransMsgStopUploadRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgStopUploadRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgStopUploadRspBody& from);
  void MergeFrom(const TransMsgStopUploadRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgStopUploadRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgStopUploadRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgStopUploadRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgCliNotifySvrDownloadDataReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgCliNotifySvrDownloadDataReqBody) */ {
 public:
  TransMsgCliNotifySvrDownloadDataReqBody();
  virtual ~TransMsgCliNotifySvrDownloadDataReqBody();

  TransMsgCliNotifySvrDownloadDataReqBody(const TransMsgCliNotifySvrDownloadDataReqBody& from);
  TransMsgCliNotifySvrDownloadDataReqBody(TransMsgCliNotifySvrDownloadDataReqBody&& from) noexcept
    : TransMsgCliNotifySvrDownloadDataReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgCliNotifySvrDownloadDataReqBody& operator=(const TransMsgCliNotifySvrDownloadDataReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgCliNotifySvrDownloadDataReqBody& operator=(TransMsgCliNotifySvrDownloadDataReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgCliNotifySvrDownloadDataReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgCliNotifySvrDownloadDataReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgCliNotifySvrDownloadDataReqBody*>(
               &_TransMsgCliNotifySvrDownloadDataReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(TransMsgCliNotifySvrDownloadDataReqBody* other);
  friend void swap(TransMsgCliNotifySvrDownloadDataReqBody& a, TransMsgCliNotifySvrDownloadDataReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgCliNotifySvrDownloadDataReqBody* New() const final {
    return CreateMaybeMessage<TransMsgCliNotifySvrDownloadDataReqBody>(nullptr);
  }

  TransMsgCliNotifySvrDownloadDataReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgCliNotifySvrDownloadDataReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgCliNotifySvrDownloadDataReqBody& from);
  void MergeFrom(const TransMsgCliNotifySvrDownloadDataReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgCliNotifySvrDownloadDataReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgCliNotifySvrDownloadDataReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string remote_path = 4;
  int remote_path_size() const;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 4;
  const std::string& remote_path(int index) const;
  std::string* mutable_remote_path(int index);
  void set_remote_path(int index, const std::string& value);
  void set_remote_path(int index, std::string&& value);
  void set_remote_path(int index, const char* value);
  void set_remote_path(int index, const char* value, size_t size);
  std::string* add_remote_path();
  void add_remote_path(const std::string& value);
  void add_remote_path(std::string&& value);
  void add_remote_path(const char* value);
  void add_remote_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& remote_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_remote_path();

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string usr_trans_id = 2;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 2;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // string local_path = 5;
  void clear_local_path();
  static const int kLocalPathFieldNumber = 5;
  const std::string& local_path() const;
  void set_local_path(const std::string& value);
  void set_local_path(std::string&& value);
  void set_local_path(const char* value);
  void set_local_path(const char* value, size_t size);
  std::string* mutable_local_path();
  std::string* release_local_path();
  void set_allocated_local_path(std::string* local_path);

  // int32 exchange_type = 3;
  void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type() const;
  void set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgCliNotifySvrDownloadDataReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> remote_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgCliNotifySvrDownloadDataRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgCliNotifySvrDownloadDataRspBody) */ {
 public:
  TransMsgCliNotifySvrDownloadDataRspBody();
  virtual ~TransMsgCliNotifySvrDownloadDataRspBody();

  TransMsgCliNotifySvrDownloadDataRspBody(const TransMsgCliNotifySvrDownloadDataRspBody& from);
  TransMsgCliNotifySvrDownloadDataRspBody(TransMsgCliNotifySvrDownloadDataRspBody&& from) noexcept
    : TransMsgCliNotifySvrDownloadDataRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgCliNotifySvrDownloadDataRspBody& operator=(const TransMsgCliNotifySvrDownloadDataRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgCliNotifySvrDownloadDataRspBody& operator=(TransMsgCliNotifySvrDownloadDataRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgCliNotifySvrDownloadDataRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgCliNotifySvrDownloadDataRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgCliNotifySvrDownloadDataRspBody*>(
               &_TransMsgCliNotifySvrDownloadDataRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(TransMsgCliNotifySvrDownloadDataRspBody* other);
  friend void swap(TransMsgCliNotifySvrDownloadDataRspBody& a, TransMsgCliNotifySvrDownloadDataRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgCliNotifySvrDownloadDataRspBody* New() const final {
    return CreateMaybeMessage<TransMsgCliNotifySvrDownloadDataRspBody>(nullptr);
  }

  TransMsgCliNotifySvrDownloadDataRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgCliNotifySvrDownloadDataRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgCliNotifySvrDownloadDataRspBody& from);
  void MergeFrom(const TransMsgCliNotifySvrDownloadDataRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgCliNotifySvrDownloadDataRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgCliNotifySvrDownloadDataRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string usr_trans_id = 2;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 2;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // int64 total_file_size = 3;
  void clear_total_file_size();
  static const int kTotalFileSizeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 total_file_size() const;
  void set_total_file_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 total_files = 4;
  void clear_total_files();
  static const int kTotalFilesFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 total_files() const;
  void set_total_files(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 total_dirs = 5;
  void clear_total_dirs();
  static const int kTotalDirsFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 total_dirs() const;
  void set_total_dirs(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgCliNotifySvrDownloadDataRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_file_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_files_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_dirs_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgDownloadFileReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgDownloadFileReqBody) */ {
 public:
  TransMsgDownloadFileReqBody();
  virtual ~TransMsgDownloadFileReqBody();

  TransMsgDownloadFileReqBody(const TransMsgDownloadFileReqBody& from);
  TransMsgDownloadFileReqBody(TransMsgDownloadFileReqBody&& from) noexcept
    : TransMsgDownloadFileReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgDownloadFileReqBody& operator=(const TransMsgDownloadFileReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgDownloadFileReqBody& operator=(TransMsgDownloadFileReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgDownloadFileReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgDownloadFileReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgDownloadFileReqBody*>(
               &_TransMsgDownloadFileReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(TransMsgDownloadFileReqBody* other);
  friend void swap(TransMsgDownloadFileReqBody& a, TransMsgDownloadFileReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgDownloadFileReqBody* New() const final {
    return CreateMaybeMessage<TransMsgDownloadFileReqBody>(nullptr);
  }

  TransMsgDownloadFileReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgDownloadFileReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgDownloadFileReqBody& from);
  void MergeFrom(const TransMsgDownloadFileReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgDownloadFileReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgDownloadFileReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string usr_trans_id = 2;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 2;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // string remote_path = 4;
  void clear_remote_path();
  static const int kRemotePathFieldNumber = 4;
  const std::string& remote_path() const;
  void set_remote_path(const std::string& value);
  void set_remote_path(std::string&& value);
  void set_remote_path(const char* value);
  void set_remote_path(const char* value, size_t size);
  std::string* mutable_remote_path();
  std::string* release_remote_path();
  void set_allocated_remote_path(std::string* remote_path);

  // string local_path = 5;
  void clear_local_path();
  static const int kLocalPathFieldNumber = 5;
  const std::string& local_path() const;
  void set_local_path(const std::string& value);
  void set_local_path(std::string&& value);
  void set_local_path(const char* value);
  void set_local_path(const char* value, size_t size);
  std::string* mutable_local_path();
  std::string* release_local_path();
  void set_allocated_local_path(std::string* local_path);

  // string sync_trans_session_id = 11;
  void clear_sync_trans_session_id();
  static const int kSyncTransSessionIdFieldNumber = 11;
  const std::string& sync_trans_session_id() const;
  void set_sync_trans_session_id(const std::string& value);
  void set_sync_trans_session_id(std::string&& value);
  void set_sync_trans_session_id(const char* value);
  void set_sync_trans_session_id(const char* value, size_t size);
  std::string* mutable_sync_trans_session_id();
  std::string* release_sync_trans_session_id();
  void set_allocated_sync_trans_session_id(std::string* sync_trans_session_id);

  // uint64 file_size = 6;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 total_file_blocks_count = 7;
  void clear_total_file_blocks_count();
  static const int kTotalFileBlocksCountFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count() const;
  void set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_block_size = 8;
  void clear_file_block_size();
  static const int kFileBlockSizeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_size() const;
  void set_file_block_size(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_block_start_num = 9;
  void clear_file_block_start_num();
  static const int kFileBlockStartNumFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_start_num() const;
  void set_file_block_start_num(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 file_hash = 10;
  void clear_file_hash();
  static const int kFileHashFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash() const;
  void set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 transfer_rate = 12;
  void clear_transfer_rate();
  static const int kTransferRateFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::uint64 transfer_rate() const;
  void set_transfer_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 exchange_type = 3;
  void clear_exchange_type();
  static const int kExchangeTypeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type() const;
  void set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgDownloadFileReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sync_trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_file_blocks_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_block_start_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transfer_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 exchange_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgDownloadFileRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgDownloadFileRspBody) */ {
 public:
  TransMsgDownloadFileRspBody();
  virtual ~TransMsgDownloadFileRspBody();

  TransMsgDownloadFileRspBody(const TransMsgDownloadFileRspBody& from);
  TransMsgDownloadFileRspBody(TransMsgDownloadFileRspBody&& from) noexcept
    : TransMsgDownloadFileRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgDownloadFileRspBody& operator=(const TransMsgDownloadFileRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgDownloadFileRspBody& operator=(TransMsgDownloadFileRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgDownloadFileRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgDownloadFileRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgDownloadFileRspBody*>(
               &_TransMsgDownloadFileRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(TransMsgDownloadFileRspBody* other);
  friend void swap(TransMsgDownloadFileRspBody& a, TransMsgDownloadFileRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgDownloadFileRspBody* New() const final {
    return CreateMaybeMessage<TransMsgDownloadFileRspBody>(nullptr);
  }

  TransMsgDownloadFileRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgDownloadFileRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgDownloadFileRspBody& from);
  void MergeFrom(const TransMsgDownloadFileRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgDownloadFileRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgDownloadFileRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string trans_session_id = 3;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 3;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgDownloadFileRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgSvrNotifyCliEndDownloadReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgSvrNotifyCliEndDownloadReqBody) */ {
 public:
  TransMsgSvrNotifyCliEndDownloadReqBody();
  virtual ~TransMsgSvrNotifyCliEndDownloadReqBody();

  TransMsgSvrNotifyCliEndDownloadReqBody(const TransMsgSvrNotifyCliEndDownloadReqBody& from);
  TransMsgSvrNotifyCliEndDownloadReqBody(TransMsgSvrNotifyCliEndDownloadReqBody&& from) noexcept
    : TransMsgSvrNotifyCliEndDownloadReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgSvrNotifyCliEndDownloadReqBody& operator=(const TransMsgSvrNotifyCliEndDownloadReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgSvrNotifyCliEndDownloadReqBody& operator=(TransMsgSvrNotifyCliEndDownloadReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgSvrNotifyCliEndDownloadReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgSvrNotifyCliEndDownloadReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgSvrNotifyCliEndDownloadReqBody*>(
               &_TransMsgSvrNotifyCliEndDownloadReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(TransMsgSvrNotifyCliEndDownloadReqBody* other);
  friend void swap(TransMsgSvrNotifyCliEndDownloadReqBody& a, TransMsgSvrNotifyCliEndDownloadReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgSvrNotifyCliEndDownloadReqBody* New() const final {
    return CreateMaybeMessage<TransMsgSvrNotifyCliEndDownloadReqBody>(nullptr);
  }

  TransMsgSvrNotifyCliEndDownloadReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgSvrNotifyCliEndDownloadReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgSvrNotifyCliEndDownloadReqBody& from);
  void MergeFrom(const TransMsgSvrNotifyCliEndDownloadReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgSvrNotifyCliEndDownloadReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgSvrNotifyCliEndDownloadReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string usr_trans_id = 2;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 2;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // @@protoc_insertion_point(class_scope:TransMsgSvrNotifyCliEndDownloadReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgSvrNotifyCliEndDownloadRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgSvrNotifyCliEndDownloadRspBody) */ {
 public:
  TransMsgSvrNotifyCliEndDownloadRspBody();
  virtual ~TransMsgSvrNotifyCliEndDownloadRspBody();

  TransMsgSvrNotifyCliEndDownloadRspBody(const TransMsgSvrNotifyCliEndDownloadRspBody& from);
  TransMsgSvrNotifyCliEndDownloadRspBody(TransMsgSvrNotifyCliEndDownloadRspBody&& from) noexcept
    : TransMsgSvrNotifyCliEndDownloadRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgSvrNotifyCliEndDownloadRspBody& operator=(const TransMsgSvrNotifyCliEndDownloadRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgSvrNotifyCliEndDownloadRspBody& operator=(TransMsgSvrNotifyCliEndDownloadRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgSvrNotifyCliEndDownloadRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgSvrNotifyCliEndDownloadRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgSvrNotifyCliEndDownloadRspBody*>(
               &_TransMsgSvrNotifyCliEndDownloadRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(TransMsgSvrNotifyCliEndDownloadRspBody* other);
  friend void swap(TransMsgSvrNotifyCliEndDownloadRspBody& a, TransMsgSvrNotifyCliEndDownloadRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgSvrNotifyCliEndDownloadRspBody* New() const final {
    return CreateMaybeMessage<TransMsgSvrNotifyCliEndDownloadRspBody>(nullptr);
  }

  TransMsgSvrNotifyCliEndDownloadRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgSvrNotifyCliEndDownloadRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgSvrNotifyCliEndDownloadRspBody& from);
  void MergeFrom(const TransMsgSvrNotifyCliEndDownloadRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgSvrNotifyCliEndDownloadRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgSvrNotifyCliEndDownloadRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string usr_trans_id = 3;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 3;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgSvrNotifyCliEndDownloadRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgStopDownloadReqBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgStopDownloadReqBody) */ {
 public:
  TransMsgStopDownloadReqBody();
  virtual ~TransMsgStopDownloadReqBody();

  TransMsgStopDownloadReqBody(const TransMsgStopDownloadReqBody& from);
  TransMsgStopDownloadReqBody(TransMsgStopDownloadReqBody&& from) noexcept
    : TransMsgStopDownloadReqBody() {
    *this = ::std::move(from);
  }

  inline TransMsgStopDownloadReqBody& operator=(const TransMsgStopDownloadReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgStopDownloadReqBody& operator=(TransMsgStopDownloadReqBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgStopDownloadReqBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgStopDownloadReqBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgStopDownloadReqBody*>(
               &_TransMsgStopDownloadReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(TransMsgStopDownloadReqBody* other);
  friend void swap(TransMsgStopDownloadReqBody& a, TransMsgStopDownloadReqBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgStopDownloadReqBody* New() const final {
    return CreateMaybeMessage<TransMsgStopDownloadReqBody>(nullptr);
  }

  TransMsgStopDownloadReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgStopDownloadReqBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgStopDownloadReqBody& from);
  void MergeFrom(const TransMsgStopDownloadReqBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgStopDownloadReqBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgStopDownloadReqBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);

  // string usr_trans_id = 2;
  void clear_usr_trans_id();
  static const int kUsrTransIdFieldNumber = 2;
  const std::string& usr_trans_id() const;
  void set_usr_trans_id(const std::string& value);
  void set_usr_trans_id(std::string&& value);
  void set_usr_trans_id(const char* value);
  void set_usr_trans_id(const char* value, size_t size);
  std::string* mutable_usr_trans_id();
  std::string* release_usr_trans_id();
  void set_allocated_usr_trans_id(std::string* usr_trans_id);

  // string trans_session_id = 3;
  void clear_trans_session_id();
  static const int kTransSessionIdFieldNumber = 3;
  const std::string& trans_session_id() const;
  void set_trans_session_id(const std::string& value);
  void set_trans_session_id(std::string&& value);
  void set_trans_session_id(const char* value);
  void set_trans_session_id(const char* value, size_t size);
  std::string* mutable_trans_session_id();
  std::string* release_trans_session_id();
  void set_allocated_trans_session_id(std::string* trans_session_id);

  // @@protoc_insertion_point(class_scope:TransMsgStopDownloadReqBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_trans_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trans_session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMsgStopDownloadRspBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMsgStopDownloadRspBody) */ {
 public:
  TransMsgStopDownloadRspBody();
  virtual ~TransMsgStopDownloadRspBody();

  TransMsgStopDownloadRspBody(const TransMsgStopDownloadRspBody& from);
  TransMsgStopDownloadRspBody(TransMsgStopDownloadRspBody&& from) noexcept
    : TransMsgStopDownloadRspBody() {
    *this = ::std::move(from);
  }

  inline TransMsgStopDownloadRspBody& operator=(const TransMsgStopDownloadRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMsgStopDownloadRspBody& operator=(TransMsgStopDownloadRspBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMsgStopDownloadRspBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMsgStopDownloadRspBody* internal_default_instance() {
    return reinterpret_cast<const TransMsgStopDownloadRspBody*>(
               &_TransMsgStopDownloadRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(TransMsgStopDownloadRspBody* other);
  friend void swap(TransMsgStopDownloadRspBody& a, TransMsgStopDownloadRspBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMsgStopDownloadRspBody* New() const final {
    return CreateMaybeMessage<TransMsgStopDownloadRspBody>(nullptr);
  }

  TransMsgStopDownloadRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMsgStopDownloadRspBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMsgStopDownloadRspBody& from);
  void MergeFrom(const TransMsgStopDownloadRspBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMsgStopDownloadRspBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMsgStopDownloadRspBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TransMsgStopDownloadRspBody)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// -------------------------------------------------------------------

class TransMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransMessage) */ {
 public:
  TransMessage();
  virtual ~TransMessage();

  TransMessage(const TransMessage& from);
  TransMessage(TransMessage&& from) noexcept
    : TransMessage() {
    *this = ::std::move(from);
  }

  inline TransMessage& operator=(const TransMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransMessage& operator=(TransMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransMessage& default_instance();

  enum TransMsgBodyCase {
    kLoginReqBody = 2,
    kLoginRspBody = 3,
    kLogoutReqBody = 4,
    kLogoutRspBody = 5,
    kUploadFileReqBody = 6,
    kUploadFileRspBody = 7,
    kSendDataReqBody = 8,
    kResendDataNotifiReqBody = 9,
    kResendDataNotifiRspBody = 10,
    kFinishNotifiReqBody = 11,
    kFinishNotifiRspBody = 12,
    kHeartbeatReqBody = 13,
    kHeartbeatRspBody = 14,
    kResendDataReqBody = 15,
    kDirProcessReqBody = 16,
    kDirProcessRspBody = 17,
    kCliNotifySvrDownloadDataReqBody = 18,
    kCliNotifySvrDownloadDataRspBody = 19,
    kDownloadFileReqBody = 20,
    kDownloadFileRspBody = 21,
    kSvrNotifyCliEndDownloadReqBody = 22,
    kSvrNotifyCliEndDownloadRspBody = 23,
    kStopUploadReqBody = 24,
    kStopUploadRspBody = 25,
    kStopDownloadReqBody = 26,
    kStopDownloadRspBody = 27,
    TRANSMSGBODY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransMessage* internal_default_instance() {
    return reinterpret_cast<const TransMessage*>(
               &_TransMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(TransMessage* other);
  friend void swap(TransMessage& a, TransMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransMessage* New() const final {
    return CreateMaybeMessage<TransMessage>(nullptr);
  }

  TransMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransMessage& from);
  void MergeFrom(const TransMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TransMessageApi_2eproto);
    return ::descriptor_table_TransMessageApi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TransMsgHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::TransMsgHead& head() const;
  ::TransMsgHead* release_head();
  ::TransMsgHead* mutable_head();
  void set_allocated_head(::TransMsgHead* head);

  // .TransMsgLoginReqBody login_req_body = 2;
  bool has_login_req_body() const;
  void clear_login_req_body();
  static const int kLoginReqBodyFieldNumber = 2;
  const ::TransMsgLoginReqBody& login_req_body() const;
  ::TransMsgLoginReqBody* release_login_req_body();
  ::TransMsgLoginReqBody* mutable_login_req_body();
  void set_allocated_login_req_body(::TransMsgLoginReqBody* login_req_body);

  // .TransMsgLoginRspBody login_rsp_body = 3;
  bool has_login_rsp_body() const;
  void clear_login_rsp_body();
  static const int kLoginRspBodyFieldNumber = 3;
  const ::TransMsgLoginRspBody& login_rsp_body() const;
  ::TransMsgLoginRspBody* release_login_rsp_body();
  ::TransMsgLoginRspBody* mutable_login_rsp_body();
  void set_allocated_login_rsp_body(::TransMsgLoginRspBody* login_rsp_body);

  // .TransMsgLogoutReqBody logout_req_body = 4;
  bool has_logout_req_body() const;
  void clear_logout_req_body();
  static const int kLogoutReqBodyFieldNumber = 4;
  const ::TransMsgLogoutReqBody& logout_req_body() const;
  ::TransMsgLogoutReqBody* release_logout_req_body();
  ::TransMsgLogoutReqBody* mutable_logout_req_body();
  void set_allocated_logout_req_body(::TransMsgLogoutReqBody* logout_req_body);

  // .TransMsgLogoutRspBody logout_rsp_body = 5;
  bool has_logout_rsp_body() const;
  void clear_logout_rsp_body();
  static const int kLogoutRspBodyFieldNumber = 5;
  const ::TransMsgLogoutRspBody& logout_rsp_body() const;
  ::TransMsgLogoutRspBody* release_logout_rsp_body();
  ::TransMsgLogoutRspBody* mutable_logout_rsp_body();
  void set_allocated_logout_rsp_body(::TransMsgLogoutRspBody* logout_rsp_body);

  // .TransMsgUploadFileReqBody upload_file_req_body = 6;
  bool has_upload_file_req_body() const;
  void clear_upload_file_req_body();
  static const int kUploadFileReqBodyFieldNumber = 6;
  const ::TransMsgUploadFileReqBody& upload_file_req_body() const;
  ::TransMsgUploadFileReqBody* release_upload_file_req_body();
  ::TransMsgUploadFileReqBody* mutable_upload_file_req_body();
  void set_allocated_upload_file_req_body(::TransMsgUploadFileReqBody* upload_file_req_body);

  // .TransMsgUploadFileRspBody upload_file_rsp_body = 7;
  bool has_upload_file_rsp_body() const;
  void clear_upload_file_rsp_body();
  static const int kUploadFileRspBodyFieldNumber = 7;
  const ::TransMsgUploadFileRspBody& upload_file_rsp_body() const;
  ::TransMsgUploadFileRspBody* release_upload_file_rsp_body();
  ::TransMsgUploadFileRspBody* mutable_upload_file_rsp_body();
  void set_allocated_upload_file_rsp_body(::TransMsgUploadFileRspBody* upload_file_rsp_body);

  // .TransMsgSendDataReqBody send_data_req_body = 8;
  bool has_send_data_req_body() const;
  void clear_send_data_req_body();
  static const int kSendDataReqBodyFieldNumber = 8;
  const ::TransMsgSendDataReqBody& send_data_req_body() const;
  ::TransMsgSendDataReqBody* release_send_data_req_body();
  ::TransMsgSendDataReqBody* mutable_send_data_req_body();
  void set_allocated_send_data_req_body(::TransMsgSendDataReqBody* send_data_req_body);

  // .TransMsgResendDataNotifiReqBody resend_data_notifi_req_body = 9;
  bool has_resend_data_notifi_req_body() const;
  void clear_resend_data_notifi_req_body();
  static const int kResendDataNotifiReqBodyFieldNumber = 9;
  const ::TransMsgResendDataNotifiReqBody& resend_data_notifi_req_body() const;
  ::TransMsgResendDataNotifiReqBody* release_resend_data_notifi_req_body();
  ::TransMsgResendDataNotifiReqBody* mutable_resend_data_notifi_req_body();
  void set_allocated_resend_data_notifi_req_body(::TransMsgResendDataNotifiReqBody* resend_data_notifi_req_body);

  // .TransMsgResendDataNotifiRspBody resend_data_notifi_rsp_body = 10;
  bool has_resend_data_notifi_rsp_body() const;
  void clear_resend_data_notifi_rsp_body();
  static const int kResendDataNotifiRspBodyFieldNumber = 10;
  const ::TransMsgResendDataNotifiRspBody& resend_data_notifi_rsp_body() const;
  ::TransMsgResendDataNotifiRspBody* release_resend_data_notifi_rsp_body();
  ::TransMsgResendDataNotifiRspBody* mutable_resend_data_notifi_rsp_body();
  void set_allocated_resend_data_notifi_rsp_body(::TransMsgResendDataNotifiRspBody* resend_data_notifi_rsp_body);

  // .TransMsgFinishNotifiReqBody finish_notifi_req_body = 11;
  bool has_finish_notifi_req_body() const;
  void clear_finish_notifi_req_body();
  static const int kFinishNotifiReqBodyFieldNumber = 11;
  const ::TransMsgFinishNotifiReqBody& finish_notifi_req_body() const;
  ::TransMsgFinishNotifiReqBody* release_finish_notifi_req_body();
  ::TransMsgFinishNotifiReqBody* mutable_finish_notifi_req_body();
  void set_allocated_finish_notifi_req_body(::TransMsgFinishNotifiReqBody* finish_notifi_req_body);

  // .TransMsgFinishNotifiRspBody finish_notifi_rsp_body = 12;
  bool has_finish_notifi_rsp_body() const;
  void clear_finish_notifi_rsp_body();
  static const int kFinishNotifiRspBodyFieldNumber = 12;
  const ::TransMsgFinishNotifiRspBody& finish_notifi_rsp_body() const;
  ::TransMsgFinishNotifiRspBody* release_finish_notifi_rsp_body();
  ::TransMsgFinishNotifiRspBody* mutable_finish_notifi_rsp_body();
  void set_allocated_finish_notifi_rsp_body(::TransMsgFinishNotifiRspBody* finish_notifi_rsp_body);

  // .TransMsgHeartbeatReqBody heartbeat_req_body = 13;
  bool has_heartbeat_req_body() const;
  void clear_heartbeat_req_body();
  static const int kHeartbeatReqBodyFieldNumber = 13;
  const ::TransMsgHeartbeatReqBody& heartbeat_req_body() const;
  ::TransMsgHeartbeatReqBody* release_heartbeat_req_body();
  ::TransMsgHeartbeatReqBody* mutable_heartbeat_req_body();
  void set_allocated_heartbeat_req_body(::TransMsgHeartbeatReqBody* heartbeat_req_body);

  // .TransMsgHeartbeatRspBody heartbeat_rsp_body = 14;
  bool has_heartbeat_rsp_body() const;
  void clear_heartbeat_rsp_body();
  static const int kHeartbeatRspBodyFieldNumber = 14;
  const ::TransMsgHeartbeatRspBody& heartbeat_rsp_body() const;
  ::TransMsgHeartbeatRspBody* release_heartbeat_rsp_body();
  ::TransMsgHeartbeatRspBody* mutable_heartbeat_rsp_body();
  void set_allocated_heartbeat_rsp_body(::TransMsgHeartbeatRspBody* heartbeat_rsp_body);

  // .TransMsgSendDataReqBody resend_data_req_body = 15;
  bool has_resend_data_req_body() const;
  void clear_resend_data_req_body();
  static const int kResendDataReqBodyFieldNumber = 15;
  const ::TransMsgSendDataReqBody& resend_data_req_body() const;
  ::TransMsgSendDataReqBody* release_resend_data_req_body();
  ::TransMsgSendDataReqBody* mutable_resend_data_req_body();
  void set_allocated_resend_data_req_body(::TransMsgSendDataReqBody* resend_data_req_body);

  // .TransMsgDirProcessReqBody dir_process_req_body = 16;
  bool has_dir_process_req_body() const;
  void clear_dir_process_req_body();
  static const int kDirProcessReqBodyFieldNumber = 16;
  const ::TransMsgDirProcessReqBody& dir_process_req_body() const;
  ::TransMsgDirProcessReqBody* release_dir_process_req_body();
  ::TransMsgDirProcessReqBody* mutable_dir_process_req_body();
  void set_allocated_dir_process_req_body(::TransMsgDirProcessReqBody* dir_process_req_body);

  // .TransMsgDirProcessRspBody dir_process_rsp_body = 17;
  bool has_dir_process_rsp_body() const;
  void clear_dir_process_rsp_body();
  static const int kDirProcessRspBodyFieldNumber = 17;
  const ::TransMsgDirProcessRspBody& dir_process_rsp_body() const;
  ::TransMsgDirProcessRspBody* release_dir_process_rsp_body();
  ::TransMsgDirProcessRspBody* mutable_dir_process_rsp_body();
  void set_allocated_dir_process_rsp_body(::TransMsgDirProcessRspBody* dir_process_rsp_body);

  // .TransMsgCliNotifySvrDownloadDataReqBody cli_notify_svr_download_data_req_body = 18;
  bool has_cli_notify_svr_download_data_req_body() const;
  void clear_cli_notify_svr_download_data_req_body();
  static const int kCliNotifySvrDownloadDataReqBodyFieldNumber = 18;
  const ::TransMsgCliNotifySvrDownloadDataReqBody& cli_notify_svr_download_data_req_body() const;
  ::TransMsgCliNotifySvrDownloadDataReqBody* release_cli_notify_svr_download_data_req_body();
  ::TransMsgCliNotifySvrDownloadDataReqBody* mutable_cli_notify_svr_download_data_req_body();
  void set_allocated_cli_notify_svr_download_data_req_body(::TransMsgCliNotifySvrDownloadDataReqBody* cli_notify_svr_download_data_req_body);

  // .TransMsgCliNotifySvrDownloadDataRspBody cli_notify_svr_download_data_rsp_body = 19;
  bool has_cli_notify_svr_download_data_rsp_body() const;
  void clear_cli_notify_svr_download_data_rsp_body();
  static const int kCliNotifySvrDownloadDataRspBodyFieldNumber = 19;
  const ::TransMsgCliNotifySvrDownloadDataRspBody& cli_notify_svr_download_data_rsp_body() const;
  ::TransMsgCliNotifySvrDownloadDataRspBody* release_cli_notify_svr_download_data_rsp_body();
  ::TransMsgCliNotifySvrDownloadDataRspBody* mutable_cli_notify_svr_download_data_rsp_body();
  void set_allocated_cli_notify_svr_download_data_rsp_body(::TransMsgCliNotifySvrDownloadDataRspBody* cli_notify_svr_download_data_rsp_body);

  // .TransMsgDownloadFileReqBody download_file_req_body = 20;
  bool has_download_file_req_body() const;
  void clear_download_file_req_body();
  static const int kDownloadFileReqBodyFieldNumber = 20;
  const ::TransMsgDownloadFileReqBody& download_file_req_body() const;
  ::TransMsgDownloadFileReqBody* release_download_file_req_body();
  ::TransMsgDownloadFileReqBody* mutable_download_file_req_body();
  void set_allocated_download_file_req_body(::TransMsgDownloadFileReqBody* download_file_req_body);

  // .TransMsgDownloadFileRspBody download_file_rsp_body = 21;
  bool has_download_file_rsp_body() const;
  void clear_download_file_rsp_body();
  static const int kDownloadFileRspBodyFieldNumber = 21;
  const ::TransMsgDownloadFileRspBody& download_file_rsp_body() const;
  ::TransMsgDownloadFileRspBody* release_download_file_rsp_body();
  ::TransMsgDownloadFileRspBody* mutable_download_file_rsp_body();
  void set_allocated_download_file_rsp_body(::TransMsgDownloadFileRspBody* download_file_rsp_body);

  // .TransMsgSvrNotifyCliEndDownloadReqBody svr_notify_cli_end_download_req_body = 22;
  bool has_svr_notify_cli_end_download_req_body() const;
  void clear_svr_notify_cli_end_download_req_body();
  static const int kSvrNotifyCliEndDownloadReqBodyFieldNumber = 22;
  const ::TransMsgSvrNotifyCliEndDownloadReqBody& svr_notify_cli_end_download_req_body() const;
  ::TransMsgSvrNotifyCliEndDownloadReqBody* release_svr_notify_cli_end_download_req_body();
  ::TransMsgSvrNotifyCliEndDownloadReqBody* mutable_svr_notify_cli_end_download_req_body();
  void set_allocated_svr_notify_cli_end_download_req_body(::TransMsgSvrNotifyCliEndDownloadReqBody* svr_notify_cli_end_download_req_body);

  // .TransMsgSvrNotifyCliEndDownloadRspBody svr_notify_cli_end_download_rsp_body = 23;
  bool has_svr_notify_cli_end_download_rsp_body() const;
  void clear_svr_notify_cli_end_download_rsp_body();
  static const int kSvrNotifyCliEndDownloadRspBodyFieldNumber = 23;
  const ::TransMsgSvrNotifyCliEndDownloadRspBody& svr_notify_cli_end_download_rsp_body() const;
  ::TransMsgSvrNotifyCliEndDownloadRspBody* release_svr_notify_cli_end_download_rsp_body();
  ::TransMsgSvrNotifyCliEndDownloadRspBody* mutable_svr_notify_cli_end_download_rsp_body();
  void set_allocated_svr_notify_cli_end_download_rsp_body(::TransMsgSvrNotifyCliEndDownloadRspBody* svr_notify_cli_end_download_rsp_body);

  // .TransMsgStopUploadReqBody stop_upload_req_body = 24;
  bool has_stop_upload_req_body() const;
  void clear_stop_upload_req_body();
  static const int kStopUploadReqBodyFieldNumber = 24;
  const ::TransMsgStopUploadReqBody& stop_upload_req_body() const;
  ::TransMsgStopUploadReqBody* release_stop_upload_req_body();
  ::TransMsgStopUploadReqBody* mutable_stop_upload_req_body();
  void set_allocated_stop_upload_req_body(::TransMsgStopUploadReqBody* stop_upload_req_body);

  // .TransMsgStopUploadRspBody stop_upload_rsp_body = 25;
  bool has_stop_upload_rsp_body() const;
  void clear_stop_upload_rsp_body();
  static const int kStopUploadRspBodyFieldNumber = 25;
  const ::TransMsgStopUploadRspBody& stop_upload_rsp_body() const;
  ::TransMsgStopUploadRspBody* release_stop_upload_rsp_body();
  ::TransMsgStopUploadRspBody* mutable_stop_upload_rsp_body();
  void set_allocated_stop_upload_rsp_body(::TransMsgStopUploadRspBody* stop_upload_rsp_body);

  // .TransMsgStopDownloadReqBody stop_download_req_body = 26;
  bool has_stop_download_req_body() const;
  void clear_stop_download_req_body();
  static const int kStopDownloadReqBodyFieldNumber = 26;
  const ::TransMsgStopDownloadReqBody& stop_download_req_body() const;
  ::TransMsgStopDownloadReqBody* release_stop_download_req_body();
  ::TransMsgStopDownloadReqBody* mutable_stop_download_req_body();
  void set_allocated_stop_download_req_body(::TransMsgStopDownloadReqBody* stop_download_req_body);

  // .TransMsgStopUploadRspBody stop_download_rsp_body = 27;
  bool has_stop_download_rsp_body() const;
  void clear_stop_download_rsp_body();
  static const int kStopDownloadRspBodyFieldNumber = 27;
  const ::TransMsgStopUploadRspBody& stop_download_rsp_body() const;
  ::TransMsgStopUploadRspBody* release_stop_download_rsp_body();
  ::TransMsgStopUploadRspBody* mutable_stop_download_rsp_body();
  void set_allocated_stop_download_rsp_body(::TransMsgStopUploadRspBody* stop_download_rsp_body);

  void clear_TransMsgBody();
  TransMsgBodyCase TransMsgBody_case() const;
  // @@protoc_insertion_point(class_scope:TransMessage)
 private:
  class HasBitSetters;
  void set_has_login_req_body();
  void set_has_login_rsp_body();
  void set_has_logout_req_body();
  void set_has_logout_rsp_body();
  void set_has_upload_file_req_body();
  void set_has_upload_file_rsp_body();
  void set_has_send_data_req_body();
  void set_has_resend_data_notifi_req_body();
  void set_has_resend_data_notifi_rsp_body();
  void set_has_finish_notifi_req_body();
  void set_has_finish_notifi_rsp_body();
  void set_has_heartbeat_req_body();
  void set_has_heartbeat_rsp_body();
  void set_has_resend_data_req_body();
  void set_has_dir_process_req_body();
  void set_has_dir_process_rsp_body();
  void set_has_cli_notify_svr_download_data_req_body();
  void set_has_cli_notify_svr_download_data_rsp_body();
  void set_has_download_file_req_body();
  void set_has_download_file_rsp_body();
  void set_has_svr_notify_cli_end_download_req_body();
  void set_has_svr_notify_cli_end_download_rsp_body();
  void set_has_stop_upload_req_body();
  void set_has_stop_upload_rsp_body();
  void set_has_stop_download_req_body();
  void set_has_stop_download_rsp_body();

  inline bool has_TransMsgBody() const;
  inline void clear_has_TransMsgBody();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::TransMsgHead* head_;
  union TransMsgBodyUnion {
    TransMsgBodyUnion() {}
    ::TransMsgLoginReqBody* login_req_body_;
    ::TransMsgLoginRspBody* login_rsp_body_;
    ::TransMsgLogoutReqBody* logout_req_body_;
    ::TransMsgLogoutRspBody* logout_rsp_body_;
    ::TransMsgUploadFileReqBody* upload_file_req_body_;
    ::TransMsgUploadFileRspBody* upload_file_rsp_body_;
    ::TransMsgSendDataReqBody* send_data_req_body_;
    ::TransMsgResendDataNotifiReqBody* resend_data_notifi_req_body_;
    ::TransMsgResendDataNotifiRspBody* resend_data_notifi_rsp_body_;
    ::TransMsgFinishNotifiReqBody* finish_notifi_req_body_;
    ::TransMsgFinishNotifiRspBody* finish_notifi_rsp_body_;
    ::TransMsgHeartbeatReqBody* heartbeat_req_body_;
    ::TransMsgHeartbeatRspBody* heartbeat_rsp_body_;
    ::TransMsgSendDataReqBody* resend_data_req_body_;
    ::TransMsgDirProcessReqBody* dir_process_req_body_;
    ::TransMsgDirProcessRspBody* dir_process_rsp_body_;
    ::TransMsgCliNotifySvrDownloadDataReqBody* cli_notify_svr_download_data_req_body_;
    ::TransMsgCliNotifySvrDownloadDataRspBody* cli_notify_svr_download_data_rsp_body_;
    ::TransMsgDownloadFileReqBody* download_file_req_body_;
    ::TransMsgDownloadFileRspBody* download_file_rsp_body_;
    ::TransMsgSvrNotifyCliEndDownloadReqBody* svr_notify_cli_end_download_req_body_;
    ::TransMsgSvrNotifyCliEndDownloadRspBody* svr_notify_cli_end_download_rsp_body_;
    ::TransMsgStopUploadReqBody* stop_upload_req_body_;
    ::TransMsgStopUploadRspBody* stop_upload_rsp_body_;
    ::TransMsgStopDownloadReqBody* stop_download_req_body_;
    ::TransMsgStopUploadRspBody* stop_download_rsp_body_;
  } TransMsgBody_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_TransMessageApi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TransMsgHead

// string msg_name = 1;
inline void TransMsgHead::clear_msg_name() {
  msg_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgHead::msg_name() const {
  // @@protoc_insertion_point(field_get:TransMsgHead.msg_name)
  return msg_name_.GetNoArena();
}
inline void TransMsgHead::set_msg_name(const std::string& value) {
  
  msg_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgHead.msg_name)
}
inline void TransMsgHead::set_msg_name(std::string&& value) {
  
  msg_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgHead.msg_name)
}
inline void TransMsgHead::set_msg_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgHead.msg_name)
}
inline void TransMsgHead::set_msg_name(const char* value, size_t size) {
  
  msg_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgHead.msg_name)
}
inline std::string* TransMsgHead::mutable_msg_name() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgHead.msg_name)
  return msg_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgHead::release_msg_name() {
  // @@protoc_insertion_point(field_release:TransMsgHead.msg_name)
  
  return msg_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgHead::set_allocated_msg_name(std::string* msg_name) {
  if (msg_name != nullptr) {
    
  } else {
    
  }
  msg_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_name);
  // @@protoc_insertion_point(field_set_allocated:TransMsgHead.msg_name)
}

// uint64 timestamp = 2;
inline void TransMsgHead::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgHead::timestamp() const {
  // @@protoc_insertion_point(field_get:TransMsgHead.timestamp)
  return timestamp_;
}
inline void TransMsgHead::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TransMsgHead.timestamp)
}

// int32 magic = 3;
inline void TransMsgHead::clear_magic() {
  magic_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgHead::magic() const {
  // @@protoc_insertion_point(field_get:TransMsgHead.magic)
  return magic_;
}
inline void TransMsgHead::set_magic(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:TransMsgHead.magic)
}

// string nonce = 4;
inline void TransMsgHead::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgHead::nonce() const {
  // @@protoc_insertion_point(field_get:TransMsgHead.nonce)
  return nonce_.GetNoArena();
}
inline void TransMsgHead::set_nonce(const std::string& value) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgHead.nonce)
}
inline void TransMsgHead::set_nonce(std::string&& value) {
  
  nonce_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgHead.nonce)
}
inline void TransMsgHead::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgHead.nonce)
}
inline void TransMsgHead::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgHead.nonce)
}
inline std::string* TransMsgHead::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgHead.nonce)
  return nonce_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgHead::release_nonce() {
  // @@protoc_insertion_point(field_release:TransMsgHead.nonce)
  
  return nonce_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgHead::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:TransMsgHead.nonce)
}

// string session_id = 5;
inline void TransMsgHead::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgHead::session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgHead.session_id)
  return session_id_.GetNoArena();
}
inline void TransMsgHead::set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgHead.session_id)
}
inline void TransMsgHead::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgHead.session_id)
}
inline void TransMsgHead::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgHead.session_id)
}
inline void TransMsgHead::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgHead.session_id)
}
inline std::string* TransMsgHead::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgHead.session_id)
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgHead::release_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgHead.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgHead::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgHead.session_id)
}

// string sign = 6;
inline void TransMsgHead::clear_sign() {
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgHead::sign() const {
  // @@protoc_insertion_point(field_get:TransMsgHead.sign)
  return sign_.GetNoArena();
}
inline void TransMsgHead::set_sign(const std::string& value) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgHead.sign)
}
inline void TransMsgHead::set_sign(std::string&& value) {
  
  sign_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgHead.sign)
}
inline void TransMsgHead::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgHead.sign)
}
inline void TransMsgHead::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgHead.sign)
}
inline std::string* TransMsgHead::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgHead.sign)
  return sign_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgHead::release_sign() {
  // @@protoc_insertion_point(field_release:TransMsgHead.sign)
  
  return sign_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgHead::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:TransMsgHead.sign)
}

// map<string, string> exten_info = 7;
inline int TransMsgHead::exten_info_size() const {
  return exten_info_.size();
}
inline void TransMsgHead::clear_exten_info() {
  exten_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TransMsgHead::exten_info() const {
  // @@protoc_insertion_point(field_map:TransMsgHead.exten_info)
  return exten_info_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TransMsgHead::mutable_exten_info() {
  // @@protoc_insertion_point(field_mutable_map:TransMsgHead.exten_info)
  return exten_info_.MutableMap();
}

// -------------------------------------------------------------------

// TransMsgLoginReqBody

// string node_id = 1;
inline void TransMsgLoginReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgLoginReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgLoginReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgLoginReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgLoginReqBody.node_id)
}
inline void TransMsgLoginReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgLoginReqBody.node_id)
}
inline void TransMsgLoginReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgLoginReqBody.node_id)
}
inline void TransMsgLoginReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgLoginReqBody.node_id)
}
inline std::string* TransMsgLoginReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgLoginReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgLoginReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgLoginReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgLoginReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgLoginReqBody.node_id)
}

// string version = 2;
inline void TransMsgLoginReqBody::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgLoginReqBody::version() const {
  // @@protoc_insertion_point(field_get:TransMsgLoginReqBody.version)
  return version_.GetNoArena();
}
inline void TransMsgLoginReqBody::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgLoginReqBody.version)
}
inline void TransMsgLoginReqBody::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgLoginReqBody.version)
}
inline void TransMsgLoginReqBody::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgLoginReqBody.version)
}
inline void TransMsgLoginReqBody::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgLoginReqBody.version)
}
inline std::string* TransMsgLoginReqBody::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgLoginReqBody.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgLoginReqBody::release_version() {
  // @@protoc_insertion_point(field_release:TransMsgLoginReqBody.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgLoginReqBody::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TransMsgLoginReqBody.version)
}

// -------------------------------------------------------------------

// TransMsgLoginRspBody

// int32 status = 1;
inline void TransMsgLoginRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgLoginRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgLoginRspBody.status)
  return status_;
}
inline void TransMsgLoginRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgLoginRspBody.status)
}

// -------------------------------------------------------------------

// TransMsgHeartbeatReqBody

// string node_id = 1;
inline void TransMsgHeartbeatReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgHeartbeatReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgHeartbeatReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgHeartbeatReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgHeartbeatReqBody.node_id)
}
inline void TransMsgHeartbeatReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgHeartbeatReqBody.node_id)
}
inline void TransMsgHeartbeatReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgHeartbeatReqBody.node_id)
}
inline void TransMsgHeartbeatReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgHeartbeatReqBody.node_id)
}
inline std::string* TransMsgHeartbeatReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgHeartbeatReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgHeartbeatReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgHeartbeatReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgHeartbeatReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgHeartbeatReqBody.node_id)
}

// -------------------------------------------------------------------

// TransMsgHeartbeatRspBody

// int32 status = 1;
inline void TransMsgHeartbeatRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgHeartbeatRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgHeartbeatRspBody.status)
  return status_;
}
inline void TransMsgHeartbeatRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgHeartbeatRspBody.status)
}

// -------------------------------------------------------------------

// TransMsgLogoutReqBody

// string node_id = 1;
inline void TransMsgLogoutReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgLogoutReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgLogoutReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgLogoutReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgLogoutReqBody.node_id)
}
inline void TransMsgLogoutReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgLogoutReqBody.node_id)
}
inline void TransMsgLogoutReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgLogoutReqBody.node_id)
}
inline void TransMsgLogoutReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgLogoutReqBody.node_id)
}
inline std::string* TransMsgLogoutReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgLogoutReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgLogoutReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgLogoutReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgLogoutReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgLogoutReqBody.node_id)
}

// -------------------------------------------------------------------

// TransMsgLogoutRspBody

// int32 status = 1;
inline void TransMsgLogoutRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgLogoutRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgLogoutRspBody.status)
  return status_;
}
inline void TransMsgLogoutRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgLogoutRspBody.status)
}

// -------------------------------------------------------------------

// TransMsgSendDataReqBody

// string node_id = 1;
inline void TransMsgSendDataReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgSendDataReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgSendDataReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgSendDataReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgSendDataReqBody.node_id)
}
inline void TransMsgSendDataReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgSendDataReqBody.node_id)
}
inline void TransMsgSendDataReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgSendDataReqBody.node_id)
}
inline void TransMsgSendDataReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgSendDataReqBody.node_id)
}
inline std::string* TransMsgSendDataReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgSendDataReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgSendDataReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgSendDataReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgSendDataReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgSendDataReqBody.node_id)
}

// string trans_session_id = 2;
inline void TransMsgSendDataReqBody::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgSendDataReqBody::trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgSendDataReqBody.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void TransMsgSendDataReqBody::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgSendDataReqBody.trans_session_id)
}
inline void TransMsgSendDataReqBody::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgSendDataReqBody.trans_session_id)
}
inline void TransMsgSendDataReqBody::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgSendDataReqBody.trans_session_id)
}
inline void TransMsgSendDataReqBody::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgSendDataReqBody.trans_session_id)
}
inline std::string* TransMsgSendDataReqBody::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgSendDataReqBody.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgSendDataReqBody::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgSendDataReqBody.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgSendDataReqBody::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgSendDataReqBody.trans_session_id)
}

// uint64 file_block_num = 3;
inline void TransMsgSendDataReqBody::clear_file_block_num() {
  file_block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgSendDataReqBody::file_block_num() const {
  // @@protoc_insertion_point(field_get:TransMsgSendDataReqBody.file_block_num)
  return file_block_num_;
}
inline void TransMsgSendDataReqBody::set_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_block_num_ = value;
  // @@protoc_insertion_point(field_set:TransMsgSendDataReqBody.file_block_num)
}

// bytes file_block_data = 4;
inline void TransMsgSendDataReqBody::clear_file_block_data() {
  file_block_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgSendDataReqBody::file_block_data() const {
  // @@protoc_insertion_point(field_get:TransMsgSendDataReqBody.file_block_data)
  return file_block_data_.GetNoArena();
}
inline void TransMsgSendDataReqBody::set_file_block_data(const std::string& value) {
  
  file_block_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgSendDataReqBody.file_block_data)
}
inline void TransMsgSendDataReqBody::set_file_block_data(std::string&& value) {
  
  file_block_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgSendDataReqBody.file_block_data)
}
inline void TransMsgSendDataReqBody::set_file_block_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_block_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgSendDataReqBody.file_block_data)
}
inline void TransMsgSendDataReqBody::set_file_block_data(const void* value, size_t size) {
  
  file_block_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgSendDataReqBody.file_block_data)
}
inline std::string* TransMsgSendDataReqBody::mutable_file_block_data() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgSendDataReqBody.file_block_data)
  return file_block_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgSendDataReqBody::release_file_block_data() {
  // @@protoc_insertion_point(field_release:TransMsgSendDataReqBody.file_block_data)
  
  return file_block_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgSendDataReqBody::set_allocated_file_block_data(std::string* file_block_data) {
  if (file_block_data != nullptr) {
    
  } else {
    
  }
  file_block_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_block_data);
  // @@protoc_insertion_point(field_set_allocated:TransMsgSendDataReqBody.file_block_data)
}

// uint64 block_hash = 5;
inline void TransMsgSendDataReqBody::clear_block_hash() {
  block_hash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgSendDataReqBody::block_hash() const {
  // @@protoc_insertion_point(field_get:TransMsgSendDataReqBody.block_hash)
  return block_hash_;
}
inline void TransMsgSendDataReqBody::set_block_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_hash_ = value;
  // @@protoc_insertion_point(field_set:TransMsgSendDataReqBody.block_hash)
}

// uint64 file_hash = 6;
inline void TransMsgSendDataReqBody::clear_file_hash() {
  file_hash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgSendDataReqBody::file_hash() const {
  // @@protoc_insertion_point(field_get:TransMsgSendDataReqBody.file_hash)
  return file_hash_;
}
inline void TransMsgSendDataReqBody::set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_hash_ = value;
  // @@protoc_insertion_point(field_set:TransMsgSendDataReqBody.file_hash)
}

// uint64 resend_notifi_timestamp = 7;
inline void TransMsgSendDataReqBody::clear_resend_notifi_timestamp() {
  resend_notifi_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgSendDataReqBody::resend_notifi_timestamp() const {
  // @@protoc_insertion_point(field_get:TransMsgSendDataReqBody.resend_notifi_timestamp)
  return resend_notifi_timestamp_;
}
inline void TransMsgSendDataReqBody::set_resend_notifi_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  resend_notifi_timestamp_ = value;
  // @@protoc_insertion_point(field_set:TransMsgSendDataReqBody.resend_notifi_timestamp)
}

// -------------------------------------------------------------------

// TransMsgResendDataNotifiReqBody

// string node_id = 1;
inline void TransMsgResendDataNotifiReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgResendDataNotifiReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgResendDataNotifiReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiReqBody.node_id)
}
inline void TransMsgResendDataNotifiReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgResendDataNotifiReqBody.node_id)
}
inline void TransMsgResendDataNotifiReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgResendDataNotifiReqBody.node_id)
}
inline void TransMsgResendDataNotifiReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgResendDataNotifiReqBody.node_id)
}
inline std::string* TransMsgResendDataNotifiReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgResendDataNotifiReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgResendDataNotifiReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgResendDataNotifiReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgResendDataNotifiReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgResendDataNotifiReqBody.node_id)
}

// string trans_session_id = 2;
inline void TransMsgResendDataNotifiReqBody::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgResendDataNotifiReqBody::trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiReqBody.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void TransMsgResendDataNotifiReqBody::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiReqBody.trans_session_id)
}
inline void TransMsgResendDataNotifiReqBody::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgResendDataNotifiReqBody.trans_session_id)
}
inline void TransMsgResendDataNotifiReqBody::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgResendDataNotifiReqBody.trans_session_id)
}
inline void TransMsgResendDataNotifiReqBody::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgResendDataNotifiReqBody.trans_session_id)
}
inline std::string* TransMsgResendDataNotifiReqBody::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgResendDataNotifiReqBody.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgResendDataNotifiReqBody::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgResendDataNotifiReqBody.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgResendDataNotifiReqBody::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgResendDataNotifiReqBody.trans_session_id)
}

// uint64 resend_notifi_timestamp = 3;
inline void TransMsgResendDataNotifiReqBody::clear_resend_notifi_timestamp() {
  resend_notifi_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgResendDataNotifiReqBody::resend_notifi_timestamp() const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiReqBody.resend_notifi_timestamp)
  return resend_notifi_timestamp_;
}
inline void TransMsgResendDataNotifiReqBody::set_resend_notifi_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  resend_notifi_timestamp_ = value;
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiReqBody.resend_notifi_timestamp)
}

// int32 group_total_packet_count = 4;
inline void TransMsgResendDataNotifiReqBody::clear_group_total_packet_count() {
  group_total_packet_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgResendDataNotifiReqBody::group_total_packet_count() const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiReqBody.group_total_packet_count)
  return group_total_packet_count_;
}
inline void TransMsgResendDataNotifiReqBody::set_group_total_packet_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_total_packet_count_ = value;
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiReqBody.group_total_packet_count)
}

// int32 group_packet_num = 5;
inline void TransMsgResendDataNotifiReqBody::clear_group_packet_num() {
  group_packet_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgResendDataNotifiReqBody::group_packet_num() const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiReqBody.group_packet_num)
  return group_packet_num_;
}
inline void TransMsgResendDataNotifiReqBody::set_group_packet_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_packet_num_ = value;
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiReqBody.group_packet_num)
}

// uint64 max_received_file_block_num = 6;
inline void TransMsgResendDataNotifiReqBody::clear_max_received_file_block_num() {
  max_received_file_block_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgResendDataNotifiReqBody::max_received_file_block_num() const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiReqBody.max_received_file_block_num)
  return max_received_file_block_num_;
}
inline void TransMsgResendDataNotifiReqBody::set_max_received_file_block_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_received_file_block_num_ = value;
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiReqBody.max_received_file_block_num)
}

// uint64 received_file_blocks_count = 7;
inline void TransMsgResendDataNotifiReqBody::clear_received_file_blocks_count() {
  received_file_blocks_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgResendDataNotifiReqBody::received_file_blocks_count() const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiReqBody.received_file_blocks_count)
  return received_file_blocks_count_;
}
inline void TransMsgResendDataNotifiReqBody::set_received_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  received_file_blocks_count_ = value;
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiReqBody.received_file_blocks_count)
}

// repeated uint64 resend_block_list = 8;
inline int TransMsgResendDataNotifiReqBody::resend_block_list_size() const {
  return resend_block_list_.size();
}
inline void TransMsgResendDataNotifiReqBody::clear_resend_block_list() {
  resend_block_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgResendDataNotifiReqBody::resend_block_list(int index) const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiReqBody.resend_block_list)
  return resend_block_list_.Get(index);
}
inline void TransMsgResendDataNotifiReqBody::set_resend_block_list(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  resend_block_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiReqBody.resend_block_list)
}
inline void TransMsgResendDataNotifiReqBody::add_resend_block_list(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  resend_block_list_.Add(value);
  // @@protoc_insertion_point(field_add:TransMsgResendDataNotifiReqBody.resend_block_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TransMsgResendDataNotifiReqBody::resend_block_list() const {
  // @@protoc_insertion_point(field_list:TransMsgResendDataNotifiReqBody.resend_block_list)
  return resend_block_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TransMsgResendDataNotifiReqBody::mutable_resend_block_list() {
  // @@protoc_insertion_point(field_mutable_list:TransMsgResendDataNotifiReqBody.resend_block_list)
  return &resend_block_list_;
}

// -------------------------------------------------------------------

// TransMsgResendDataNotifiRspBody

// int32 status = 1;
inline void TransMsgResendDataNotifiRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgResendDataNotifiRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiRspBody.status)
  return status_;
}
inline void TransMsgResendDataNotifiRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiRspBody.status)
}

// int64 process_times = 2;
inline void TransMsgResendDataNotifiRspBody::clear_process_times() {
  process_times_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransMsgResendDataNotifiRspBody::process_times() const {
  // @@protoc_insertion_point(field_get:TransMsgResendDataNotifiRspBody.process_times)
  return process_times_;
}
inline void TransMsgResendDataNotifiRspBody::set_process_times(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  process_times_ = value;
  // @@protoc_insertion_point(field_set:TransMsgResendDataNotifiRspBody.process_times)
}

// -------------------------------------------------------------------

// TransMsgFinishNotifiReqBody

// string node_id = 1;
inline void TransMsgFinishNotifiReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgFinishNotifiReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgFinishNotifiReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgFinishNotifiReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgFinishNotifiReqBody.node_id)
}
inline void TransMsgFinishNotifiReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgFinishNotifiReqBody.node_id)
}
inline void TransMsgFinishNotifiReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgFinishNotifiReqBody.node_id)
}
inline void TransMsgFinishNotifiReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgFinishNotifiReqBody.node_id)
}
inline std::string* TransMsgFinishNotifiReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgFinishNotifiReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgFinishNotifiReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgFinishNotifiReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgFinishNotifiReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgFinishNotifiReqBody.node_id)
}

// string trans_session_id = 2;
inline void TransMsgFinishNotifiReqBody::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgFinishNotifiReqBody::trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgFinishNotifiReqBody.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void TransMsgFinishNotifiReqBody::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgFinishNotifiReqBody.trans_session_id)
}
inline void TransMsgFinishNotifiReqBody::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgFinishNotifiReqBody.trans_session_id)
}
inline void TransMsgFinishNotifiReqBody::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgFinishNotifiReqBody.trans_session_id)
}
inline void TransMsgFinishNotifiReqBody::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgFinishNotifiReqBody.trans_session_id)
}
inline std::string* TransMsgFinishNotifiReqBody::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgFinishNotifiReqBody.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgFinishNotifiReqBody::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgFinishNotifiReqBody.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgFinishNotifiReqBody::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgFinishNotifiReqBody.trans_session_id)
}

// -------------------------------------------------------------------

// TransMsgFinishNotifiRspBody

// int32 status = 1;
inline void TransMsgFinishNotifiRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgFinishNotifiRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgFinishNotifiRspBody.status)
  return status_;
}
inline void TransMsgFinishNotifiRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgFinishNotifiRspBody.status)
}

// string trans_session_id = 2;
inline void TransMsgFinishNotifiRspBody::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgFinishNotifiRspBody::trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgFinishNotifiRspBody.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void TransMsgFinishNotifiRspBody::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgFinishNotifiRspBody.trans_session_id)
}
inline void TransMsgFinishNotifiRspBody::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgFinishNotifiRspBody.trans_session_id)
}
inline void TransMsgFinishNotifiRspBody::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgFinishNotifiRspBody.trans_session_id)
}
inline void TransMsgFinishNotifiRspBody::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgFinishNotifiRspBody.trans_session_id)
}
inline std::string* TransMsgFinishNotifiRspBody::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgFinishNotifiRspBody.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgFinishNotifiRspBody::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgFinishNotifiRspBody.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgFinishNotifiRspBody::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgFinishNotifiRspBody.trans_session_id)
}

// -------------------------------------------------------------------

// TransMsgDirProcessReqBody

// string node_id = 1;
inline void TransMsgDirProcessReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDirProcessReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgDirProcessReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgDirProcessReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDirProcessReqBody.node_id)
}
inline void TransMsgDirProcessReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDirProcessReqBody.node_id)
}
inline void TransMsgDirProcessReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDirProcessReqBody.node_id)
}
inline void TransMsgDirProcessReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDirProcessReqBody.node_id)
}
inline std::string* TransMsgDirProcessReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDirProcessReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDirProcessReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgDirProcessReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDirProcessReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDirProcessReqBody.node_id)
}

// string trans_session_id = 2;
inline void TransMsgDirProcessReqBody::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDirProcessReqBody::trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgDirProcessReqBody.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void TransMsgDirProcessReqBody::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDirProcessReqBody.trans_session_id)
}
inline void TransMsgDirProcessReqBody::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDirProcessReqBody.trans_session_id)
}
inline void TransMsgDirProcessReqBody::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDirProcessReqBody.trans_session_id)
}
inline void TransMsgDirProcessReqBody::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDirProcessReqBody.trans_session_id)
}
inline std::string* TransMsgDirProcessReqBody::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDirProcessReqBody.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDirProcessReqBody::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgDirProcessReqBody.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDirProcessReqBody::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDirProcessReqBody.trans_session_id)
}

// int32 process_type = 3;
inline void TransMsgDirProcessReqBody::clear_process_type() {
  process_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgDirProcessReqBody::process_type() const {
  // @@protoc_insertion_point(field_get:TransMsgDirProcessReqBody.process_type)
  return process_type_;
}
inline void TransMsgDirProcessReqBody::set_process_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  process_type_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDirProcessReqBody.process_type)
}

// string remote_path = 4;
inline void TransMsgDirProcessReqBody::clear_remote_path() {
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDirProcessReqBody::remote_path() const {
  // @@protoc_insertion_point(field_get:TransMsgDirProcessReqBody.remote_path)
  return remote_path_.GetNoArena();
}
inline void TransMsgDirProcessReqBody::set_remote_path(const std::string& value) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDirProcessReqBody.remote_path)
}
inline void TransMsgDirProcessReqBody::set_remote_path(std::string&& value) {
  
  remote_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDirProcessReqBody.remote_path)
}
inline void TransMsgDirProcessReqBody::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDirProcessReqBody.remote_path)
}
inline void TransMsgDirProcessReqBody::set_remote_path(const char* value, size_t size) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDirProcessReqBody.remote_path)
}
inline std::string* TransMsgDirProcessReqBody::mutable_remote_path() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDirProcessReqBody.remote_path)
  return remote_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDirProcessReqBody::release_remote_path() {
  // @@protoc_insertion_point(field_release:TransMsgDirProcessReqBody.remote_path)
  
  return remote_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDirProcessReqBody::set_allocated_remote_path(std::string* remote_path) {
  if (remote_path != nullptr) {
    
  } else {
    
  }
  remote_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_path);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDirProcessReqBody.remote_path)
}

// -------------------------------------------------------------------

// TransMsgDirProcessRspBody

// int32 status = 1;
inline void TransMsgDirProcessRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgDirProcessRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgDirProcessRspBody.status)
  return status_;
}
inline void TransMsgDirProcessRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDirProcessRspBody.status)
}

// -------------------------------------------------------------------

// TransMsgUploadFileReqBody

// string node_id = 1;
inline void TransMsgUploadFileReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgUploadFileReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgUploadFileReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.node_id)
}
inline void TransMsgUploadFileReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgUploadFileReqBody.node_id)
}
inline void TransMsgUploadFileReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgUploadFileReqBody.node_id)
}
inline void TransMsgUploadFileReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgUploadFileReqBody.node_id)
}
inline std::string* TransMsgUploadFileReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgUploadFileReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgUploadFileReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgUploadFileReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgUploadFileReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgUploadFileReqBody.node_id)
}

// string usr_trans_id = 2;
inline void TransMsgUploadFileReqBody::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgUploadFileReqBody::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void TransMsgUploadFileReqBody::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.usr_trans_id)
}
inline void TransMsgUploadFileReqBody::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgUploadFileReqBody.usr_trans_id)
}
inline void TransMsgUploadFileReqBody::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgUploadFileReqBody.usr_trans_id)
}
inline void TransMsgUploadFileReqBody::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgUploadFileReqBody.usr_trans_id)
}
inline std::string* TransMsgUploadFileReqBody::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgUploadFileReqBody.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgUploadFileReqBody::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:TransMsgUploadFileReqBody.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgUploadFileReqBody::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgUploadFileReqBody.usr_trans_id)
}

// int32 exchange_type = 3;
inline void TransMsgUploadFileReqBody::clear_exchange_type() {
  exchange_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgUploadFileReqBody::exchange_type() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.exchange_type)
  return exchange_type_;
}
inline void TransMsgUploadFileReqBody::set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_type_ = value;
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.exchange_type)
}

// string remote_path = 4;
inline void TransMsgUploadFileReqBody::clear_remote_path() {
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgUploadFileReqBody::remote_path() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.remote_path)
  return remote_path_.GetNoArena();
}
inline void TransMsgUploadFileReqBody::set_remote_path(const std::string& value) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.remote_path)
}
inline void TransMsgUploadFileReqBody::set_remote_path(std::string&& value) {
  
  remote_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgUploadFileReqBody.remote_path)
}
inline void TransMsgUploadFileReqBody::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgUploadFileReqBody.remote_path)
}
inline void TransMsgUploadFileReqBody::set_remote_path(const char* value, size_t size) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgUploadFileReqBody.remote_path)
}
inline std::string* TransMsgUploadFileReqBody::mutable_remote_path() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgUploadFileReqBody.remote_path)
  return remote_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgUploadFileReqBody::release_remote_path() {
  // @@protoc_insertion_point(field_release:TransMsgUploadFileReqBody.remote_path)
  
  return remote_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgUploadFileReqBody::set_allocated_remote_path(std::string* remote_path) {
  if (remote_path != nullptr) {
    
  } else {
    
  }
  remote_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_path);
  // @@protoc_insertion_point(field_set_allocated:TransMsgUploadFileReqBody.remote_path)
}

// string local_path = 5;
inline void TransMsgUploadFileReqBody::clear_local_path() {
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgUploadFileReqBody::local_path() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.local_path)
  return local_path_.GetNoArena();
}
inline void TransMsgUploadFileReqBody::set_local_path(const std::string& value) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.local_path)
}
inline void TransMsgUploadFileReqBody::set_local_path(std::string&& value) {
  
  local_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgUploadFileReqBody.local_path)
}
inline void TransMsgUploadFileReqBody::set_local_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgUploadFileReqBody.local_path)
}
inline void TransMsgUploadFileReqBody::set_local_path(const char* value, size_t size) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgUploadFileReqBody.local_path)
}
inline std::string* TransMsgUploadFileReqBody::mutable_local_path() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgUploadFileReqBody.local_path)
  return local_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgUploadFileReqBody::release_local_path() {
  // @@protoc_insertion_point(field_release:TransMsgUploadFileReqBody.local_path)
  
  return local_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgUploadFileReqBody::set_allocated_local_path(std::string* local_path) {
  if (local_path != nullptr) {
    
  } else {
    
  }
  local_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_path);
  // @@protoc_insertion_point(field_set_allocated:TransMsgUploadFileReqBody.local_path)
}

// uint64 file_size = 6;
inline void TransMsgUploadFileReqBody::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgUploadFileReqBody::file_size() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.file_size)
  return file_size_;
}
inline void TransMsgUploadFileReqBody::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.file_size)
}

// uint64 total_file_blocks_count = 7;
inline void TransMsgUploadFileReqBody::clear_total_file_blocks_count() {
  total_file_blocks_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgUploadFileReqBody::total_file_blocks_count() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.total_file_blocks_count)
  return total_file_blocks_count_;
}
inline void TransMsgUploadFileReqBody::set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_file_blocks_count_ = value;
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.total_file_blocks_count)
}

// uint64 file_block_size = 8;
inline void TransMsgUploadFileReqBody::clear_file_block_size() {
  file_block_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgUploadFileReqBody::file_block_size() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.file_block_size)
  return file_block_size_;
}
inline void TransMsgUploadFileReqBody::set_file_block_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_block_size_ = value;
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.file_block_size)
}

// uint64 file_block_start_num = 9;
inline void TransMsgUploadFileReqBody::clear_file_block_start_num() {
  file_block_start_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgUploadFileReqBody::file_block_start_num() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.file_block_start_num)
  return file_block_start_num_;
}
inline void TransMsgUploadFileReqBody::set_file_block_start_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_block_start_num_ = value;
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.file_block_start_num)
}

// uint64 file_hash = 10;
inline void TransMsgUploadFileReqBody::clear_file_hash() {
  file_hash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgUploadFileReqBody::file_hash() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.file_hash)
  return file_hash_;
}
inline void TransMsgUploadFileReqBody::set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_hash_ = value;
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.file_hash)
}

// uint64 transfer_rate = 11;
inline void TransMsgUploadFileReqBody::clear_transfer_rate() {
  transfer_rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgUploadFileReqBody::transfer_rate() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileReqBody.transfer_rate)
  return transfer_rate_;
}
inline void TransMsgUploadFileReqBody::set_transfer_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transfer_rate_ = value;
  // @@protoc_insertion_point(field_set:TransMsgUploadFileReqBody.transfer_rate)
}

// -------------------------------------------------------------------

// TransMsgUploadFileRspBody

// int32 status = 1;
inline void TransMsgUploadFileRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgUploadFileRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileRspBody.status)
  return status_;
}
inline void TransMsgUploadFileRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgUploadFileRspBody.status)
}

// string trans_session_id = 2;
inline void TransMsgUploadFileRspBody::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgUploadFileRspBody::trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgUploadFileRspBody.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void TransMsgUploadFileRspBody::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgUploadFileRspBody.trans_session_id)
}
inline void TransMsgUploadFileRspBody::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgUploadFileRspBody.trans_session_id)
}
inline void TransMsgUploadFileRspBody::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgUploadFileRspBody.trans_session_id)
}
inline void TransMsgUploadFileRspBody::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgUploadFileRspBody.trans_session_id)
}
inline std::string* TransMsgUploadFileRspBody::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgUploadFileRspBody.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgUploadFileRspBody::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgUploadFileRspBody.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgUploadFileRspBody::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgUploadFileRspBody.trans_session_id)
}

// -------------------------------------------------------------------

// TransMsgStopUploadReqBody

// string node_id = 1;
inline void TransMsgStopUploadReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgStopUploadReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgStopUploadReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgStopUploadReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgStopUploadReqBody.node_id)
}
inline void TransMsgStopUploadReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgStopUploadReqBody.node_id)
}
inline void TransMsgStopUploadReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgStopUploadReqBody.node_id)
}
inline void TransMsgStopUploadReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgStopUploadReqBody.node_id)
}
inline std::string* TransMsgStopUploadReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgStopUploadReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgStopUploadReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgStopUploadReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgStopUploadReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgStopUploadReqBody.node_id)
}

// string usr_trans_id = 2;
inline void TransMsgStopUploadReqBody::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgStopUploadReqBody::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:TransMsgStopUploadReqBody.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void TransMsgStopUploadReqBody::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgStopUploadReqBody.usr_trans_id)
}
inline void TransMsgStopUploadReqBody::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgStopUploadReqBody.usr_trans_id)
}
inline void TransMsgStopUploadReqBody::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgStopUploadReqBody.usr_trans_id)
}
inline void TransMsgStopUploadReqBody::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgStopUploadReqBody.usr_trans_id)
}
inline std::string* TransMsgStopUploadReqBody::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgStopUploadReqBody.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgStopUploadReqBody::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:TransMsgStopUploadReqBody.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgStopUploadReqBody::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgStopUploadReqBody.usr_trans_id)
}

// string trans_session_id = 3;
inline void TransMsgStopUploadReqBody::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgStopUploadReqBody::trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgStopUploadReqBody.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void TransMsgStopUploadReqBody::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgStopUploadReqBody.trans_session_id)
}
inline void TransMsgStopUploadReqBody::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgStopUploadReqBody.trans_session_id)
}
inline void TransMsgStopUploadReqBody::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgStopUploadReqBody.trans_session_id)
}
inline void TransMsgStopUploadReqBody::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgStopUploadReqBody.trans_session_id)
}
inline std::string* TransMsgStopUploadReqBody::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgStopUploadReqBody.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgStopUploadReqBody::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgStopUploadReqBody.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgStopUploadReqBody::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgStopUploadReqBody.trans_session_id)
}

// -------------------------------------------------------------------

// TransMsgStopUploadRspBody

// int32 status = 1;
inline void TransMsgStopUploadRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgStopUploadRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgStopUploadRspBody.status)
  return status_;
}
inline void TransMsgStopUploadRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgStopUploadRspBody.status)
}

// -------------------------------------------------------------------

// TransMsgCliNotifySvrDownloadDataReqBody

// string node_id = 1;
inline void TransMsgCliNotifySvrDownloadDataReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgCliNotifySvrDownloadDataReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataReqBody.node_id)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgCliNotifySvrDownloadDataReqBody.node_id)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgCliNotifySvrDownloadDataReqBody.node_id)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgCliNotifySvrDownloadDataReqBody.node_id)
}
inline std::string* TransMsgCliNotifySvrDownloadDataReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgCliNotifySvrDownloadDataReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgCliNotifySvrDownloadDataReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgCliNotifySvrDownloadDataReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgCliNotifySvrDownloadDataReqBody.node_id)
}

// string usr_trans_id = 2;
inline void TransMsgCliNotifySvrDownloadDataReqBody::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgCliNotifySvrDownloadDataReqBody::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id)
}
inline std::string* TransMsgCliNotifySvrDownloadDataReqBody::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgCliNotifySvrDownloadDataReqBody::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgCliNotifySvrDownloadDataReqBody.usr_trans_id)
}

// int32 exchange_type = 3;
inline void TransMsgCliNotifySvrDownloadDataReqBody::clear_exchange_type() {
  exchange_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgCliNotifySvrDownloadDataReqBody::exchange_type() const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataReqBody.exchange_type)
  return exchange_type_;
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_type_ = value;
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataReqBody.exchange_type)
}

// repeated string remote_path = 4;
inline int TransMsgCliNotifySvrDownloadDataReqBody::remote_path_size() const {
  return remote_path_.size();
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::clear_remote_path() {
  remote_path_.Clear();
}
inline const std::string& TransMsgCliNotifySvrDownloadDataReqBody::remote_path(int index) const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
  return remote_path_.Get(index);
}
inline std::string* TransMsgCliNotifySvrDownloadDataReqBody::mutable_remote_path(int index) {
  // @@protoc_insertion_point(field_mutable:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
  return remote_path_.Mutable(index);
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_remote_path(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
  remote_path_.Mutable(index)->assign(value);
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_remote_path(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
  remote_path_.Mutable(index)->assign(std::move(value));
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_remote_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remote_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_remote_path(int index, const char* value, size_t size) {
  remote_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
}
inline std::string* TransMsgCliNotifySvrDownloadDataReqBody::add_remote_path() {
  // @@protoc_insertion_point(field_add_mutable:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
  return remote_path_.Add();
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::add_remote_path(const std::string& value) {
  remote_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::add_remote_path(std::string&& value) {
  remote_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::add_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remote_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::add_remote_path(const char* value, size_t size) {
  remote_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransMsgCliNotifySvrDownloadDataReqBody::remote_path() const {
  // @@protoc_insertion_point(field_list:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
  return remote_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransMsgCliNotifySvrDownloadDataReqBody::mutable_remote_path() {
  // @@protoc_insertion_point(field_mutable_list:TransMsgCliNotifySvrDownloadDataReqBody.remote_path)
  return &remote_path_;
}

// string local_path = 5;
inline void TransMsgCliNotifySvrDownloadDataReqBody::clear_local_path() {
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgCliNotifySvrDownloadDataReqBody::local_path() const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataReqBody.local_path)
  return local_path_.GetNoArena();
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_local_path(const std::string& value) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataReqBody.local_path)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_local_path(std::string&& value) {
  
  local_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgCliNotifySvrDownloadDataReqBody.local_path)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_local_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgCliNotifySvrDownloadDataReqBody.local_path)
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_local_path(const char* value, size_t size) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgCliNotifySvrDownloadDataReqBody.local_path)
}
inline std::string* TransMsgCliNotifySvrDownloadDataReqBody::mutable_local_path() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgCliNotifySvrDownloadDataReqBody.local_path)
  return local_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgCliNotifySvrDownloadDataReqBody::release_local_path() {
  // @@protoc_insertion_point(field_release:TransMsgCliNotifySvrDownloadDataReqBody.local_path)
  
  return local_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgCliNotifySvrDownloadDataReqBody::set_allocated_local_path(std::string* local_path) {
  if (local_path != nullptr) {
    
  } else {
    
  }
  local_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_path);
  // @@protoc_insertion_point(field_set_allocated:TransMsgCliNotifySvrDownloadDataReqBody.local_path)
}

// -------------------------------------------------------------------

// TransMsgCliNotifySvrDownloadDataRspBody

// int32 status = 1;
inline void TransMsgCliNotifySvrDownloadDataRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgCliNotifySvrDownloadDataRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataRspBody.status)
  return status_;
}
inline void TransMsgCliNotifySvrDownloadDataRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataRspBody.status)
}

// string usr_trans_id = 2;
inline void TransMsgCliNotifySvrDownloadDataRspBody::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgCliNotifySvrDownloadDataRspBody::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void TransMsgCliNotifySvrDownloadDataRspBody::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id)
}
inline void TransMsgCliNotifySvrDownloadDataRspBody::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id)
}
inline void TransMsgCliNotifySvrDownloadDataRspBody::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id)
}
inline void TransMsgCliNotifySvrDownloadDataRspBody::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id)
}
inline std::string* TransMsgCliNotifySvrDownloadDataRspBody::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgCliNotifySvrDownloadDataRspBody::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgCliNotifySvrDownloadDataRspBody::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgCliNotifySvrDownloadDataRspBody.usr_trans_id)
}

// int64 total_file_size = 3;
inline void TransMsgCliNotifySvrDownloadDataRspBody::clear_total_file_size() {
  total_file_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransMsgCliNotifySvrDownloadDataRspBody::total_file_size() const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataRspBody.total_file_size)
  return total_file_size_;
}
inline void TransMsgCliNotifySvrDownloadDataRspBody::set_total_file_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_file_size_ = value;
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataRspBody.total_file_size)
}

// int64 total_files = 4;
inline void TransMsgCliNotifySvrDownloadDataRspBody::clear_total_files() {
  total_files_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransMsgCliNotifySvrDownloadDataRspBody::total_files() const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataRspBody.total_files)
  return total_files_;
}
inline void TransMsgCliNotifySvrDownloadDataRspBody::set_total_files(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_files_ = value;
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataRspBody.total_files)
}

// int64 total_dirs = 5;
inline void TransMsgCliNotifySvrDownloadDataRspBody::clear_total_dirs() {
  total_dirs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransMsgCliNotifySvrDownloadDataRspBody::total_dirs() const {
  // @@protoc_insertion_point(field_get:TransMsgCliNotifySvrDownloadDataRspBody.total_dirs)
  return total_dirs_;
}
inline void TransMsgCliNotifySvrDownloadDataRspBody::set_total_dirs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_dirs_ = value;
  // @@protoc_insertion_point(field_set:TransMsgCliNotifySvrDownloadDataRspBody.total_dirs)
}

// -------------------------------------------------------------------

// TransMsgDownloadFileReqBody

// string node_id = 1;
inline void TransMsgDownloadFileReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDownloadFileReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgDownloadFileReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.node_id)
}
inline void TransMsgDownloadFileReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDownloadFileReqBody.node_id)
}
inline void TransMsgDownloadFileReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDownloadFileReqBody.node_id)
}
inline void TransMsgDownloadFileReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDownloadFileReqBody.node_id)
}
inline std::string* TransMsgDownloadFileReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDownloadFileReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDownloadFileReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgDownloadFileReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDownloadFileReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDownloadFileReqBody.node_id)
}

// string usr_trans_id = 2;
inline void TransMsgDownloadFileReqBody::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDownloadFileReqBody::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void TransMsgDownloadFileReqBody::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.usr_trans_id)
}
inline void TransMsgDownloadFileReqBody::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDownloadFileReqBody.usr_trans_id)
}
inline void TransMsgDownloadFileReqBody::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDownloadFileReqBody.usr_trans_id)
}
inline void TransMsgDownloadFileReqBody::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDownloadFileReqBody.usr_trans_id)
}
inline std::string* TransMsgDownloadFileReqBody::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDownloadFileReqBody.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDownloadFileReqBody::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:TransMsgDownloadFileReqBody.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDownloadFileReqBody::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDownloadFileReqBody.usr_trans_id)
}

// int32 exchange_type = 3;
inline void TransMsgDownloadFileReqBody::clear_exchange_type() {
  exchange_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgDownloadFileReqBody::exchange_type() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.exchange_type)
  return exchange_type_;
}
inline void TransMsgDownloadFileReqBody::set_exchange_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exchange_type_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.exchange_type)
}

// string remote_path = 4;
inline void TransMsgDownloadFileReqBody::clear_remote_path() {
  remote_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDownloadFileReqBody::remote_path() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.remote_path)
  return remote_path_.GetNoArena();
}
inline void TransMsgDownloadFileReqBody::set_remote_path(const std::string& value) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.remote_path)
}
inline void TransMsgDownloadFileReqBody::set_remote_path(std::string&& value) {
  
  remote_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDownloadFileReqBody.remote_path)
}
inline void TransMsgDownloadFileReqBody::set_remote_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDownloadFileReqBody.remote_path)
}
inline void TransMsgDownloadFileReqBody::set_remote_path(const char* value, size_t size) {
  
  remote_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDownloadFileReqBody.remote_path)
}
inline std::string* TransMsgDownloadFileReqBody::mutable_remote_path() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDownloadFileReqBody.remote_path)
  return remote_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDownloadFileReqBody::release_remote_path() {
  // @@protoc_insertion_point(field_release:TransMsgDownloadFileReqBody.remote_path)
  
  return remote_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDownloadFileReqBody::set_allocated_remote_path(std::string* remote_path) {
  if (remote_path != nullptr) {
    
  } else {
    
  }
  remote_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_path);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDownloadFileReqBody.remote_path)
}

// string local_path = 5;
inline void TransMsgDownloadFileReqBody::clear_local_path() {
  local_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDownloadFileReqBody::local_path() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.local_path)
  return local_path_.GetNoArena();
}
inline void TransMsgDownloadFileReqBody::set_local_path(const std::string& value) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.local_path)
}
inline void TransMsgDownloadFileReqBody::set_local_path(std::string&& value) {
  
  local_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDownloadFileReqBody.local_path)
}
inline void TransMsgDownloadFileReqBody::set_local_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDownloadFileReqBody.local_path)
}
inline void TransMsgDownloadFileReqBody::set_local_path(const char* value, size_t size) {
  
  local_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDownloadFileReqBody.local_path)
}
inline std::string* TransMsgDownloadFileReqBody::mutable_local_path() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDownloadFileReqBody.local_path)
  return local_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDownloadFileReqBody::release_local_path() {
  // @@protoc_insertion_point(field_release:TransMsgDownloadFileReqBody.local_path)
  
  return local_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDownloadFileReqBody::set_allocated_local_path(std::string* local_path) {
  if (local_path != nullptr) {
    
  } else {
    
  }
  local_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_path);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDownloadFileReqBody.local_path)
}

// uint64 file_size = 6;
inline void TransMsgDownloadFileReqBody::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgDownloadFileReqBody::file_size() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.file_size)
  return file_size_;
}
inline void TransMsgDownloadFileReqBody::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.file_size)
}

// uint64 total_file_blocks_count = 7;
inline void TransMsgDownloadFileReqBody::clear_total_file_blocks_count() {
  total_file_blocks_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgDownloadFileReqBody::total_file_blocks_count() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.total_file_blocks_count)
  return total_file_blocks_count_;
}
inline void TransMsgDownloadFileReqBody::set_total_file_blocks_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_file_blocks_count_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.total_file_blocks_count)
}

// uint64 file_block_size = 8;
inline void TransMsgDownloadFileReqBody::clear_file_block_size() {
  file_block_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgDownloadFileReqBody::file_block_size() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.file_block_size)
  return file_block_size_;
}
inline void TransMsgDownloadFileReqBody::set_file_block_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_block_size_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.file_block_size)
}

// uint64 file_block_start_num = 9;
inline void TransMsgDownloadFileReqBody::clear_file_block_start_num() {
  file_block_start_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgDownloadFileReqBody::file_block_start_num() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.file_block_start_num)
  return file_block_start_num_;
}
inline void TransMsgDownloadFileReqBody::set_file_block_start_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_block_start_num_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.file_block_start_num)
}

// uint64 file_hash = 10;
inline void TransMsgDownloadFileReqBody::clear_file_hash() {
  file_hash_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgDownloadFileReqBody::file_hash() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.file_hash)
  return file_hash_;
}
inline void TransMsgDownloadFileReqBody::set_file_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  file_hash_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.file_hash)
}

// string sync_trans_session_id = 11;
inline void TransMsgDownloadFileReqBody::clear_sync_trans_session_id() {
  sync_trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDownloadFileReqBody::sync_trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.sync_trans_session_id)
  return sync_trans_session_id_.GetNoArena();
}
inline void TransMsgDownloadFileReqBody::set_sync_trans_session_id(const std::string& value) {
  
  sync_trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.sync_trans_session_id)
}
inline void TransMsgDownloadFileReqBody::set_sync_trans_session_id(std::string&& value) {
  
  sync_trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDownloadFileReqBody.sync_trans_session_id)
}
inline void TransMsgDownloadFileReqBody::set_sync_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sync_trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDownloadFileReqBody.sync_trans_session_id)
}
inline void TransMsgDownloadFileReqBody::set_sync_trans_session_id(const char* value, size_t size) {
  
  sync_trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDownloadFileReqBody.sync_trans_session_id)
}
inline std::string* TransMsgDownloadFileReqBody::mutable_sync_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDownloadFileReqBody.sync_trans_session_id)
  return sync_trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDownloadFileReqBody::release_sync_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgDownloadFileReqBody.sync_trans_session_id)
  
  return sync_trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDownloadFileReqBody::set_allocated_sync_trans_session_id(std::string* sync_trans_session_id) {
  if (sync_trans_session_id != nullptr) {
    
  } else {
    
  }
  sync_trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sync_trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDownloadFileReqBody.sync_trans_session_id)
}

// uint64 transfer_rate = 12;
inline void TransMsgDownloadFileReqBody::clear_transfer_rate() {
  transfer_rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransMsgDownloadFileReqBody::transfer_rate() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileReqBody.transfer_rate)
  return transfer_rate_;
}
inline void TransMsgDownloadFileReqBody::set_transfer_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transfer_rate_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileReqBody.transfer_rate)
}

// -------------------------------------------------------------------

// TransMsgDownloadFileRspBody

// int32 status = 1;
inline void TransMsgDownloadFileRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgDownloadFileRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileRspBody.status)
  return status_;
}
inline void TransMsgDownloadFileRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileRspBody.status)
}

// string node_id = 2;
inline void TransMsgDownloadFileRspBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDownloadFileRspBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileRspBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgDownloadFileRspBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileRspBody.node_id)
}
inline void TransMsgDownloadFileRspBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDownloadFileRspBody.node_id)
}
inline void TransMsgDownloadFileRspBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDownloadFileRspBody.node_id)
}
inline void TransMsgDownloadFileRspBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDownloadFileRspBody.node_id)
}
inline std::string* TransMsgDownloadFileRspBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDownloadFileRspBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDownloadFileRspBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgDownloadFileRspBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDownloadFileRspBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDownloadFileRspBody.node_id)
}

// string trans_session_id = 3;
inline void TransMsgDownloadFileRspBody::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgDownloadFileRspBody::trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgDownloadFileRspBody.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void TransMsgDownloadFileRspBody::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgDownloadFileRspBody.trans_session_id)
}
inline void TransMsgDownloadFileRspBody::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgDownloadFileRspBody.trans_session_id)
}
inline void TransMsgDownloadFileRspBody::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgDownloadFileRspBody.trans_session_id)
}
inline void TransMsgDownloadFileRspBody::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgDownloadFileRspBody.trans_session_id)
}
inline std::string* TransMsgDownloadFileRspBody::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgDownloadFileRspBody.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgDownloadFileRspBody::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgDownloadFileRspBody.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgDownloadFileRspBody::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgDownloadFileRspBody.trans_session_id)
}

// -------------------------------------------------------------------

// TransMsgSvrNotifyCliEndDownloadReqBody

// string node_id = 1;
inline void TransMsgSvrNotifyCliEndDownloadReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgSvrNotifyCliEndDownloadReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgSvrNotifyCliEndDownloadReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgSvrNotifyCliEndDownloadReqBody.node_id)
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgSvrNotifyCliEndDownloadReqBody.node_id)
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgSvrNotifyCliEndDownloadReqBody.node_id)
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgSvrNotifyCliEndDownloadReqBody.node_id)
}
inline std::string* TransMsgSvrNotifyCliEndDownloadReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgSvrNotifyCliEndDownloadReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgSvrNotifyCliEndDownloadReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgSvrNotifyCliEndDownloadReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgSvrNotifyCliEndDownloadReqBody.node_id)
}

// string usr_trans_id = 2;
inline void TransMsgSvrNotifyCliEndDownloadReqBody::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgSvrNotifyCliEndDownloadReqBody::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id)
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id)
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id)
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id)
}
inline std::string* TransMsgSvrNotifyCliEndDownloadReqBody::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgSvrNotifyCliEndDownloadReqBody::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgSvrNotifyCliEndDownloadReqBody::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgSvrNotifyCliEndDownloadReqBody.usr_trans_id)
}

// -------------------------------------------------------------------

// TransMsgSvrNotifyCliEndDownloadRspBody

// int32 status = 1;
inline void TransMsgSvrNotifyCliEndDownloadRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgSvrNotifyCliEndDownloadRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgSvrNotifyCliEndDownloadRspBody.status)
  return status_;
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgSvrNotifyCliEndDownloadRspBody.status)
}

// string node_id = 2;
inline void TransMsgSvrNotifyCliEndDownloadRspBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgSvrNotifyCliEndDownloadRspBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgSvrNotifyCliEndDownloadRspBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgSvrNotifyCliEndDownloadRspBody.node_id)
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgSvrNotifyCliEndDownloadRspBody.node_id)
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgSvrNotifyCliEndDownloadRspBody.node_id)
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgSvrNotifyCliEndDownloadRspBody.node_id)
}
inline std::string* TransMsgSvrNotifyCliEndDownloadRspBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgSvrNotifyCliEndDownloadRspBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgSvrNotifyCliEndDownloadRspBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgSvrNotifyCliEndDownloadRspBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgSvrNotifyCliEndDownloadRspBody.node_id)
}

// string usr_trans_id = 3;
inline void TransMsgSvrNotifyCliEndDownloadRspBody::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgSvrNotifyCliEndDownloadRspBody::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id)
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id)
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id)
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id)
}
inline std::string* TransMsgSvrNotifyCliEndDownloadRspBody::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgSvrNotifyCliEndDownloadRspBody::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgSvrNotifyCliEndDownloadRspBody::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgSvrNotifyCliEndDownloadRspBody.usr_trans_id)
}

// -------------------------------------------------------------------

// TransMsgStopDownloadReqBody

// string node_id = 1;
inline void TransMsgStopDownloadReqBody::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgStopDownloadReqBody::node_id() const {
  // @@protoc_insertion_point(field_get:TransMsgStopDownloadReqBody.node_id)
  return node_id_.GetNoArena();
}
inline void TransMsgStopDownloadReqBody::set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgStopDownloadReqBody.node_id)
}
inline void TransMsgStopDownloadReqBody::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgStopDownloadReqBody.node_id)
}
inline void TransMsgStopDownloadReqBody::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgStopDownloadReqBody.node_id)
}
inline void TransMsgStopDownloadReqBody::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgStopDownloadReqBody.node_id)
}
inline std::string* TransMsgStopDownloadReqBody::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgStopDownloadReqBody.node_id)
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgStopDownloadReqBody::release_node_id() {
  // @@protoc_insertion_point(field_release:TransMsgStopDownloadReqBody.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgStopDownloadReqBody::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgStopDownloadReqBody.node_id)
}

// string usr_trans_id = 2;
inline void TransMsgStopDownloadReqBody::clear_usr_trans_id() {
  usr_trans_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgStopDownloadReqBody::usr_trans_id() const {
  // @@protoc_insertion_point(field_get:TransMsgStopDownloadReqBody.usr_trans_id)
  return usr_trans_id_.GetNoArena();
}
inline void TransMsgStopDownloadReqBody::set_usr_trans_id(const std::string& value) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgStopDownloadReqBody.usr_trans_id)
}
inline void TransMsgStopDownloadReqBody::set_usr_trans_id(std::string&& value) {
  
  usr_trans_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgStopDownloadReqBody.usr_trans_id)
}
inline void TransMsgStopDownloadReqBody::set_usr_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgStopDownloadReqBody.usr_trans_id)
}
inline void TransMsgStopDownloadReqBody::set_usr_trans_id(const char* value, size_t size) {
  
  usr_trans_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgStopDownloadReqBody.usr_trans_id)
}
inline std::string* TransMsgStopDownloadReqBody::mutable_usr_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgStopDownloadReqBody.usr_trans_id)
  return usr_trans_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgStopDownloadReqBody::release_usr_trans_id() {
  // @@protoc_insertion_point(field_release:TransMsgStopDownloadReqBody.usr_trans_id)
  
  return usr_trans_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgStopDownloadReqBody::set_allocated_usr_trans_id(std::string* usr_trans_id) {
  if (usr_trans_id != nullptr) {
    
  } else {
    
  }
  usr_trans_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usr_trans_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgStopDownloadReqBody.usr_trans_id)
}

// string trans_session_id = 3;
inline void TransMsgStopDownloadReqBody::clear_trans_session_id() {
  trans_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransMsgStopDownloadReqBody::trans_session_id() const {
  // @@protoc_insertion_point(field_get:TransMsgStopDownloadReqBody.trans_session_id)
  return trans_session_id_.GetNoArena();
}
inline void TransMsgStopDownloadReqBody::set_trans_session_id(const std::string& value) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransMsgStopDownloadReqBody.trans_session_id)
}
inline void TransMsgStopDownloadReqBody::set_trans_session_id(std::string&& value) {
  
  trans_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransMsgStopDownloadReqBody.trans_session_id)
}
inline void TransMsgStopDownloadReqBody::set_trans_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransMsgStopDownloadReqBody.trans_session_id)
}
inline void TransMsgStopDownloadReqBody::set_trans_session_id(const char* value, size_t size) {
  
  trans_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransMsgStopDownloadReqBody.trans_session_id)
}
inline std::string* TransMsgStopDownloadReqBody::mutable_trans_session_id() {
  
  // @@protoc_insertion_point(field_mutable:TransMsgStopDownloadReqBody.trans_session_id)
  return trans_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransMsgStopDownloadReqBody::release_trans_session_id() {
  // @@protoc_insertion_point(field_release:TransMsgStopDownloadReqBody.trans_session_id)
  
  return trans_session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransMsgStopDownloadReqBody::set_allocated_trans_session_id(std::string* trans_session_id) {
  if (trans_session_id != nullptr) {
    
  } else {
    
  }
  trans_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trans_session_id);
  // @@protoc_insertion_point(field_set_allocated:TransMsgStopDownloadReqBody.trans_session_id)
}

// -------------------------------------------------------------------

// TransMsgStopDownloadRspBody

// int32 status = 1;
inline void TransMsgStopDownloadRspBody::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransMsgStopDownloadRspBody::status() const {
  // @@protoc_insertion_point(field_get:TransMsgStopDownloadRspBody.status)
  return status_;
}
inline void TransMsgStopDownloadRspBody::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:TransMsgStopDownloadRspBody.status)
}

// -------------------------------------------------------------------

// TransMessage

// .TransMsgHead head = 1;
inline bool TransMessage::has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline void TransMessage::clear_head() {
  if (GetArenaNoVirtual() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
inline const ::TransMsgHead& TransMessage::head() const {
  const ::TransMsgHead* p = head_;
  // @@protoc_insertion_point(field_get:TransMessage.head)
  return p != nullptr ? *p : *reinterpret_cast<const ::TransMsgHead*>(
      &::_TransMsgHead_default_instance_);
}
inline ::TransMsgHead* TransMessage::release_head() {
  // @@protoc_insertion_point(field_release:TransMessage.head)
  
  ::TransMsgHead* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::TransMsgHead* TransMessage::mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransMsgHead>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.head)
  return head_;
}
inline void TransMessage::set_allocated_head(::TransMsgHead* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:TransMessage.head)
}

// .TransMsgLoginReqBody login_req_body = 2;
inline bool TransMessage::has_login_req_body() const {
  return TransMsgBody_case() == kLoginReqBody;
}
inline void TransMessage::set_has_login_req_body() {
  _oneof_case_[0] = kLoginReqBody;
}
inline void TransMessage::clear_login_req_body() {
  if (has_login_req_body()) {
    delete TransMsgBody_.login_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgLoginReqBody* TransMessage::release_login_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.login_req_body)
  if (has_login_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgLoginReqBody* temp = TransMsgBody_.login_req_body_;
    TransMsgBody_.login_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgLoginReqBody& TransMessage::login_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.login_req_body)
  return has_login_req_body()
      ? *TransMsgBody_.login_req_body_
      : *reinterpret_cast< ::TransMsgLoginReqBody*>(&::_TransMsgLoginReqBody_default_instance_);
}
inline ::TransMsgLoginReqBody* TransMessage::mutable_login_req_body() {
  if (!has_login_req_body()) {
    clear_TransMsgBody();
    set_has_login_req_body();
    TransMsgBody_.login_req_body_ = CreateMaybeMessage< ::TransMsgLoginReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.login_req_body)
  return TransMsgBody_.login_req_body_;
}

// .TransMsgLoginRspBody login_rsp_body = 3;
inline bool TransMessage::has_login_rsp_body() const {
  return TransMsgBody_case() == kLoginRspBody;
}
inline void TransMessage::set_has_login_rsp_body() {
  _oneof_case_[0] = kLoginRspBody;
}
inline void TransMessage::clear_login_rsp_body() {
  if (has_login_rsp_body()) {
    delete TransMsgBody_.login_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgLoginRspBody* TransMessage::release_login_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.login_rsp_body)
  if (has_login_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgLoginRspBody* temp = TransMsgBody_.login_rsp_body_;
    TransMsgBody_.login_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgLoginRspBody& TransMessage::login_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.login_rsp_body)
  return has_login_rsp_body()
      ? *TransMsgBody_.login_rsp_body_
      : *reinterpret_cast< ::TransMsgLoginRspBody*>(&::_TransMsgLoginRspBody_default_instance_);
}
inline ::TransMsgLoginRspBody* TransMessage::mutable_login_rsp_body() {
  if (!has_login_rsp_body()) {
    clear_TransMsgBody();
    set_has_login_rsp_body();
    TransMsgBody_.login_rsp_body_ = CreateMaybeMessage< ::TransMsgLoginRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.login_rsp_body)
  return TransMsgBody_.login_rsp_body_;
}

// .TransMsgLogoutReqBody logout_req_body = 4;
inline bool TransMessage::has_logout_req_body() const {
  return TransMsgBody_case() == kLogoutReqBody;
}
inline void TransMessage::set_has_logout_req_body() {
  _oneof_case_[0] = kLogoutReqBody;
}
inline void TransMessage::clear_logout_req_body() {
  if (has_logout_req_body()) {
    delete TransMsgBody_.logout_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgLogoutReqBody* TransMessage::release_logout_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.logout_req_body)
  if (has_logout_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgLogoutReqBody* temp = TransMsgBody_.logout_req_body_;
    TransMsgBody_.logout_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgLogoutReqBody& TransMessage::logout_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.logout_req_body)
  return has_logout_req_body()
      ? *TransMsgBody_.logout_req_body_
      : *reinterpret_cast< ::TransMsgLogoutReqBody*>(&::_TransMsgLogoutReqBody_default_instance_);
}
inline ::TransMsgLogoutReqBody* TransMessage::mutable_logout_req_body() {
  if (!has_logout_req_body()) {
    clear_TransMsgBody();
    set_has_logout_req_body();
    TransMsgBody_.logout_req_body_ = CreateMaybeMessage< ::TransMsgLogoutReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.logout_req_body)
  return TransMsgBody_.logout_req_body_;
}

// .TransMsgLogoutRspBody logout_rsp_body = 5;
inline bool TransMessage::has_logout_rsp_body() const {
  return TransMsgBody_case() == kLogoutRspBody;
}
inline void TransMessage::set_has_logout_rsp_body() {
  _oneof_case_[0] = kLogoutRspBody;
}
inline void TransMessage::clear_logout_rsp_body() {
  if (has_logout_rsp_body()) {
    delete TransMsgBody_.logout_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgLogoutRspBody* TransMessage::release_logout_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.logout_rsp_body)
  if (has_logout_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgLogoutRspBody* temp = TransMsgBody_.logout_rsp_body_;
    TransMsgBody_.logout_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgLogoutRspBody& TransMessage::logout_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.logout_rsp_body)
  return has_logout_rsp_body()
      ? *TransMsgBody_.logout_rsp_body_
      : *reinterpret_cast< ::TransMsgLogoutRspBody*>(&::_TransMsgLogoutRspBody_default_instance_);
}
inline ::TransMsgLogoutRspBody* TransMessage::mutable_logout_rsp_body() {
  if (!has_logout_rsp_body()) {
    clear_TransMsgBody();
    set_has_logout_rsp_body();
    TransMsgBody_.logout_rsp_body_ = CreateMaybeMessage< ::TransMsgLogoutRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.logout_rsp_body)
  return TransMsgBody_.logout_rsp_body_;
}

// .TransMsgUploadFileReqBody upload_file_req_body = 6;
inline bool TransMessage::has_upload_file_req_body() const {
  return TransMsgBody_case() == kUploadFileReqBody;
}
inline void TransMessage::set_has_upload_file_req_body() {
  _oneof_case_[0] = kUploadFileReqBody;
}
inline void TransMessage::clear_upload_file_req_body() {
  if (has_upload_file_req_body()) {
    delete TransMsgBody_.upload_file_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgUploadFileReqBody* TransMessage::release_upload_file_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.upload_file_req_body)
  if (has_upload_file_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgUploadFileReqBody* temp = TransMsgBody_.upload_file_req_body_;
    TransMsgBody_.upload_file_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgUploadFileReqBody& TransMessage::upload_file_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.upload_file_req_body)
  return has_upload_file_req_body()
      ? *TransMsgBody_.upload_file_req_body_
      : *reinterpret_cast< ::TransMsgUploadFileReqBody*>(&::_TransMsgUploadFileReqBody_default_instance_);
}
inline ::TransMsgUploadFileReqBody* TransMessage::mutable_upload_file_req_body() {
  if (!has_upload_file_req_body()) {
    clear_TransMsgBody();
    set_has_upload_file_req_body();
    TransMsgBody_.upload_file_req_body_ = CreateMaybeMessage< ::TransMsgUploadFileReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.upload_file_req_body)
  return TransMsgBody_.upload_file_req_body_;
}

// .TransMsgUploadFileRspBody upload_file_rsp_body = 7;
inline bool TransMessage::has_upload_file_rsp_body() const {
  return TransMsgBody_case() == kUploadFileRspBody;
}
inline void TransMessage::set_has_upload_file_rsp_body() {
  _oneof_case_[0] = kUploadFileRspBody;
}
inline void TransMessage::clear_upload_file_rsp_body() {
  if (has_upload_file_rsp_body()) {
    delete TransMsgBody_.upload_file_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgUploadFileRspBody* TransMessage::release_upload_file_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.upload_file_rsp_body)
  if (has_upload_file_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgUploadFileRspBody* temp = TransMsgBody_.upload_file_rsp_body_;
    TransMsgBody_.upload_file_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgUploadFileRspBody& TransMessage::upload_file_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.upload_file_rsp_body)
  return has_upload_file_rsp_body()
      ? *TransMsgBody_.upload_file_rsp_body_
      : *reinterpret_cast< ::TransMsgUploadFileRspBody*>(&::_TransMsgUploadFileRspBody_default_instance_);
}
inline ::TransMsgUploadFileRspBody* TransMessage::mutable_upload_file_rsp_body() {
  if (!has_upload_file_rsp_body()) {
    clear_TransMsgBody();
    set_has_upload_file_rsp_body();
    TransMsgBody_.upload_file_rsp_body_ = CreateMaybeMessage< ::TransMsgUploadFileRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.upload_file_rsp_body)
  return TransMsgBody_.upload_file_rsp_body_;
}

// .TransMsgSendDataReqBody send_data_req_body = 8;
inline bool TransMessage::has_send_data_req_body() const {
  return TransMsgBody_case() == kSendDataReqBody;
}
inline void TransMessage::set_has_send_data_req_body() {
  _oneof_case_[0] = kSendDataReqBody;
}
inline void TransMessage::clear_send_data_req_body() {
  if (has_send_data_req_body()) {
    delete TransMsgBody_.send_data_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgSendDataReqBody* TransMessage::release_send_data_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.send_data_req_body)
  if (has_send_data_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgSendDataReqBody* temp = TransMsgBody_.send_data_req_body_;
    TransMsgBody_.send_data_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgSendDataReqBody& TransMessage::send_data_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.send_data_req_body)
  return has_send_data_req_body()
      ? *TransMsgBody_.send_data_req_body_
      : *reinterpret_cast< ::TransMsgSendDataReqBody*>(&::_TransMsgSendDataReqBody_default_instance_);
}
inline ::TransMsgSendDataReqBody* TransMessage::mutable_send_data_req_body() {
  if (!has_send_data_req_body()) {
    clear_TransMsgBody();
    set_has_send_data_req_body();
    TransMsgBody_.send_data_req_body_ = CreateMaybeMessage< ::TransMsgSendDataReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.send_data_req_body)
  return TransMsgBody_.send_data_req_body_;
}

// .TransMsgResendDataNotifiReqBody resend_data_notifi_req_body = 9;
inline bool TransMessage::has_resend_data_notifi_req_body() const {
  return TransMsgBody_case() == kResendDataNotifiReqBody;
}
inline void TransMessage::set_has_resend_data_notifi_req_body() {
  _oneof_case_[0] = kResendDataNotifiReqBody;
}
inline void TransMessage::clear_resend_data_notifi_req_body() {
  if (has_resend_data_notifi_req_body()) {
    delete TransMsgBody_.resend_data_notifi_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgResendDataNotifiReqBody* TransMessage::release_resend_data_notifi_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.resend_data_notifi_req_body)
  if (has_resend_data_notifi_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgResendDataNotifiReqBody* temp = TransMsgBody_.resend_data_notifi_req_body_;
    TransMsgBody_.resend_data_notifi_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgResendDataNotifiReqBody& TransMessage::resend_data_notifi_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.resend_data_notifi_req_body)
  return has_resend_data_notifi_req_body()
      ? *TransMsgBody_.resend_data_notifi_req_body_
      : *reinterpret_cast< ::TransMsgResendDataNotifiReqBody*>(&::_TransMsgResendDataNotifiReqBody_default_instance_);
}
inline ::TransMsgResendDataNotifiReqBody* TransMessage::mutable_resend_data_notifi_req_body() {
  if (!has_resend_data_notifi_req_body()) {
    clear_TransMsgBody();
    set_has_resend_data_notifi_req_body();
    TransMsgBody_.resend_data_notifi_req_body_ = CreateMaybeMessage< ::TransMsgResendDataNotifiReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.resend_data_notifi_req_body)
  return TransMsgBody_.resend_data_notifi_req_body_;
}

// .TransMsgResendDataNotifiRspBody resend_data_notifi_rsp_body = 10;
inline bool TransMessage::has_resend_data_notifi_rsp_body() const {
  return TransMsgBody_case() == kResendDataNotifiRspBody;
}
inline void TransMessage::set_has_resend_data_notifi_rsp_body() {
  _oneof_case_[0] = kResendDataNotifiRspBody;
}
inline void TransMessage::clear_resend_data_notifi_rsp_body() {
  if (has_resend_data_notifi_rsp_body()) {
    delete TransMsgBody_.resend_data_notifi_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgResendDataNotifiRspBody* TransMessage::release_resend_data_notifi_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.resend_data_notifi_rsp_body)
  if (has_resend_data_notifi_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgResendDataNotifiRspBody* temp = TransMsgBody_.resend_data_notifi_rsp_body_;
    TransMsgBody_.resend_data_notifi_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgResendDataNotifiRspBody& TransMessage::resend_data_notifi_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.resend_data_notifi_rsp_body)
  return has_resend_data_notifi_rsp_body()
      ? *TransMsgBody_.resend_data_notifi_rsp_body_
      : *reinterpret_cast< ::TransMsgResendDataNotifiRspBody*>(&::_TransMsgResendDataNotifiRspBody_default_instance_);
}
inline ::TransMsgResendDataNotifiRspBody* TransMessage::mutable_resend_data_notifi_rsp_body() {
  if (!has_resend_data_notifi_rsp_body()) {
    clear_TransMsgBody();
    set_has_resend_data_notifi_rsp_body();
    TransMsgBody_.resend_data_notifi_rsp_body_ = CreateMaybeMessage< ::TransMsgResendDataNotifiRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.resend_data_notifi_rsp_body)
  return TransMsgBody_.resend_data_notifi_rsp_body_;
}

// .TransMsgFinishNotifiReqBody finish_notifi_req_body = 11;
inline bool TransMessage::has_finish_notifi_req_body() const {
  return TransMsgBody_case() == kFinishNotifiReqBody;
}
inline void TransMessage::set_has_finish_notifi_req_body() {
  _oneof_case_[0] = kFinishNotifiReqBody;
}
inline void TransMessage::clear_finish_notifi_req_body() {
  if (has_finish_notifi_req_body()) {
    delete TransMsgBody_.finish_notifi_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgFinishNotifiReqBody* TransMessage::release_finish_notifi_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.finish_notifi_req_body)
  if (has_finish_notifi_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgFinishNotifiReqBody* temp = TransMsgBody_.finish_notifi_req_body_;
    TransMsgBody_.finish_notifi_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgFinishNotifiReqBody& TransMessage::finish_notifi_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.finish_notifi_req_body)
  return has_finish_notifi_req_body()
      ? *TransMsgBody_.finish_notifi_req_body_
      : *reinterpret_cast< ::TransMsgFinishNotifiReqBody*>(&::_TransMsgFinishNotifiReqBody_default_instance_);
}
inline ::TransMsgFinishNotifiReqBody* TransMessage::mutable_finish_notifi_req_body() {
  if (!has_finish_notifi_req_body()) {
    clear_TransMsgBody();
    set_has_finish_notifi_req_body();
    TransMsgBody_.finish_notifi_req_body_ = CreateMaybeMessage< ::TransMsgFinishNotifiReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.finish_notifi_req_body)
  return TransMsgBody_.finish_notifi_req_body_;
}

// .TransMsgFinishNotifiRspBody finish_notifi_rsp_body = 12;
inline bool TransMessage::has_finish_notifi_rsp_body() const {
  return TransMsgBody_case() == kFinishNotifiRspBody;
}
inline void TransMessage::set_has_finish_notifi_rsp_body() {
  _oneof_case_[0] = kFinishNotifiRspBody;
}
inline void TransMessage::clear_finish_notifi_rsp_body() {
  if (has_finish_notifi_rsp_body()) {
    delete TransMsgBody_.finish_notifi_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgFinishNotifiRspBody* TransMessage::release_finish_notifi_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.finish_notifi_rsp_body)
  if (has_finish_notifi_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgFinishNotifiRspBody* temp = TransMsgBody_.finish_notifi_rsp_body_;
    TransMsgBody_.finish_notifi_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgFinishNotifiRspBody& TransMessage::finish_notifi_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.finish_notifi_rsp_body)
  return has_finish_notifi_rsp_body()
      ? *TransMsgBody_.finish_notifi_rsp_body_
      : *reinterpret_cast< ::TransMsgFinishNotifiRspBody*>(&::_TransMsgFinishNotifiRspBody_default_instance_);
}
inline ::TransMsgFinishNotifiRspBody* TransMessage::mutable_finish_notifi_rsp_body() {
  if (!has_finish_notifi_rsp_body()) {
    clear_TransMsgBody();
    set_has_finish_notifi_rsp_body();
    TransMsgBody_.finish_notifi_rsp_body_ = CreateMaybeMessage< ::TransMsgFinishNotifiRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.finish_notifi_rsp_body)
  return TransMsgBody_.finish_notifi_rsp_body_;
}

// .TransMsgHeartbeatReqBody heartbeat_req_body = 13;
inline bool TransMessage::has_heartbeat_req_body() const {
  return TransMsgBody_case() == kHeartbeatReqBody;
}
inline void TransMessage::set_has_heartbeat_req_body() {
  _oneof_case_[0] = kHeartbeatReqBody;
}
inline void TransMessage::clear_heartbeat_req_body() {
  if (has_heartbeat_req_body()) {
    delete TransMsgBody_.heartbeat_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgHeartbeatReqBody* TransMessage::release_heartbeat_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.heartbeat_req_body)
  if (has_heartbeat_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgHeartbeatReqBody* temp = TransMsgBody_.heartbeat_req_body_;
    TransMsgBody_.heartbeat_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgHeartbeatReqBody& TransMessage::heartbeat_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.heartbeat_req_body)
  return has_heartbeat_req_body()
      ? *TransMsgBody_.heartbeat_req_body_
      : *reinterpret_cast< ::TransMsgHeartbeatReqBody*>(&::_TransMsgHeartbeatReqBody_default_instance_);
}
inline ::TransMsgHeartbeatReqBody* TransMessage::mutable_heartbeat_req_body() {
  if (!has_heartbeat_req_body()) {
    clear_TransMsgBody();
    set_has_heartbeat_req_body();
    TransMsgBody_.heartbeat_req_body_ = CreateMaybeMessage< ::TransMsgHeartbeatReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.heartbeat_req_body)
  return TransMsgBody_.heartbeat_req_body_;
}

// .TransMsgHeartbeatRspBody heartbeat_rsp_body = 14;
inline bool TransMessage::has_heartbeat_rsp_body() const {
  return TransMsgBody_case() == kHeartbeatRspBody;
}
inline void TransMessage::set_has_heartbeat_rsp_body() {
  _oneof_case_[0] = kHeartbeatRspBody;
}
inline void TransMessage::clear_heartbeat_rsp_body() {
  if (has_heartbeat_rsp_body()) {
    delete TransMsgBody_.heartbeat_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgHeartbeatRspBody* TransMessage::release_heartbeat_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.heartbeat_rsp_body)
  if (has_heartbeat_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgHeartbeatRspBody* temp = TransMsgBody_.heartbeat_rsp_body_;
    TransMsgBody_.heartbeat_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgHeartbeatRspBody& TransMessage::heartbeat_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.heartbeat_rsp_body)
  return has_heartbeat_rsp_body()
      ? *TransMsgBody_.heartbeat_rsp_body_
      : *reinterpret_cast< ::TransMsgHeartbeatRspBody*>(&::_TransMsgHeartbeatRspBody_default_instance_);
}
inline ::TransMsgHeartbeatRspBody* TransMessage::mutable_heartbeat_rsp_body() {
  if (!has_heartbeat_rsp_body()) {
    clear_TransMsgBody();
    set_has_heartbeat_rsp_body();
    TransMsgBody_.heartbeat_rsp_body_ = CreateMaybeMessage< ::TransMsgHeartbeatRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.heartbeat_rsp_body)
  return TransMsgBody_.heartbeat_rsp_body_;
}

// .TransMsgSendDataReqBody resend_data_req_body = 15;
inline bool TransMessage::has_resend_data_req_body() const {
  return TransMsgBody_case() == kResendDataReqBody;
}
inline void TransMessage::set_has_resend_data_req_body() {
  _oneof_case_[0] = kResendDataReqBody;
}
inline void TransMessage::clear_resend_data_req_body() {
  if (has_resend_data_req_body()) {
    delete TransMsgBody_.resend_data_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgSendDataReqBody* TransMessage::release_resend_data_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.resend_data_req_body)
  if (has_resend_data_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgSendDataReqBody* temp = TransMsgBody_.resend_data_req_body_;
    TransMsgBody_.resend_data_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgSendDataReqBody& TransMessage::resend_data_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.resend_data_req_body)
  return has_resend_data_req_body()
      ? *TransMsgBody_.resend_data_req_body_
      : *reinterpret_cast< ::TransMsgSendDataReqBody*>(&::_TransMsgSendDataReqBody_default_instance_);
}
inline ::TransMsgSendDataReqBody* TransMessage::mutable_resend_data_req_body() {
  if (!has_resend_data_req_body()) {
    clear_TransMsgBody();
    set_has_resend_data_req_body();
    TransMsgBody_.resend_data_req_body_ = CreateMaybeMessage< ::TransMsgSendDataReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.resend_data_req_body)
  return TransMsgBody_.resend_data_req_body_;
}

// .TransMsgDirProcessReqBody dir_process_req_body = 16;
inline bool TransMessage::has_dir_process_req_body() const {
  return TransMsgBody_case() == kDirProcessReqBody;
}
inline void TransMessage::set_has_dir_process_req_body() {
  _oneof_case_[0] = kDirProcessReqBody;
}
inline void TransMessage::clear_dir_process_req_body() {
  if (has_dir_process_req_body()) {
    delete TransMsgBody_.dir_process_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgDirProcessReqBody* TransMessage::release_dir_process_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.dir_process_req_body)
  if (has_dir_process_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgDirProcessReqBody* temp = TransMsgBody_.dir_process_req_body_;
    TransMsgBody_.dir_process_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgDirProcessReqBody& TransMessage::dir_process_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.dir_process_req_body)
  return has_dir_process_req_body()
      ? *TransMsgBody_.dir_process_req_body_
      : *reinterpret_cast< ::TransMsgDirProcessReqBody*>(&::_TransMsgDirProcessReqBody_default_instance_);
}
inline ::TransMsgDirProcessReqBody* TransMessage::mutable_dir_process_req_body() {
  if (!has_dir_process_req_body()) {
    clear_TransMsgBody();
    set_has_dir_process_req_body();
    TransMsgBody_.dir_process_req_body_ = CreateMaybeMessage< ::TransMsgDirProcessReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.dir_process_req_body)
  return TransMsgBody_.dir_process_req_body_;
}

// .TransMsgDirProcessRspBody dir_process_rsp_body = 17;
inline bool TransMessage::has_dir_process_rsp_body() const {
  return TransMsgBody_case() == kDirProcessRspBody;
}
inline void TransMessage::set_has_dir_process_rsp_body() {
  _oneof_case_[0] = kDirProcessRspBody;
}
inline void TransMessage::clear_dir_process_rsp_body() {
  if (has_dir_process_rsp_body()) {
    delete TransMsgBody_.dir_process_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgDirProcessRspBody* TransMessage::release_dir_process_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.dir_process_rsp_body)
  if (has_dir_process_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgDirProcessRspBody* temp = TransMsgBody_.dir_process_rsp_body_;
    TransMsgBody_.dir_process_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgDirProcessRspBody& TransMessage::dir_process_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.dir_process_rsp_body)
  return has_dir_process_rsp_body()
      ? *TransMsgBody_.dir_process_rsp_body_
      : *reinterpret_cast< ::TransMsgDirProcessRspBody*>(&::_TransMsgDirProcessRspBody_default_instance_);
}
inline ::TransMsgDirProcessRspBody* TransMessage::mutable_dir_process_rsp_body() {
  if (!has_dir_process_rsp_body()) {
    clear_TransMsgBody();
    set_has_dir_process_rsp_body();
    TransMsgBody_.dir_process_rsp_body_ = CreateMaybeMessage< ::TransMsgDirProcessRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.dir_process_rsp_body)
  return TransMsgBody_.dir_process_rsp_body_;
}

// .TransMsgCliNotifySvrDownloadDataReqBody cli_notify_svr_download_data_req_body = 18;
inline bool TransMessage::has_cli_notify_svr_download_data_req_body() const {
  return TransMsgBody_case() == kCliNotifySvrDownloadDataReqBody;
}
inline void TransMessage::set_has_cli_notify_svr_download_data_req_body() {
  _oneof_case_[0] = kCliNotifySvrDownloadDataReqBody;
}
inline void TransMessage::clear_cli_notify_svr_download_data_req_body() {
  if (has_cli_notify_svr_download_data_req_body()) {
    delete TransMsgBody_.cli_notify_svr_download_data_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgCliNotifySvrDownloadDataReqBody* TransMessage::release_cli_notify_svr_download_data_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.cli_notify_svr_download_data_req_body)
  if (has_cli_notify_svr_download_data_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgCliNotifySvrDownloadDataReqBody* temp = TransMsgBody_.cli_notify_svr_download_data_req_body_;
    TransMsgBody_.cli_notify_svr_download_data_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgCliNotifySvrDownloadDataReqBody& TransMessage::cli_notify_svr_download_data_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.cli_notify_svr_download_data_req_body)
  return has_cli_notify_svr_download_data_req_body()
      ? *TransMsgBody_.cli_notify_svr_download_data_req_body_
      : *reinterpret_cast< ::TransMsgCliNotifySvrDownloadDataReqBody*>(&::_TransMsgCliNotifySvrDownloadDataReqBody_default_instance_);
}
inline ::TransMsgCliNotifySvrDownloadDataReqBody* TransMessage::mutable_cli_notify_svr_download_data_req_body() {
  if (!has_cli_notify_svr_download_data_req_body()) {
    clear_TransMsgBody();
    set_has_cli_notify_svr_download_data_req_body();
    TransMsgBody_.cli_notify_svr_download_data_req_body_ = CreateMaybeMessage< ::TransMsgCliNotifySvrDownloadDataReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.cli_notify_svr_download_data_req_body)
  return TransMsgBody_.cli_notify_svr_download_data_req_body_;
}

// .TransMsgCliNotifySvrDownloadDataRspBody cli_notify_svr_download_data_rsp_body = 19;
inline bool TransMessage::has_cli_notify_svr_download_data_rsp_body() const {
  return TransMsgBody_case() == kCliNotifySvrDownloadDataRspBody;
}
inline void TransMessage::set_has_cli_notify_svr_download_data_rsp_body() {
  _oneof_case_[0] = kCliNotifySvrDownloadDataRspBody;
}
inline void TransMessage::clear_cli_notify_svr_download_data_rsp_body() {
  if (has_cli_notify_svr_download_data_rsp_body()) {
    delete TransMsgBody_.cli_notify_svr_download_data_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgCliNotifySvrDownloadDataRspBody* TransMessage::release_cli_notify_svr_download_data_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.cli_notify_svr_download_data_rsp_body)
  if (has_cli_notify_svr_download_data_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgCliNotifySvrDownloadDataRspBody* temp = TransMsgBody_.cli_notify_svr_download_data_rsp_body_;
    TransMsgBody_.cli_notify_svr_download_data_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgCliNotifySvrDownloadDataRspBody& TransMessage::cli_notify_svr_download_data_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.cli_notify_svr_download_data_rsp_body)
  return has_cli_notify_svr_download_data_rsp_body()
      ? *TransMsgBody_.cli_notify_svr_download_data_rsp_body_
      : *reinterpret_cast< ::TransMsgCliNotifySvrDownloadDataRspBody*>(&::_TransMsgCliNotifySvrDownloadDataRspBody_default_instance_);
}
inline ::TransMsgCliNotifySvrDownloadDataRspBody* TransMessage::mutable_cli_notify_svr_download_data_rsp_body() {
  if (!has_cli_notify_svr_download_data_rsp_body()) {
    clear_TransMsgBody();
    set_has_cli_notify_svr_download_data_rsp_body();
    TransMsgBody_.cli_notify_svr_download_data_rsp_body_ = CreateMaybeMessage< ::TransMsgCliNotifySvrDownloadDataRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.cli_notify_svr_download_data_rsp_body)
  return TransMsgBody_.cli_notify_svr_download_data_rsp_body_;
}

// .TransMsgDownloadFileReqBody download_file_req_body = 20;
inline bool TransMessage::has_download_file_req_body() const {
  return TransMsgBody_case() == kDownloadFileReqBody;
}
inline void TransMessage::set_has_download_file_req_body() {
  _oneof_case_[0] = kDownloadFileReqBody;
}
inline void TransMessage::clear_download_file_req_body() {
  if (has_download_file_req_body()) {
    delete TransMsgBody_.download_file_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgDownloadFileReqBody* TransMessage::release_download_file_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.download_file_req_body)
  if (has_download_file_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgDownloadFileReqBody* temp = TransMsgBody_.download_file_req_body_;
    TransMsgBody_.download_file_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgDownloadFileReqBody& TransMessage::download_file_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.download_file_req_body)
  return has_download_file_req_body()
      ? *TransMsgBody_.download_file_req_body_
      : *reinterpret_cast< ::TransMsgDownloadFileReqBody*>(&::_TransMsgDownloadFileReqBody_default_instance_);
}
inline ::TransMsgDownloadFileReqBody* TransMessage::mutable_download_file_req_body() {
  if (!has_download_file_req_body()) {
    clear_TransMsgBody();
    set_has_download_file_req_body();
    TransMsgBody_.download_file_req_body_ = CreateMaybeMessage< ::TransMsgDownloadFileReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.download_file_req_body)
  return TransMsgBody_.download_file_req_body_;
}

// .TransMsgDownloadFileRspBody download_file_rsp_body = 21;
inline bool TransMessage::has_download_file_rsp_body() const {
  return TransMsgBody_case() == kDownloadFileRspBody;
}
inline void TransMessage::set_has_download_file_rsp_body() {
  _oneof_case_[0] = kDownloadFileRspBody;
}
inline void TransMessage::clear_download_file_rsp_body() {
  if (has_download_file_rsp_body()) {
    delete TransMsgBody_.download_file_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgDownloadFileRspBody* TransMessage::release_download_file_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.download_file_rsp_body)
  if (has_download_file_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgDownloadFileRspBody* temp = TransMsgBody_.download_file_rsp_body_;
    TransMsgBody_.download_file_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgDownloadFileRspBody& TransMessage::download_file_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.download_file_rsp_body)
  return has_download_file_rsp_body()
      ? *TransMsgBody_.download_file_rsp_body_
      : *reinterpret_cast< ::TransMsgDownloadFileRspBody*>(&::_TransMsgDownloadFileRspBody_default_instance_);
}
inline ::TransMsgDownloadFileRspBody* TransMessage::mutable_download_file_rsp_body() {
  if (!has_download_file_rsp_body()) {
    clear_TransMsgBody();
    set_has_download_file_rsp_body();
    TransMsgBody_.download_file_rsp_body_ = CreateMaybeMessage< ::TransMsgDownloadFileRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.download_file_rsp_body)
  return TransMsgBody_.download_file_rsp_body_;
}

// .TransMsgSvrNotifyCliEndDownloadReqBody svr_notify_cli_end_download_req_body = 22;
inline bool TransMessage::has_svr_notify_cli_end_download_req_body() const {
  return TransMsgBody_case() == kSvrNotifyCliEndDownloadReqBody;
}
inline void TransMessage::set_has_svr_notify_cli_end_download_req_body() {
  _oneof_case_[0] = kSvrNotifyCliEndDownloadReqBody;
}
inline void TransMessage::clear_svr_notify_cli_end_download_req_body() {
  if (has_svr_notify_cli_end_download_req_body()) {
    delete TransMsgBody_.svr_notify_cli_end_download_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgSvrNotifyCliEndDownloadReqBody* TransMessage::release_svr_notify_cli_end_download_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.svr_notify_cli_end_download_req_body)
  if (has_svr_notify_cli_end_download_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgSvrNotifyCliEndDownloadReqBody* temp = TransMsgBody_.svr_notify_cli_end_download_req_body_;
    TransMsgBody_.svr_notify_cli_end_download_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgSvrNotifyCliEndDownloadReqBody& TransMessage::svr_notify_cli_end_download_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.svr_notify_cli_end_download_req_body)
  return has_svr_notify_cli_end_download_req_body()
      ? *TransMsgBody_.svr_notify_cli_end_download_req_body_
      : *reinterpret_cast< ::TransMsgSvrNotifyCliEndDownloadReqBody*>(&::_TransMsgSvrNotifyCliEndDownloadReqBody_default_instance_);
}
inline ::TransMsgSvrNotifyCliEndDownloadReqBody* TransMessage::mutable_svr_notify_cli_end_download_req_body() {
  if (!has_svr_notify_cli_end_download_req_body()) {
    clear_TransMsgBody();
    set_has_svr_notify_cli_end_download_req_body();
    TransMsgBody_.svr_notify_cli_end_download_req_body_ = CreateMaybeMessage< ::TransMsgSvrNotifyCliEndDownloadReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.svr_notify_cli_end_download_req_body)
  return TransMsgBody_.svr_notify_cli_end_download_req_body_;
}

// .TransMsgSvrNotifyCliEndDownloadRspBody svr_notify_cli_end_download_rsp_body = 23;
inline bool TransMessage::has_svr_notify_cli_end_download_rsp_body() const {
  return TransMsgBody_case() == kSvrNotifyCliEndDownloadRspBody;
}
inline void TransMessage::set_has_svr_notify_cli_end_download_rsp_body() {
  _oneof_case_[0] = kSvrNotifyCliEndDownloadRspBody;
}
inline void TransMessage::clear_svr_notify_cli_end_download_rsp_body() {
  if (has_svr_notify_cli_end_download_rsp_body()) {
    delete TransMsgBody_.svr_notify_cli_end_download_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgSvrNotifyCliEndDownloadRspBody* TransMessage::release_svr_notify_cli_end_download_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.svr_notify_cli_end_download_rsp_body)
  if (has_svr_notify_cli_end_download_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgSvrNotifyCliEndDownloadRspBody* temp = TransMsgBody_.svr_notify_cli_end_download_rsp_body_;
    TransMsgBody_.svr_notify_cli_end_download_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgSvrNotifyCliEndDownloadRspBody& TransMessage::svr_notify_cli_end_download_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.svr_notify_cli_end_download_rsp_body)
  return has_svr_notify_cli_end_download_rsp_body()
      ? *TransMsgBody_.svr_notify_cli_end_download_rsp_body_
      : *reinterpret_cast< ::TransMsgSvrNotifyCliEndDownloadRspBody*>(&::_TransMsgSvrNotifyCliEndDownloadRspBody_default_instance_);
}
inline ::TransMsgSvrNotifyCliEndDownloadRspBody* TransMessage::mutable_svr_notify_cli_end_download_rsp_body() {
  if (!has_svr_notify_cli_end_download_rsp_body()) {
    clear_TransMsgBody();
    set_has_svr_notify_cli_end_download_rsp_body();
    TransMsgBody_.svr_notify_cli_end_download_rsp_body_ = CreateMaybeMessage< ::TransMsgSvrNotifyCliEndDownloadRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.svr_notify_cli_end_download_rsp_body)
  return TransMsgBody_.svr_notify_cli_end_download_rsp_body_;
}

// .TransMsgStopUploadReqBody stop_upload_req_body = 24;
inline bool TransMessage::has_stop_upload_req_body() const {
  return TransMsgBody_case() == kStopUploadReqBody;
}
inline void TransMessage::set_has_stop_upload_req_body() {
  _oneof_case_[0] = kStopUploadReqBody;
}
inline void TransMessage::clear_stop_upload_req_body() {
  if (has_stop_upload_req_body()) {
    delete TransMsgBody_.stop_upload_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgStopUploadReqBody* TransMessage::release_stop_upload_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.stop_upload_req_body)
  if (has_stop_upload_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgStopUploadReqBody* temp = TransMsgBody_.stop_upload_req_body_;
    TransMsgBody_.stop_upload_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgStopUploadReqBody& TransMessage::stop_upload_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.stop_upload_req_body)
  return has_stop_upload_req_body()
      ? *TransMsgBody_.stop_upload_req_body_
      : *reinterpret_cast< ::TransMsgStopUploadReqBody*>(&::_TransMsgStopUploadReqBody_default_instance_);
}
inline ::TransMsgStopUploadReqBody* TransMessage::mutable_stop_upload_req_body() {
  if (!has_stop_upload_req_body()) {
    clear_TransMsgBody();
    set_has_stop_upload_req_body();
    TransMsgBody_.stop_upload_req_body_ = CreateMaybeMessage< ::TransMsgStopUploadReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.stop_upload_req_body)
  return TransMsgBody_.stop_upload_req_body_;
}

// .TransMsgStopUploadRspBody stop_upload_rsp_body = 25;
inline bool TransMessage::has_stop_upload_rsp_body() const {
  return TransMsgBody_case() == kStopUploadRspBody;
}
inline void TransMessage::set_has_stop_upload_rsp_body() {
  _oneof_case_[0] = kStopUploadRspBody;
}
inline void TransMessage::clear_stop_upload_rsp_body() {
  if (has_stop_upload_rsp_body()) {
    delete TransMsgBody_.stop_upload_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgStopUploadRspBody* TransMessage::release_stop_upload_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.stop_upload_rsp_body)
  if (has_stop_upload_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgStopUploadRspBody* temp = TransMsgBody_.stop_upload_rsp_body_;
    TransMsgBody_.stop_upload_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgStopUploadRspBody& TransMessage::stop_upload_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.stop_upload_rsp_body)
  return has_stop_upload_rsp_body()
      ? *TransMsgBody_.stop_upload_rsp_body_
      : *reinterpret_cast< ::TransMsgStopUploadRspBody*>(&::_TransMsgStopUploadRspBody_default_instance_);
}
inline ::TransMsgStopUploadRspBody* TransMessage::mutable_stop_upload_rsp_body() {
  if (!has_stop_upload_rsp_body()) {
    clear_TransMsgBody();
    set_has_stop_upload_rsp_body();
    TransMsgBody_.stop_upload_rsp_body_ = CreateMaybeMessage< ::TransMsgStopUploadRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.stop_upload_rsp_body)
  return TransMsgBody_.stop_upload_rsp_body_;
}

// .TransMsgStopDownloadReqBody stop_download_req_body = 26;
inline bool TransMessage::has_stop_download_req_body() const {
  return TransMsgBody_case() == kStopDownloadReqBody;
}
inline void TransMessage::set_has_stop_download_req_body() {
  _oneof_case_[0] = kStopDownloadReqBody;
}
inline void TransMessage::clear_stop_download_req_body() {
  if (has_stop_download_req_body()) {
    delete TransMsgBody_.stop_download_req_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgStopDownloadReqBody* TransMessage::release_stop_download_req_body() {
  // @@protoc_insertion_point(field_release:TransMessage.stop_download_req_body)
  if (has_stop_download_req_body()) {
    clear_has_TransMsgBody();
      ::TransMsgStopDownloadReqBody* temp = TransMsgBody_.stop_download_req_body_;
    TransMsgBody_.stop_download_req_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgStopDownloadReqBody& TransMessage::stop_download_req_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.stop_download_req_body)
  return has_stop_download_req_body()
      ? *TransMsgBody_.stop_download_req_body_
      : *reinterpret_cast< ::TransMsgStopDownloadReqBody*>(&::_TransMsgStopDownloadReqBody_default_instance_);
}
inline ::TransMsgStopDownloadReqBody* TransMessage::mutable_stop_download_req_body() {
  if (!has_stop_download_req_body()) {
    clear_TransMsgBody();
    set_has_stop_download_req_body();
    TransMsgBody_.stop_download_req_body_ = CreateMaybeMessage< ::TransMsgStopDownloadReqBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.stop_download_req_body)
  return TransMsgBody_.stop_download_req_body_;
}

// .TransMsgStopUploadRspBody stop_download_rsp_body = 27;
inline bool TransMessage::has_stop_download_rsp_body() const {
  return TransMsgBody_case() == kStopDownloadRspBody;
}
inline void TransMessage::set_has_stop_download_rsp_body() {
  _oneof_case_[0] = kStopDownloadRspBody;
}
inline void TransMessage::clear_stop_download_rsp_body() {
  if (has_stop_download_rsp_body()) {
    delete TransMsgBody_.stop_download_rsp_body_;
    clear_has_TransMsgBody();
  }
}
inline ::TransMsgStopUploadRspBody* TransMessage::release_stop_download_rsp_body() {
  // @@protoc_insertion_point(field_release:TransMessage.stop_download_rsp_body)
  if (has_stop_download_rsp_body()) {
    clear_has_TransMsgBody();
      ::TransMsgStopUploadRspBody* temp = TransMsgBody_.stop_download_rsp_body_;
    TransMsgBody_.stop_download_rsp_body_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TransMsgStopUploadRspBody& TransMessage::stop_download_rsp_body() const {
  // @@protoc_insertion_point(field_get:TransMessage.stop_download_rsp_body)
  return has_stop_download_rsp_body()
      ? *TransMsgBody_.stop_download_rsp_body_
      : *reinterpret_cast< ::TransMsgStopUploadRspBody*>(&::_TransMsgStopUploadRspBody_default_instance_);
}
inline ::TransMsgStopUploadRspBody* TransMessage::mutable_stop_download_rsp_body() {
  if (!has_stop_download_rsp_body()) {
    clear_TransMsgBody();
    set_has_stop_download_rsp_body();
    TransMsgBody_.stop_download_rsp_body_ = CreateMaybeMessage< ::TransMsgStopUploadRspBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:TransMessage.stop_download_rsp_body)
  return TransMsgBody_.stop_download_rsp_body_;
}

inline bool TransMessage::has_TransMsgBody() const {
  return TransMsgBody_case() != TRANSMSGBODY_NOT_SET;
}
inline void TransMessage::clear_has_TransMsgBody() {
  _oneof_case_[0] = TRANSMSGBODY_NOT_SET;
}
inline TransMessage::TransMsgBodyCase TransMessage::TransMsgBody_case() const {
  return TransMessage::TransMsgBodyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TransMessageApi_2eproto
